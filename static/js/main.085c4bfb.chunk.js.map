{"version":3,"sources":["env.js","functions.js","ethereum.js","containers/Navigation/NavigationElement.js","containers/Navigation/Navigation.js","containers/CertificateBox/SignerBox.js","containers/CertificateBox/CertificateBox.js","containers/RegisterCertificate/RegisterCertificate.js","containers/ViewCertificate/ViewCertificate.js","containers/ViewCertificate/Hash/Hash.js","containers/AddCertifier/AddCertifier.js","containers/ListAuthorities/CertifierBox.js","containers/ListAuthorities/ListAuthorities.js","containers/SignCertificate/SignCertificate.js","App.js","serviceWorker.js","index.js"],"names":["certificateContract","address","abi","require","module","exports","network","managerAddress","TX_STATUS_ENUM","NOT_INITIATED","SIGNING","WAITING_FOR_CONFIRMATION","CONFIRMED","ethers","parseCertificateObj","certificateObj","unsignedCertificate","utils","hexlify","concat","name","qualification","extraData","parseCertificate","certificateString","slice","length","Error","rawCertificateDetails","parsedCertificate","toUtf8String","course","score","Number","digest","toUtf8Bytes","certificateHash","keccak256","i","signatures","signature","push","rawSignature","signer","recoverAddress","stringToBytes32","text","result","bytesToString","bytes","split","join","encodeQualification","courseName","percentile","courseNameHex","percentileMul100Hex","Math","floor","decodeQualification","parsePackedAddress","packedAddresses","toLowerCase","addressArray","setGlobalVariables","window","networkId","web3","currentProvider","networkVersion","providers","Web3Provider","ethereum","getSigner","certificateContractInstance","Contract","getAddress","then","userAddress","enable","setInterval","selectedAddress","withRouter","props","urlFormat","heading","className","location","pathname","style","cursor","onClick","history","state","isManager","componentDidMount","setState","render","Component","isAuthorised","boxClassName","a","certifyingAuthorities","certifyingAuthority","console","log","validCertificate","filter","serial","QRCode","toCanvas","document","getElementById","href","id","hexZeroPad","map","entry","key","newStatus","class","txHash","target","rel","textAreaClass","parsingWait","txStatus","timeoutId","onTextAreaChange","event","spacesRemoved","value","_z","setTimeout","error","clearTimeout","onRegister","functions","registerCertificate","tx","wait","onChange","disabled","HASH_CHECKING_ENUM","NOT_CHECKING","CHECKING","FOUND_VALID","FOUND_INVALID","userEnteredHash","inputError","recentCertificateHashes","displayText","hashCheckStatus","provider","getLogs","fromBlock","toBlock","topics","logs","reverse","onVerifyCertificate","hash","certificates","signers","message","type","placeholder","loading","match","params","transactionHash","getTransaction","transaction","decoded","interface","decodeFunctionData","data","errorMessage","statusMessage","onConfirmClick","nameBytes32","addCertifyingAuthority","maxLength","certifiers","hexStripZeros","self","indexOf","CURRENT_PAGE_ENUM","SELECT_MODE","SIGN_FRESH_CERTIFICATE","SIGN_ENCODED_CERTIFICATE","currentScreen","encodedCertificate","signThisCertificate","qualificationBytes32","extraDataBytes32","unsignedCertificateConcat","signedCertificateConcat","signMessage","arrayify","createBrowserHistory","basename","process","getDefaultProvider","App","path","exact","component","RegisterCertificate","ViewCertificate","Hash","AddCertifier","ListAuthorities","SignCertificate","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.085c4bfb.chunk.js","sourcesContent":["const certificateStorageJSON = require('./compiledContracts/CertificateStorage_CertificateStorage.json');\n\nconst network = 'kovan';\nconst managerAddress = '0xc8e1f3b9a0cdfcef9ffd2343b943989a22517b26';\n\nconst certificateContract = {\n  address: '0x88B3F535fe402fC3Cf1f7e7FBEaf1197c8ebFA9e',\n  abi: certificateStorageJSON.abi\n};\n\nconst TX_STATUS_ENUM = {\n  NOT_INITIATED: 0,\n  SIGNING: 1,\n  WAITING_FOR_CONFIRMATION: 2,\n  CONFIRMED: 3\n}\n\nmodule.exports = { network, certificateContract, managerAddress, TX_STATUS_ENUM };\n","const ethers = require('ethers');\n\nconst parseCertificateObj = certificateObj => {\n  const unsignedCertificate = ethers.utils.hexlify(ethers.utils.concat([certificateObj.name, certificateObj.qualification, certificateObj.extraData]));\n\n  return parseCertificate(unsignedCertificate);\n}\n\nconst parseCertificate = certificateString => {\n  if(typeof certificateString === 'object') {\n    return parseCertificateObj(certificateString);\n  }\n\n  if(certificateString.slice(0,2) === '0x') certificateString = certificateString.slice(2);\n  if(certificateString.length < 96*2) throw new Error('Certificate length is too short');\n  if((certificateString.length - 96*2) % 65*2 !== 0) throw new Error('Invalid certificate length');\n\n  let rawCertificateDetails = '0x'+certificateString.slice(0,96*2);\n\n  const parsedCertificate = {\n    name: ethers.utils.toUtf8String('0x'+rawCertificateDetails.slice(0+2,64+2)),\n    course: ethers.utils.toUtf8String('0x'+rawCertificateDetails.slice(64+2,124+2)),\n    score: Number('0x'+rawCertificateDetails.slice(124+2,128+2))/100,\n    extraData: '0x'+rawCertificateDetails.slice(128+2,192+2)\n  }\n\n  const digest = ethers.utils.hexlify(ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n96'),rawCertificateDetails]));\n  const certificateHash = ethers.utils.keccak256(digest);\n\n  let i = 0; const signatures = [];\n\n  while(true) {\n    const signature = certificateString.slice(96*2 + i*65*2, 96*2 + (i+1)*65*2);\n    if(signature) {\n      signatures.push({\n        rawSignature: '0x'+signature,\n        signer: ethers.utils.recoverAddress(certificateHash, '0x'+signature),\n      });\n    } else {\n      break;\n    }\n    i++;\n  }\n\n  return {parsedCertificate, rawCertificateDetails, certificateHash, signatures};\n}\n\nfunction stringToBytes32(text) {\n  // text = text.slice(0,32);\n  if(text.length >= 32) throw new Error('only 32 chars allowed in bytes32');\n  var result = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(text));\n  while (result.length < 66) { result += '0'; }\n  if (result.length !== 66) { throw new Error(\"invalid web3 implicit bytes32\"); }\n  return result;\n}\n\nfunction bytesToString(bytes) {\n  return ethers.utils.toUtf8String(bytes).split('\\u0000').join('');\n}\n\nfunction encodeQualification(courseName, percentile=0) {\n  if(courseName.length >= 30) throw new Error('only 30 chars allowed as courseName');\n  const courseNameHex = stringToBytes32(courseName).slice(0,62);\n\n  // 2 byte percentile can display upto 2 decimal accuracy\n  let percentileMul100Hex = ethers.utils.hexlify(Math.floor(percentile*100));\n  while (percentileMul100Hex.length < 6) { percentileMul100Hex += '0'; }\n  // console.log({courseNameHex,percentileMul100Hex});\n\n  return ethers.utils.hexlify(ethers.utils.concat([courseNameHex, percentileMul100Hex]));\n}\n\nfunction decodeQualification(qualification) {\n  if(qualification.slice(0,2) !== '0x') throw new Error('hex string should start with 0x');\n  // qualification = qualification.slice(2);\n  const courseName = bytesToString(qualification.slice(0,62));\n  const percentile = (+('0x'+qualification.slice(62,66)))/100;\n  return {courseName, percentile};\n}\n\nfunction parsePackedAddress(packedAddresses) {\n  if(packedAddresses.slice(0,2).toLowerCase() === '0x') packedAddresses = packedAddresses.slice(2);\n  if(packedAddresses.length%40 !== 0) throw new Error('Invalid packed addresses');\n  const addressArray = [];\n  for(let i = 0; i < packedAddresses.length/40; i++) {\n    addressArray.push('0x'+packedAddresses.slice(0+40*i,40+40*i));\n  }\n  return addressArray;\n}\n\nexport { parseCertificate, stringToBytes32, bytesToString, encodeQualification, decodeQualification, parsePackedAddress };\n","const ethers = require('ethers');\nconst { certificateContract } = require('./env');\n\nconst setGlobalVariables = () => {\n  // console.log(window.web3.currentProvider);\n\n  window.networkId = window.web3.currentProvider.networkVersion;\n  // === (network === 'homestead' ? '1' : '42');\n\n  window.signer = (new ethers.providers.Web3Provider(window.ethereum)).getSigner();\n\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    window.signer\n  );\n\n  window.signer.getAddress().then(address => window.userAddress = address);\n\n  // window.userAddress = signer;//.then(address => window.userAddress = address);\n}\n\nwindow.ethereum.enable().then(setGlobalVariables);\n\nsetInterval(() => {\n  if(window.web3 && window.web3.currentProvider && window.web3.currentProvider.selectedAddress.toLowerCase() !== window.userAddress.toLowerCase()) {\n    setGlobalVariables();\n  }\n},1000);\n\n\n// export { networkId, certificateContractInstance };\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NavigationElement = props => {\n  const urlFormat = props.heading.toLowerCase().split(' ').join('-');\n\n  return (\n    <button className={`navigation-element${props.location.pathname === `/${urlFormat}` ? ' active' : ''}`} style={{cursor: 'pointer'}} onClick={() => props.history.push(`/${urlFormat}`)}>{props.heading}</button>\n  );\n};\n\nexport default withRouter(NavigationElement);\n","import React, { Component } from 'react';\nimport NavigationElement from './NavigationElement';\nimport './Navigation.css';\nimport { managerAddress } from '../../env';\n\nexport default class extends Component {\n  state = {\n    isManager: false\n  };\n\n  componentDidMount = () => {\n    setInterval(() => {\n      const isManager = managerAddress === window.web3.currentProvider.selectedAddress;\n      if(isManager !== this.state.isManager) {\n        this.setState({ isManager });\n      }\n    }, 500);\n  };\n\n  render = () => (\n    <div className=\"navigation-group\">\n      <NavigationElement heading=\"Register Certificate\" />\n      <NavigationElement heading=\"View Certificate\" />\n      {this.state.isManager ? <NavigationElement heading=\"Add Certifier\" /> : null}\n      <NavigationElement heading=\"List Authorities\" />\n      <NavigationElement heading=\"Sign Certificate\" />\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport './CertificateBox.css';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    name: null,\n    isAuthorised: null,\n    boxClassName: null\n  };\n\n  componentDidMount = async() => {\n    const certifyingAuthority = await window.certificateContractInstance.certifyingAuthorities(this.props.signer);\n    console.log('certifyingAuthority', certifyingAuthority);\n\n    this.setState({\n      name: ethers.utils.toUtf8String(certifyingAuthority.name).split('\\u0000').join(''),\n      isAuthorised: certifyingAuthority.isAuthorised,\n      boxClassName: certifyingAuthority.isAuthorised ? 'valid' : 'invalid'\n    });\n\n    console.log('found', certifyingAuthority.isAuthorised);\n    // if(this.props.validCertificate[0] !== false) {\n    //   console.log('i marked it', certifyingAuthority.isAuthorised);\n    //   this.props.validCertificate[1](certifyingAuthority.isAuthorised);\n    // }\n    if(certifyingAuthority.isAuthorised) {\n      this.props.validCertificate[1]((this.props.validCertificate[0] || 0)+1);\n    }\n  };\n\n  render = () => (\n    <div className={['signer-box', this.state.boxClassName].filter(className=>!!className).join(' ')}>\n      <p>Signer {this.props.serial}: {this.state.name ? <>{this.state.name}({this.props.signer.slice(0,6)}...{this.props.signer.slice(38)})</> : <>{this.props.signer}</>}</p>\n      <p>Signature: {this.props.signature.slice(0,10)}...{this.props.signature.slice(122)}</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport SignerBox from './SignerBox';\nimport './CertificateBox.css';\nimport { network } from '../../env';\n\nconst QRCode = require('qrcode');\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    validCertificate: (this.props.validCertificate&&this.props.validCertificate[0]) || null\n  };\n\n  componentDidMount = () => {\n    setInterval(() => {\n      if(this.props.validCertificate && this.state.validCertificate !== this.props.validCertificate[0]) {\n        this.setState({ validCertificate: this.props.validCertificate[0] });\n      }\n    }, 100);\n    QRCode.toCanvas(document.getElementById('qrcode-canvas'), window.location.href, console.log);\n  }\n\n  render = () => (\n    <div className=\"certificate-box\" id=\"printable\">\n      <p className=\"name\">{this.props.certificateObj.parsedCertificate.name}</p>\n      <p><span className=\"course\">{this.props.certificateObj.parsedCertificate.course}</span>\n      {this.props.certificateObj.parsedCertificate.score\n        ? <> (<span className=\"score\">{this.props.certificateObj.parsedCertificate.score}%</span>)</>\n        : null}</p>\n      {this.props.certificateObj.parsedCertificate.extraData !== ethers.utils.hexZeroPad('0x', 32)\n        ? <p><b>ExtraData:</b> {this.props.certificateObj.parsedCertificate.extraData}</p>\n        : null}\n\n      <p>{this.state.validCertificate === this.props.certificateObj.signatures.length\n        ? <>This is to certify that the above certificate information is signed by following {this.state.validCertificate} signer{this.state.validCertificate > 1 ? <>s</>:null} which is cryptographically verified by the certificate smart contract.</>\n        : (\n          0 < this.state.validCertificate\n          && this.state.validCertificate < this.props.certificateObj.signatures.length\n          ? <>Seems that this certificate is signed by only {this.state.validCertificate} valid signers out of {this.props.certificateObj.signatures.length} total signers, you can remove signatures of unauthorised signers.</>\n          : <>Seems that this certificate is not signed by any authorised signers.</>\n        )}</p>\n\n      {this.props.certificateObj.signatures.length\n      ? <>\n        {this.props.certificateObj.signatures.map((entry, i) => (\n          <SignerBox\n            key={'signer-'+i}\n            serial={i+1}\n            signer={entry.signer}\n            signature={entry.rawSignature}\n            validCertificate={this.props.validCertificate || [this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            />\n        ))}\n      </>\n      : null}\n\n      <div class=\"row\">\n        <div class=\"column1\">\n          <p className=\"hash\">Certificate Hash: {this.props.certificateObj.certificateHash}</p>\n          {this.props.certificateObj.txHash ? <p>Created at transaction {this.props.certificateObj.txHash.slice(0,6)}...{this.props.certificateObj.txHash.slice(62)}. <a target=\"_blank\" rel=\"noopenner noreferrer\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/tx/${this.props.certificateObj.txHash}`}>View on EtherScan</a></p> : null}\n        </div>\n        <div class=\"column2\"><canvas id=\"qrcode-canvas\" /></div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport { TX_STATUS_ENUM } from '../../env';\n\nexport default class extends Component {\n  state = {\n    certificateString: '',\n    textAreaClass: null,\n    parsingWait: false,\n    certificateObj: null,\n    validCertificate: null,\n    txStatus: TX_STATUS_ENUM.NOT_INITIATED\n  };\n\n  timeoutId = null;\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.parseCertificate(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  }\n\n  onRegister = async() => {\n    this.setState({ txStatus: TX_STATUS_ENUM.SIGNING });\n    const tx = await window.certificateContractInstance.functions.registerCertificate(this.state.certificateString);\n    this.setState({ txStatus: TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION });\n    await tx.wait();\n    this.setState({ txStatus: TX_STATUS_ENUM.CONFIRMED });\n    setTimeout(() => {\n      this.props.history.push('/view-certificate/'+this.state.certificateObj.certificateHash);\n    },1000);\n  }\n\n  render = () => (\n    <>\n      <p>Paste your signed certificate in the below box:</p>\n      <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n\n      {this.state.parsingWait\n        ? <p>Please wait parsing your certificate...</p>\n        : null}\n\n      {this.state.certificateObj\n        ? <>\n          <p>Your certificate preview:</p>\n          <CertificateBox\n            certificateObj={this.state.certificateObj}\n            validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            />\n        </>\n        : null}\n\n      {this.state.validCertificate\n        ? <>\n\n        </>\n        : <></>}\n\n        <button\n          className=\"btn\"\n          disabled={this.state.txStatus !== TX_STATUS_ENUM.NOT_INITIATED || this.state.validCertificate !== (this.state.certificateObj && this.state.certificateObj.signatures.length)}\n          onClick={this.onRegister}\n        >\n          {(() => {\n            switch(this.state.txStatus) {\n              case TX_STATUS_ENUM.NOT_INITIATED:\n                return 'Register Certificate';\n              case TX_STATUS_ENUM.SIGNING:\n                return 'Signing transaction..';\n              case TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION:\n                return 'Waiting for confirmation...';\n              case TX_STATUS_ENUM.CONFIRMED:\n                return 'Certificate is registered!';\n            }\n          })()}\n        </button>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst HASH_CHECKING_ENUM = {\n  NOT_CHECKING: 0,\n  CHECKING: 1,\n  FOUND_VALID: 2,\n  FOUND_INVALID: 3\n};\n\nexport default class extends Component {\n  state = {\n    userEnteredHash: '',\n    inputError: false,\n    recentCertificateHashes: [],\n    displayText: '',\n    hashCheckStatus: 0\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)')]\n    });\n\n    console.log(logs);\n\n    this.setState({\n      recentCertificateHashes: logs.reverse().slice(0,3).map(log => log.topics[1])\n    });\n\n  };\n\n  onVerifyCertificate = async() => {\n    this.setState({ inputError: false, hashCheckStatus: HASH_CHECKING_ENUM.CHECKING });\n    try {\n      const hash = ethers.utils.hexlify(this.state.userEnteredHash.split(' ').join('').split('\\n').join(''));\n\n      if(hash.length !== 66) throw new Error('invalid hash length');\n\n      const certificateObj = await window.certificateContractInstance.functions.certificates(hash);\n\n      window.certificates[hash] = window._z.parseCertificate(certificateObj);\n\n      if(certificateObj.signers === '0x') throw new Error('Certificate not yet registered or it does not exist');\n\n      this.setState({ hashCheckStatus: HASH_CHECKING_ENUM.FOUND_VALID });\n\n      setTimeout(() => {\n        this.props.history.push('/view-certificate/'+hash);\n      }, 400);\n    } catch(error) {\n      this.setState({ inputError: true, displayText: error.message });\n    }\n\n  };\n\n  render = () => (\n    <>\n      <input\n        className={`certificate-textinput${this.state.inputError ? ' invalid' : ''}`}\n        type=\"text\"\n        placeholder=\"Enter Certificate Hash\"\n        onChange={event => this.setState({ userEnteredHash: event.target.value, inputError: false })}\n        />\n      {this.state.displayText ? <p class={this.state.inputError ? 'error-message' : 'status-message'}>{this.state.displayText}</p> : null}\n      <button className=\"btn\" disabled={this.state.hashCheckStatus !== 0} onClick={this.onVerifyCertificate}>{(() => {\n        switch(this.state.hashCheckStatus) {\n          case HASH_CHECKING_ENUM.CHECKING:\n            return 'Checking hash...';\n          case HASH_CHECKING_ENUM.FOUND_VALID:\n            return 'Accessing certificate fields...';\n          default:\n            return 'Verify Certificate';\n        }\n      })()}</button>\n\n      {this.state.recentCertificateHashes.length\n        ? <div className=\"form-group\">\n        <p>Recent certificates issued...</p>\n        {this.state.recentCertificateHashes.map((hash,i) => (\n          <p key={`recent-certificates-${hash}`}>{hash}</p>\n        ))}\n      </div> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../../env';\nimport CertificateBox from '../../CertificateBox/CertificateBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    displayText: 'Please wait...',\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)'), this.props.match.params.hash]\n    });\n\n    if(!logs.length) this.setState({ displayText: 'Certificate not yet registered or it does not exist' });\n\n    const txHash = logs[0].transactionHash;\n    const transaction = await window.provider.getTransaction(txHash);\n    const decoded = window.certificateContractInstance.interface.decodeFunctionData('registerCertificate(bytes)',transaction.data)[0];\n    window.certificates[this.props.match.params.hash] = window._z.parseCertificate(decoded);\n    window.certificates[this.props.match.params.hash].txHash = txHash;\n    console.log({decoded, transaction});\n    this.setState({ loading: false, displayText: ''})\n  }\n  render = () => (\n    <>\n      {this.state.displayText ? <p>{this.state.displayText}</p> : null}\n      {!this.state.loading && window.certificates[this.props.match.params.hash] ? <CertificateBox\n        certificateObj={window.certificates[this.props.match.params.hash]}\n      /> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    address: '',\n    name: '',\n    errorMessage: '',\n    statusMessage: ''\n  };\n\n  onConfirmClick = async() => {\n    this.setState({ errorMessage: '', statusMessage: '' })\n    try {\n      const address = ethers.utils.getAddress(this.state.address);\n      const nameBytes32 = window._z.stringToBytes32(this.state.name);\n\n      const tx = await window.certificateContractInstance.functions.addCertifyingAuthority(\n        address, nameBytes32\n      );\n\n      this.setState({\n        statusMessage: 'Tx sent waiting for confirmation...',\n        errorMessage: ''\n      });\n\n      await tx.wait();\n\n      this.setState({ statusMessage: 'Certifier is Added!', errorMessage: '' })\n    } catch(error) {\n      this.setState({ errorMessage: error.message, statusMessage: '' })\n    }\n  }\n\n  render = () => (\n    <div>\n      <div className=\"form-group\">\n        <p>Enter Address of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Address\"\n          onChange={event => this.setState({address: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Name of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Name\"\n          maxLength=\"32\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      {this.state.errorMessage ? <p className=\"error-message\">Error: {this.state.errorMessage}</p> : null}\n\n      {this.state.statusMessage ? <p className=\"status-message\">Status: {this.state.statusMessage}</p> : null}\n\n      <button className=\"btn\" onClick={this.onConfirmClick}>Confirm New Certifier</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  state = {\n    name: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(this.props.address);\n      // console.log(certifyingAuthority);\n      const name = window._z.bytesToString(certifyingAuthority.name);\n      this.setState({ name, isAuthorised: certifyingAuthority.isAuthorised });\n    } catch (error) {\n      console.error(error);\n      this.setState({ name: 'Failed to load name...' });\n    }\n  }\n\n  render = () => (\n    <>\n      <div className=\"form-group\">\n        <p>Name: {this.state.name === null ? 'Loading...' : this.state.name}</p>\n        <p>Signing Address: {this.props.address}</p>\n        <p>Is Authorized: {this.state.isAuthorised === null ? 'Loading...' : (\n          this.state.isAuthorised ? 'Yes' : 'No'\n        )}</p>\n      </div>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../env';\nimport CertifierBox from './CertifierBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    certifiers: [],\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Authorization(address,bool)')]\n    });\n    // console.log(logs);\n    this.setState({\n      certifiers: logs.map(log => ethers.utils.hexZeroPad(ethers.utils.hexStripZeros(log.topics[1]), 20)).filter((address, i, self) => self.indexOf(address) === i),\n      loading: false\n    });\n  }\n\n  render = () => (\n    <>\n      {this.state.loading ? <>Please wait loading certifying authorities</> : null}\n      {this.state.certifiers.map((address,i) => (\n        <CertifierBox key={`certifier-${address}${i}`} address={address} />\n      ))}\n    </>\n  );\n}\n","import React, { Component } from 'react';\n// import { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst CURRENT_PAGE_ENUM = {\n  SELECT_MODE: 0,\n  SIGN_FRESH_CERTIFICATE: 1,\n  SIGN_ENCODED_CERTIFICATE: 2\n};\n\nexport default class extends Component {\n  state = {\n    currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE,\n    name: '',\n    course: '',\n    score: '',\n    extraData: '',\n    encodedCertificate: '',\n    isAuthorised: true\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(await window.signer.getAddress());\n\n      if(!certifyingAuthority.isAuthorised) {\n        this.setState({ isAuthorised: false });\n      }\n    } catch(error) {\n      console.error(error);\n      setTimeout(this.componentDidMount, 1000);\n    }\n  }\n\n  signThisCertificate = async() => {\n    try {\n      const nameBytes32 = window._z.stringToBytes32(this.state.name);\n      const qualificationBytes32 = window._z.encodeQualification(\n        this.state.course,\n        +this.state.score\n      );\n      const extraData = ethers.utils.hexlify(this.state.extraData || '0x');\n      if(extraData.length > 66) throw new Error('Extra Data Overflow, limit is 32 bytes');\n      const extraDataBytes32 = ethers.utils.hexZeroPad(extraData, 32);\n\n      const unsignedCertificateConcat = ethers.utils.hexlify(ethers.utils.concat([\n        nameBytes32,\n        qualificationBytes32,\n        extraDataBytes32\n      ]));\n\n      const unsignedCertificateHash = ethers.utils.keccak256(\n        ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n96'),unsignedCertificateConcat])\n      );\n\n      let signedCertificateConcat = unsignedCertificateConcat;\n\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(unsignedCertificateConcat));\n      signedCertificateConcat = ethers.utils.concat([signedCertificateConcat, signature]);\n\n      this.setState({\n        encodedCertificate: ethers.utils.hexlify(signedCertificateConcat)\n      });\n\n      console.log('signed',ethers.utils.hexlify(signedCertificateConcat));\n    } catch (error) {\n\n    }\n  };\n\n  render = () => (\n    <>\n      {!this.state.isAuthorised ? <p className=\"error-message\">Looks like {window.userAddress} is not authorised as a certifying authority, hence the smart contract will not accept certificates signed by this private key.</p> : null}\n\n      <div className=\"form-group\">\n        <p>Enter Name:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Enter Certifiee Name (Max 30 chars)\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Course:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Enter Certifiee Course (Max 30 chars)\"\n          maxLength=\"30\"\n          onChange={event => this.setState({course: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Score:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"E.g. 74.89\"\n          onChange={event => this.setState({score: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Extra Data:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Enter Hex String 0x or can leave empty\"\n          onChange={event => this.setState({extraData: event.target.value})}/>\n      </div>\n\n      <button className=\"btn\" onClick={this.signThisCertificate}>Sign this Certificate</button>\n    </>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Navigation from './containers/Navigation/Navigation';\nimport RegisterCertificate from './containers/RegisterCertificate/RegisterCertificate';\nimport ViewCertificate from './containers/ViewCertificate/ViewCertificate';\nimport Hash from './containers/ViewCertificate/Hash/Hash';\nimport AddCertifier from './containers/AddCertifier/AddCertifier';\nimport ListAuthorities from './containers/ListAuthorities/ListAuthorities';\nimport SignCertificate from './containers/SignCertificate/SignCertificate';\nimport './App.css';\n\nimport { network } from './env';\n\nconst history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\n\nwindow.ethers = require('ethers');\nwindow.provider = window.ethers.getDefaultProvider(network);\nwindow._z = require('./functions');\nwindow.certificates = {};\n\nrequire('./ethereum');\n// window.certificateContractInstance = require('./ethereum').certificateContractInstance;\n\nconst App = props => (\n  <BrowserRouter history={history}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navigation />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact component={() => (\n              <p>Welcome to Certificate UI.<br />Please select an option from above.</p>\n            )} />\n            <Route path=\"/register-certificate\" exact component={RegisterCertificate} />\n            <Route path=\"/view-certificate\" exact component={ViewCertificate} />\n            <Route path=\"/view-certificate/:hash\" exact component={Hash} />\n            <Route path=\"/add-certifier\" exact component={AddCertifier} />\n            <Route path=\"/list-authorities\" exact component={ListAuthorities} />\n            <Route path=\"/sign-certificate\" exact component={SignCertificate} />\n          </Switch>\n        </div>\n      </header>\n    </div>\n  </BrowserRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}