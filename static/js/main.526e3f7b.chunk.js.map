{"version":3,"sources":["env.js","functions.js","ethereum.js","containers/Navigation/NavigationElement.js","containers/Navigation/Navigation.js","containers/CertificateBox/SignerBox.js","containers/CertificateBox/CertificateBox.js","containers/RegisterCertificate/RegisterCertificate.js","containers/ViewCertificate/ViewCertificate.js","containers/ViewCertificate/Hash/Hash.js","containers/AddCertifier/AddCertifier.js","containers/ListAuthorities/CertifierBox.js","containers/ListAuthorities/ListAuthorities.js","containers/SignCertificate/CSVReader.js","containers/SignCertificate/SignCertificate.js","App.js","serviceWorker.js","index.js"],"names":["certificateContract","address","abi","require","module","exports","network","managerAddress","TX_STATUS_ENUM","NOT_INITIATED","SIGNING","WAITING_FOR_CONFIRMATION","CONFIRMED","ethers","parseCertificateObj","certificateObj","unsignedCertificate","utils","hexlify","concat","name","qualification","extraData","parseCertificate","certificateString","slice","length","Error","rawCertificateDetails","parsedCertificate","toUtf8String","course","score","Number","digest","toUtf8Bytes","certificateHash","keccak256","i","signatures","signature","push","rawSignature","signer","recoverAddress","stringToBytes32","text","result","bytesToString","bytes","split","join","encodeQualification","courseName","percentile","courseNameHex","percentileMul100Hex","Math","floor","decodeQualification","parsePackedAddress","packedAddresses","toLowerCase","addressArray","setGlobalVariables","window","networkId","web3","currentProvider","networkVersion","providers","Web3Provider","ethereum","getSigner","certificateContractInstance","Contract","getAddress","then","userAddress","enable","setInterval","selectedAddress","getDefaultProvider","withRouter","props","urlFormat","heading","className","location","pathname","style","cursor","onClick","history","state","isManager","showAllItems","displayHideButton","componentDidMount","setState","navigationGroup","document","querySelector","offsetHeight","render","Component","isAuthorised","boxClassName","a","certifyingAuthorities","certifyingAuthority","console","log","validCertificate","filter","serial","QRCode","toCanvas","getElementById","href","id","Helmet","content","hexZeroPad","map","entry","key","newStatus","class","txHash","target","rel","textAreaClass","parsingWait","txStatus","timeoutId","onTextAreaChange","event","spacesRemoved","value","_z","setTimeout","error","clearTimeout","onRegister","functions","registerCertificate","tx","wait","onChange","disabled","HASH_CHECKING_ENUM","NOT_CHECKING","CHECKING","FOUND_VALID","FOUND_INVALID","userEnteredHash","inputError","recentCertificateHashes","displayText","hashCheckStatus","provider","getLogs","fromBlock","toBlock","topics","logs","reverse","onVerifyCertificate","hash","certificates","signers","message","type","placeholder","loading","match","params","transactionHash","getTransaction","transaction","decoded","interface","decodeFunctionData","data","errorMessage","statusMessage","onConfirmClick","nameBytes32","addCertifyingAuthority","maxLength","certifiers","hexStripZeros","self","indexOf","CSVReader","inputId","onFileLoaded","onError","accept","e","reader","FileReader","filename","files","onload","readAsText","handleChangeFile","CURRENT_PAGE_ENUM","SELECT_MODE","SIGN_FRESH_CERTIFICATE","SIGN_ENCODED_CERTIFICATE","SIGN_CSV","currentScreen","encodedCertificate","certificatesToSign","errorsInCSV","csvSigning","certificatesSigned","signThisCertificate","qualificationBytes32","extraDataBytes32","unsignedCertificateConcat","signedCertificateConcat","signMessage","arrayify","output","row","details","signedCertificate","screen","header","textAlign","click","display","handleDarkSideForce","obj","alert","arrayOfCertificatesSignedPromises","this","Promise","all","promise","c","element","createElement","file","Blob","URL","createObjectURL","download","body","appendChild","createBrowserHistory","basename","process","App","path","exact","component","RegisterCertificate","ViewCertificate","Hash","AddCertifier","ListAuthorities","SignCertificate","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.526e3f7b.chunk.js","sourcesContent":["const certificateStorageJSON = require('./compiledContracts/CertificateStorage_CertificateStorage.json');\n\nconst network = 'kovan';\nconst managerAddress = '0xc8e1f3b9a0cdfcef9ffd2343b943989a22517b26';\n\nconst certificateContract = {\n  address: '0x88B3F535fe402fC3Cf1f7e7FBEaf1197c8ebFA9e',\n  abi: certificateStorageJSON.abi\n};\n\nconst TX_STATUS_ENUM = {\n  NOT_INITIATED: 0,\n  SIGNING: 1,\n  WAITING_FOR_CONFIRMATION: 2,\n  CONFIRMED: 3\n}\n\nmodule.exports = { network, certificateContract, managerAddress, TX_STATUS_ENUM };\n","const ethers = require('ethers');\n\nconst parseCertificateObj = certificateObj => {\n  const unsignedCertificate = ethers.utils.hexlify(ethers.utils.concat([certificateObj.name, certificateObj.qualification, certificateObj.extraData]));\n\n  return parseCertificate(unsignedCertificate);\n}\n\nconst parseCertificate = certificateString => {\n  if(typeof certificateString === 'object') {\n    return parseCertificateObj(certificateString);\n  }\n\n  if(certificateString.slice(0,2) === '0x') certificateString = certificateString.slice(2);\n  if(certificateString.length < 96*2) throw new Error('Certificate length is too short');\n  if((certificateString.length - 96*2) % 65*2 !== 0) throw new Error('Invalid certificate length');\n\n  let rawCertificateDetails = '0x'+certificateString.slice(0,96*2);\n\n  const parsedCertificate = {\n    name: ethers.utils.toUtf8String('0x'+rawCertificateDetails.slice(0+2,64+2)),\n    course: ethers.utils.toUtf8String('0x'+rawCertificateDetails.slice(64+2,124+2)),\n    score: Number('0x'+rawCertificateDetails.slice(124+2,128+2))/100,\n    extraData: '0x'+rawCertificateDetails.slice(128+2,192+2)\n  }\n\n  const digest = ethers.utils.hexlify(ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n96'),rawCertificateDetails]));\n  const certificateHash = ethers.utils.keccak256(digest);\n\n  let i = 0; const signatures = [];\n\n  while(true) {\n    const signature = certificateString.slice(96*2 + i*65*2, 96*2 + (i+1)*65*2);\n    if(signature) {\n      signatures.push({\n        rawSignature: '0x'+signature,\n        signer: ethers.utils.recoverAddress(certificateHash, '0x'+signature),\n      });\n    } else {\n      break;\n    }\n    i++;\n  }\n\n  return {parsedCertificate, rawCertificateDetails, certificateHash, signatures};\n}\n\nfunction stringToBytes32(text) {\n  // text = text.slice(0,32);\n  if(text.length >= 32) throw new Error('only 32 chars allowed in bytes32');\n  var result = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(text));\n  while (result.length < 66) { result += '0'; }\n  if (result.length !== 66) { throw new Error(\"invalid web3 implicit bytes32\"); }\n  return result;\n}\n\nfunction bytesToString(bytes) {\n  return ethers.utils.toUtf8String(bytes).split('\\u0000').join('');\n}\n\nfunction encodeQualification(courseName, percentile=0) {\n  if(courseName.length >= 30) throw new Error('only 30 chars allowed as courseName');\n  const courseNameHex = stringToBytes32(courseName).slice(0,62);\n\n  // 2 byte percentile can display upto 2 decimal accuracy\n  let percentileMul100Hex = ethers.utils.hexlify(Math.floor(percentile*100));\n  while (percentileMul100Hex.length < 6) { percentileMul100Hex += '0'; }\n  // console.log({courseNameHex,percentileMul100Hex});\n\n  return ethers.utils.hexlify(ethers.utils.concat([courseNameHex, percentileMul100Hex]));\n}\n\nfunction decodeQualification(qualification) {\n  if(qualification.slice(0,2) !== '0x') throw new Error('hex string should start with 0x');\n  // qualification = qualification.slice(2);\n  const courseName = bytesToString(qualification.slice(0,62));\n  const percentile = (+('0x'+qualification.slice(62,66)))/100;\n  return {courseName, percentile};\n}\n\nfunction parsePackedAddress(packedAddresses) {\n  if(packedAddresses.slice(0,2).toLowerCase() === '0x') packedAddresses = packedAddresses.slice(2);\n  if(packedAddresses.length%40 !== 0) throw new Error('Invalid packed addresses');\n  const addressArray = [];\n  for(let i = 0; i < packedAddresses.length/40; i++) {\n    addressArray.push('0x'+packedAddresses.slice(0+40*i,40+40*i));\n  }\n  return addressArray;\n}\n\nexport { parseCertificate, stringToBytes32, bytesToString, encodeQualification, decodeQualification, parsePackedAddress };\n","const ethers = require('ethers');\nconst { certificateContract, network } = require('./env');\n\nconst setGlobalVariables = () => {\n  // console.log(window.web3.currentProvider);\n\n  window.networkId = window.web3.currentProvider.networkVersion;\n  // === (network === 'homestead' ? '1' : '42');\n\n  window.signer = (new ethers.providers.Web3Provider(window.ethereum)).getSigner();\n\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    window.signer\n  );\n\n  window.signer.getAddress().then(address => window.userAddress = address);\n\n  // window.userAddress = signer;//.then(address => window.userAddress = address);\n}\n\nif(window.ethereum) {\n  window.ethereum.enable().then(setGlobalVariables);\n\n  setInterval(() => {\n    if(window.web3 && window.web3.currentProvider && window.web3.currentProvider.selectedAddress.toLowerCase() !== window.userAddress.toLowerCase()) {\n      setGlobalVariables();\n    }\n  },1000);\n} else {\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    ethers.getDefaultProvider(network)\n  );\n}\n\n\n// export { networkId, certificateContractInstance };\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NavigationElement = props => {\n  const urlFormat = props.heading.toLowerCase().split(' ').join('-');\n\n  return (\n    <button className={`navigation-element${props.location.pathname === `/${urlFormat}` ? ' active' : ''}`} style={{cursor: 'pointer'}} onClick={() => props.history.push(`/${urlFormat}`)}>{props.heading}</button>\n  );\n};\n\nexport default withRouter(NavigationElement);\n","import React, { Component } from 'react';\nimport NavigationElement from './NavigationElement';\nimport './Navigation.css';\nimport { managerAddress } from '../../env';\n\nexport default class extends Component {\n  state = {\n    isManager: false,\n    showAllItems: true,\n    displayHideButton: false\n  };\n\n  componentDidMount = () => {\n    setInterval(() => {\n      const isManager = !!window.web3 && !!window.web3.currentProvider && managerAddress === window.web3.currentProvider.selectedAddress;\n      if(isManager !== this.state.isManager) {\n        this.setState({ isManager });\n      }\n\n      const navigationGroup = document.querySelector('.navigation-group');\n      if(navigationGroup) {\n        if(navigationGroup.offsetHeight > 56) {\n          this.setState({ displayHideButton: true });\n        } else {\n          this.setState({ displayHideButton: !this.state.showAllItems });\n        }\n      }\n    }, 500);\n  };\n\n  render = () => (\n    <div className=\"navigation-group\">\n      {this.state.showAllItems ? <>\n        <NavigationElement heading=\"Register Certificate\" />\n        <NavigationElement heading=\"View Certificate\" />\n        {this.state.isManager ? <NavigationElement heading=\"Add Certifier\" /> : null}\n        <NavigationElement heading=\"List Authorities\" />\n        <NavigationElement heading=\"Sign Certificate\" />\n      </> : null}\n      {this.state.displayHideButton ? <button\n        className=\"navigation-element\"\n        style={{cursor: 'pointer'}}\n        onClick={() => this.setState({ showAllItems: !this.state.showAllItems })}\n      >\n        {this.state.showAllItems\n          ? <>Hide Menu Items</>\n          : <>Show Menu Items</>}\n      </button> : null}\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport './CertificateBox.css';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    name: null,\n    isAuthorised: null,\n    boxClassName: null\n  };\n\n  componentDidMount = async() => {\n    const certifyingAuthority = await window.certificateContractInstance.certifyingAuthorities(this.props.signer);\n    console.log('certifyingAuthority', certifyingAuthority);\n\n    this.setState({\n      name: ethers.utils.toUtf8String(certifyingAuthority.name).split('\\u0000').join(''),\n      isAuthorised: certifyingAuthority.isAuthorised,\n      boxClassName: certifyingAuthority.isAuthorised ? 'valid' : 'invalid'\n    });\n\n    console.log('found', certifyingAuthority.isAuthorised);\n    // if(this.props.validCertificate[0] !== false) {\n    //   console.log('i marked it', certifyingAuthority.isAuthorised);\n    //   this.props.validCertificate[1](certifyingAuthority.isAuthorised);\n    // }\n    if(certifyingAuthority.isAuthorised) {\n      this.props.validCertificate[1]((this.props.validCertificate[0] || 0)+1);\n    }\n  };\n\n  render = () => (\n    <div className={['signer-box', this.state.boxClassName].filter(className=>!!className).join(' ')}>\n      <p>Signer {this.props.serial}: {this.state.name ? <>{this.state.name}({this.props.signer.slice(0,6)}...{this.props.signer.slice(38)})</> : <>{this.props.signer}</>}</p>\n      <p>Signature: {this.props.signature.slice(0,10)}...{this.props.signature.slice(122)}</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport SignerBox from './SignerBox';\nimport './CertificateBox.css';\nimport { network } from '../../env';\n\nconst QRCode = require('qrcode');\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    validCertificate: (this.props.validCertificate&&this.props.validCertificate[0]) || null\n  };\n\n  componentDidMount = () => {\n    setInterval(() => {\n      if(this.props.validCertificate && this.state.validCertificate !== this.props.validCertificate[0]) {\n        this.setState({ validCertificate: this.props.validCertificate[0] });\n      }\n    }, 100);\n    QRCode.toCanvas(document.getElementById('qrcode-canvas'), window.location.href, console.log);\n  }\n\n  render = () => (\n    <div className=\"certificate-box\" id=\"printable\">\n      <Helmet>\n        <title>{this.props.certificateObj.parsedCertificate.name} is certified on Blockchain</title>\n        <meta\n          name=\"description\"\n          content=\"View certifications on blockchain\"\n        />\n      </Helmet>\n      <p className=\"name\">{this.props.certificateObj.parsedCertificate.name}</p>\n      <p><span className=\"course\">{this.props.certificateObj.parsedCertificate.course}</span>\n      {this.props.certificateObj.parsedCertificate.score\n        ? <> (<span className=\"score\">{this.props.certificateObj.parsedCertificate.score}%</span>)</>\n        : null}</p>\n      {this.props.certificateObj.parsedCertificate.extraData !== ethers.utils.hexZeroPad('0x', 32)\n        ? <p><b>ExtraData:</b> {this.props.certificateObj.parsedCertificate.extraData}</p>\n        : null}\n\n      <p>{this.state.validCertificate === this.props.certificateObj.signatures.length\n        ? <>This is to certify that the above certificate information is signed by following {this.state.validCertificate} signer{this.state.validCertificate > 1 ? <>s</>:null} which is cryptographically verified by the certificate smart contract.</>\n        : (\n          0 < this.state.validCertificate\n          && this.state.validCertificate < this.props.certificateObj.signatures.length\n          ? <>Seems that this certificate is signed by only {this.state.validCertificate} valid signers out of {this.props.certificateObj.signatures.length} total signers, you can remove signatures of unauthorised signers.</>\n          : <>Seems that this certificate is not signed by any authorised signers.</>\n        )}</p>\n\n      {this.props.certificateObj.signatures.length\n      ? <>\n        {this.props.certificateObj.signatures.map((entry, i) => (\n          <SignerBox\n            key={'signer-'+i}\n            serial={i+1}\n            signer={entry.signer}\n            signature={entry.rawSignature}\n            validCertificate={this.props.validCertificate || [this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            />\n        ))}\n      </>\n      : null}\n\n      <div class=\"row\">\n        <div class=\"column1\">\n          <p className=\"hash\">Certificate Hash: {this.props.certificateObj.certificateHash}</p>\n          {this.props.certificateObj.txHash ? <p>Created at transaction {this.props.certificateObj.txHash.slice(0,6)}...{this.props.certificateObj.txHash.slice(62)}. <a target=\"_blank\" rel=\"noopenner noreferrer\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/tx/${this.props.certificateObj.txHash}`}>View on EtherScan</a></p> : null}\n        </div>\n        <div class=\"column2\"><canvas id=\"qrcode-canvas\" /></div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport { TX_STATUS_ENUM } from '../../env';\n\nexport default class extends Component {\n  state = {\n    certificateString: '',\n    textAreaClass: null,\n    parsingWait: false,\n    certificateObj: null,\n    validCertificate: null,\n    txStatus: TX_STATUS_ENUM.NOT_INITIATED\n  };\n\n  timeoutId = null;\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.parseCertificate(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  }\n\n  onRegister = async() => {\n    this.setState({ txStatus: TX_STATUS_ENUM.SIGNING });\n    const tx = await window.certificateContractInstance.functions.registerCertificate(this.state.certificateString);\n    this.setState({ txStatus: TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION });\n    await tx.wait();\n    this.setState({ txStatus: TX_STATUS_ENUM.CONFIRMED });\n    setTimeout(() => {\n      this.props.history.push(`view-certificate/${this.state.certificateObj.certificateHash}`);\n    },1000);\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>Register Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"Register your certificate on Blockchain\"\n        />\n      </Helmet>\n      <p>Paste your signed certificate in the below box:</p>\n      <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n\n      {this.state.parsingWait\n        ? <p>Please wait parsing your certificate...</p>\n        : null}\n\n      {this.state.certificateObj\n        ? <>\n          <p>Your certificate preview:</p>\n          <CertificateBox\n            certificateObj={this.state.certificateObj}\n            validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            />\n        </>\n        : null}\n\n      {this.state.validCertificate\n        ? <>\n\n        </>\n        : <></>}\n\n        <button\n          className=\"btn\"\n          disabled={this.state.txStatus !== TX_STATUS_ENUM.NOT_INITIATED || this.state.validCertificate !== (this.state.certificateObj && this.state.certificateObj.signatures.length)}\n          onClick={this.onRegister}\n        >\n          {(() => {\n            switch(this.state.txStatus) {\n              case TX_STATUS_ENUM.NOT_INITIATED:\n                return 'Register Certificate';\n              case TX_STATUS_ENUM.SIGNING:\n                return 'Signing transaction..';\n              case TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION:\n                return 'Waiting for confirmation...';\n              case TX_STATUS_ENUM.CONFIRMED:\n                return 'Certificate is registered!';\n            }\n          })()}\n        </button>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst HASH_CHECKING_ENUM = {\n  NOT_CHECKING: 0,\n  CHECKING: 1,\n  FOUND_VALID: 2,\n  FOUND_INVALID: 3\n};\n\nexport default class extends Component {\n  state = {\n    userEnteredHash: '',\n    inputError: false,\n    recentCertificateHashes: [],\n    displayText: '',\n    hashCheckStatus: 0\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)')]\n    });\n\n    console.log(logs);\n\n    this.setState({\n      recentCertificateHashes: logs.reverse().slice(0,3).map(log => log.topics[1])\n    });\n\n  };\n\n  onVerifyCertificate = async() => {\n    this.setState({ inputError: false, hashCheckStatus: HASH_CHECKING_ENUM.CHECKING });\n    try {\n      const hash = ethers.utils.hexlify(this.state.userEnteredHash.split(' ').join('').split('\\n').join(''));\n\n      if(hash.length !== 66) throw new Error('invalid hash length');\n\n      const certificateObj = await window.certificateContractInstance.functions.certificates(hash);\n\n      window.certificates[hash] = window._z.parseCertificate(certificateObj);\n\n      if(certificateObj.signers === '0x') throw new Error('Certificate not yet registered or it does not exist');\n\n      this.setState({ hashCheckStatus: HASH_CHECKING_ENUM.FOUND_VALID });\n\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${hash}`);\n      }, 400);\n    } catch(error) {\n      this.setState({ inputError: true, displayText: error.message });\n    }\n\n  };\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>View Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"View certificates on Blockchain\"\n        />\n      </Helmet>\n      <input\n        className={`certificate-textinput${this.state.inputError ? ' invalid' : ''}`}\n        type=\"text\"\n        placeholder=\"Enter Certificate Hash\"\n        onChange={event => this.setState({ userEnteredHash: event.target.value, inputError: false })}\n        />\n      {this.state.displayText ? <p class={this.state.inputError ? 'error-message' : 'status-message'}>{this.state.displayText}</p> : null}\n      <button className=\"btn\" disabled={this.state.hashCheckStatus !== 0} onClick={this.onVerifyCertificate}>{(() => {\n        switch(this.state.hashCheckStatus) {\n          case HASH_CHECKING_ENUM.CHECKING:\n            return 'Checking hash...';\n          case HASH_CHECKING_ENUM.FOUND_VALID:\n            return 'Accessing certificate fields...';\n          default:\n            return 'Verify Certificate';\n        }\n      })()}</button>\n\n      {this.state.recentCertificateHashes.length\n        ? <div className=\"form-group\">\n        <p>Recent certificates issued...</p>\n        {this.state.recentCertificateHashes.map((hash,i) => (\n          <p key={`recent-certificates-${hash}`}>{hash}</p>\n        ))}\n      </div> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../../env';\nimport CertificateBox from '../../CertificateBox/CertificateBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    displayText: 'Please wait...',\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)'), this.props.match.params.hash]\n    });\n\n    if(!logs.length) this.setState({ displayText: 'Certificate not yet registered or it does not exist' });\n\n    const txHash = (logs.reverse())[0].transactionHash;\n    const transaction = await window.provider.getTransaction(txHash);\n    const decoded = window.certificateContractInstance.interface.decodeFunctionData('registerCertificate(bytes)',transaction.data)[0];\n    window.certificates[this.props.match.params.hash] = window._z.parseCertificate(decoded);\n    window.certificates[this.props.match.params.hash].txHash = txHash;\n    console.log({decoded, transaction});\n    this.setState({ loading: false, displayText: ''})\n  }\n  render = () => (\n    <>\n      {this.state.displayText ? <p>{this.state.displayText}</p> : null}\n      {!this.state.loading && window.certificates[this.props.match.params.hash] ? <CertificateBox\n        certificateObj={window.certificates[this.props.match.params.hash]}\n      /> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    address: '',\n    name: '',\n    errorMessage: '',\n    statusMessage: ''\n  };\n\n  onConfirmClick = async() => {\n    this.setState({ errorMessage: '', statusMessage: '' })\n    try {\n      const address = ethers.utils.getAddress(this.state.address);\n      const nameBytes32 = window._z.stringToBytes32(this.state.name);\n\n      const tx = await window.certificateContractInstance.functions.addCertifyingAuthority(\n        address, nameBytes32\n      );\n\n      this.setState({\n        statusMessage: 'Tx sent waiting for confirmation...',\n        errorMessage: ''\n      });\n\n      await tx.wait();\n\n      this.setState({ statusMessage: 'Certifier is Added!', errorMessage: '' })\n    } catch(error) {\n      this.setState({ errorMessage: error.message, statusMessage: '' })\n    }\n  }\n\n  render = () => (\n    <div>\n      <Helmet>\n        <title>Add Certifier</title>\n        <meta\n          name=\"description\"\n          content=\"Add Certification Authority to certify.\"\n        />\n      </Helmet>\n      <div className=\"form-group\">\n        <p>Enter Address of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Address\"\n          onChange={event => this.setState({address: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Name of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Name\"\n          maxLength=\"32\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      {this.state.errorMessage ? <p className=\"error-message\">Error: {this.state.errorMessage}</p> : null}\n\n      {this.state.statusMessage ? <p className=\"status-message\">Status: {this.state.statusMessage}</p> : null}\n\n      <button className=\"btn\" onClick={this.onConfirmClick}>Confirm New Certifier</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  state = {\n    name: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(this.props.address);\n      // console.log(certifyingAuthority);\n      const name = window._z.bytesToString(certifyingAuthority.name);\n      this.setState({ name, isAuthorised: certifyingAuthority.isAuthorised });\n    } catch (error) {\n      console.error(error);\n      this.setState({ name: 'Failed to load name...' });\n    }\n  }\n\n  render = () => (\n    <>\n      <div className=\"form-group\">\n        <p>Name: {this.state.name === null ? 'Loading...' : this.state.name}</p>\n        <p>Signing Address: {this.props.address}</p>\n        <p>Is Authorized: {this.state.isAuthorised === null ? 'Loading...' : (\n          this.state.isAuthorised ? 'Yes' : 'No'\n        )}</p>\n      </div>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\nimport CertifierBox from './CertifierBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    certifiers: [],\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Authorization(address,bool)')]\n    });\n    // console.log(logs);\n    this.setState({\n      certifiers: logs.map(log => ethers.utils.hexZeroPad(ethers.utils.hexStripZeros(log.topics[1]), 20)).filter((address, i, self) => self.indexOf(address) === i),\n      loading: false\n    });\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>List of Certification Authorities</title>\n        <meta\n          name=\"description\"\n          content=\"See all certification authorities\"\n        />\n      </Helmet>\n      {this.state.loading ? <>Please wait loading certifying authorities</> : null}\n      {this.state.certifiers.map((address,i) => (\n        <CertifierBox key={`certifier-${address}${i}`} address={address} />\n      ))}\n    </>\n  );\n}\n","import React from 'react';\n\nconst CSVReader = ({\n  inputId,\n  style,\n  onFileLoaded,\n  onError\n}) => {\n  let fileContent = undefined;\n\n  const handleChangeFile = e => {\n    try {\n      let reader = new FileReader();\n      const filename = e.target.files[0].name;\n\n      reader.onload = event => {\n        // const csvData = PapaParse.parse(\n        //   ,\n        //   Object.assign(parserOptions, {\n        //     error: onError\n        //   })\n        // );\n        onFileLoaded(event.target.result, filename);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id={inputId}\n        style={style}\n        accept=\".csv, text/csv\"\n        onChange={e => handleChangeFile(e)}\n      />\n    </div>\n  );\n};\n\nexport default CSVReader;\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n// import { certificateContract } from '../../env';\nimport CSVReader from './CSVReader';\n\nconst ethers = require('ethers');\n\nconst CURRENT_PAGE_ENUM = {\n  SELECT_MODE: 0,\n  SIGN_FRESH_CERTIFICATE: 1,\n  SIGN_ENCODED_CERTIFICATE: 2,\n  SIGN_CSV: 3\n};\n\nexport default class extends Component {\n  state = {\n    currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE,\n    name: '',\n    course: '',\n    score: '',\n    extraData: '',\n    encodedCertificate: '',\n    isAuthorised: true,\n    certificatesToSign: [],\n    errorsInCSV: '',\n    csvSigning: false,\n    certificatesSigned: []\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(await window.signer.getAddress());\n\n      if(!certifyingAuthority.isAuthorised) {\n        this.setState({ isAuthorised: false });\n      }\n    } catch(error) {\n      console.error(error);\n      setTimeout(this.componentDidMount, 1000);\n    }\n  }\n\n  signThisCertificate = async() => {\n    try {\n      const nameBytes32 = window._z.stringToBytes32(this.state.name);\n      const qualificationBytes32 = window._z.encodeQualification(\n        this.state.course,\n        +this.state.score\n      );\n      const extraData = ethers.utils.hexlify(this.state.extraData || '0x');\n      if(extraData.length > 66) throw new Error('Extra Data Overflow, limit is 32 bytes');\n      const extraDataBytes32 = ethers.utils.hexZeroPad(extraData, 32);\n\n      const unsignedCertificateConcat = ethers.utils.hexlify(ethers.utils.concat([\n        nameBytes32,\n        qualificationBytes32,\n        extraDataBytes32\n      ]));\n\n      const unsignedCertificateHash = ethers.utils.keccak256(\n        ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n96'),unsignedCertificateConcat])\n      );\n\n      let signedCertificateConcat = unsignedCertificateConcat;\n\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(unsignedCertificateConcat));\n      signedCertificateConcat = ethers.utils.concat([signedCertificateConcat, signature]);\n\n      this.setState({\n        encodedCertificate: ethers.utils.hexlify(signedCertificateConcat)\n      });\n\n      console.log('signed',ethers.utils.hexlify(signedCertificateConcat));\n    } catch (error) {\n\n    }\n  };\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.parseCertificate(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  };\n\n  onFileLoaded = output => {\n    let errorsInCSV = '';\n    // csv rows: name, course, percentile, extraData, concatOfOtherSignatures\n    const certificatesToSign = output.split('\\n').map((row, i) => {\n      const details = row.split(',');\n      // console.log(details);\n      try {\n        if(details.length < 4) throw new Error('Not enough entries');\n        const nameBytes32 = window._z.stringToBytes32(details[0]);\n        const qualificationBytes32 = window._z.encodeQualification(details[1],+details[2]);\n\n        const extraData = ethers.utils.hexlify(details[3] || '0x');\n        if(extraData.length > 66) throw new Error('Extra Data Overflow, limit is 32 bytes');\n        const extraDataBytes32 = ethers.utils.hexZeroPad(extraData, 32);\n\n        if(details[4] && details[4].slice(0,2) !== '0x') throw new Error('Invalid signatures, empty the column if no signature');\n\n        const unsignedCertificate = ethers.utils.hexlify(ethers.utils.concat([\n          nameBytes32,\n          qualificationBytes32,\n          extraDataBytes32\n        ]));\n\n        return {\n          details,\n          unsignedCertificate,\n          signedCertificate: details[4] || unsignedCertificate\n        };\n      } catch (error) {\n        errorsInCSV += `Error at row ${i+1}: ${error.message}\\n`;\n      }\n    }).filter(entry => !!entry);\n    console.log({certificatesToSign}, errorsInCSV);\n    this.setState({ certificatesToSign, errorsInCSV });\n  }\n\n  render = () => {\n    let screen;\n\n    const header = (\n      <p style={{textAlign: ''}}><button className=\"btn\" onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE })}>Go Back to Select Mode</button></p>\n    );\n\n    if(this.state.currentScreen === CURRENT_PAGE_ENUM.SELECT_MODE) {\n      screen = (\n        <>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE })}\n          >New Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE })}\n          >Sign Encoded Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_CSV })}\n          >CSV Mode</button>\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE) {\n      screen = (\n        <>\n        {header}\n        <div className=\"form-group\">\n          <p>Enter Name:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Certifiee Name (Max 30 chars)\"\n            onChange={event => this.setState({name: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Course:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Certifiee Course (Max 30 chars)\"\n            maxLength=\"30\"\n            onChange={event => this.setState({course: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Score:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"E.g. 74.89\"\n            onChange={event => this.setState({score: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Extra Data:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Hex String 0x or can leave empty\"\n            onChange={event => this.setState({extraData: event.target.value})}/>\n        </div>\n\n        <button className=\"btn\" onClick={this.signThisCertificate}>Sign this Certificate</button>\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE) {\n      screen = (\n        <>\n        {header}\n        <p>Paste an unsigned or signed certificate in the below box:</p>\n        <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_CSV) {\n      screen = (\n        <>\n        {header}\n          {this.state.certificatesToSign.length === 0\n            ? <>\n          <button className=\"btn\" onClick={() => document.getElementById('csv-input').click()}>Select CSV file</button>\n          <CSVReader\n            inputId=\"csv-input\"\n            onFileLoaded={this.onFileLoaded}\n            style={{display: 'none'}}\n            onError={this.handleDarkSideForce}\n          />\n          </> : <>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Course</th>\n                  <th>Score</th>\n                  <th>Extra Data</th>\n                  <th>Signed Certificate</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.certificatesToSign.map((obj,i) => (\n                <tr key={'sign-'+i}>\n                  <td>{obj.details[0]}</td>\n                  <td>{obj.details[1]}</td>\n                  <td>{obj.details[2]}</td>\n                  <td>{obj.details[3]}</td>\n                  <td>{obj.unsignedCertificate.slice(0,8)}...({(obj.unsignedCertificate.length + obj.signedCertificate.length - 4)/2} bytes)</td>\n                </tr>\n              ))}\n              </tbody>\n            </table>\n\n            <p>Errors: {this.state.errorsInCSV}</p>\n\n            <button className=\"btn\" onClick={async() => {\n              this.setState({ csvSigning: true });\n\n              if(!window.signer) alert('Signer not available, please connect metamask');\n\n              const arrayOfCertificatesSignedPromises = this.state.certificatesToSign.map(async obj => {\n                const signature = await window.signer.signMessage(ethers.utils.arrayify(obj.unsignedCertificate));\n\n                console.log(signature);\n                return {\n                  ...obj,\n                  signedCertificate: ethers.utils.hexlify(ethers.utils.concat([\n                    obj.signedCertificate,\n                    signature\n                  ]))\n                };\n              });\n\n              await Promise.all(arrayOfCertificatesSignedPromises);\n\n              const certificatesSigned = [];\n\n              for(const promise of arrayOfCertificatesSignedPromises) {\n                certificatesSigned.push(await promise);\n              }\n\n              console.log('certificatesSigned',certificatesSigned);\n              this.setState({ certificatesSigned, csvSigning: false });\n            }}>{this.state.csvSigning ? 'Signing' : 'Sign'} {this.state.certificatesToSign.length} certificates{this.state.csvSigning ? '...' : null}</button>\n          </>}\n\n          {this.state.certificatesSigned.length ? <>\n            <button className=\"btn\" onClick={() => {\n              const text = 'Name,Course,Score,ExtraData,SignedCertificate\\n'+this.state.certificatesSigned.map(c => {\n                return [\n                  c.details[0],\n                  c.details[1],\n                  c.details[2],\n                  c.details[3],\n                  c.signedCertificate\n                ].join(',')\n              }).join('\\n');\n\n              const element = document.createElement(\"a\");\n              const file = new Blob([text], {type: 'text/plain'});\n              element.href = URL.createObjectURL(file);\n              element.download = 'signed_certificates.csv' ; //\"keystore.txt\";\n              document.body.appendChild(element); // Required for this to work in FireFox\n              element.click();\n            }}>Download updated CSV</button>\n          </> : null}\n        </>\n      );\n    }\n\n\n    return (\n      <>\n        <Helmet>\n          <title>Sign Certificate</title>\n          <meta\n            name=\"description\"\n            content=\"Sign Certificate which can be submitted to blockchain\"\n          />\n        </Helmet>\n        {!this.state.isAuthorised ? <p className=\"error-message\">Looks like {window.userAddress} is not authorised as a certifying authority, hence the smart contract will not accept certificates signed by this private key.</p> : null}\n\n        {screen}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Navigation from './containers/Navigation/Navigation';\nimport RegisterCertificate from './containers/RegisterCertificate/RegisterCertificate';\nimport ViewCertificate from './containers/ViewCertificate/ViewCertificate';\nimport Hash from './containers/ViewCertificate/Hash/Hash';\nimport AddCertifier from './containers/AddCertifier/AddCertifier';\nimport ListAuthorities from './containers/ListAuthorities/ListAuthorities';\nimport SignCertificate from './containers/SignCertificate/SignCertificate';\nimport './App.css';\n\nimport { network } from './env';\n\nconst history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nwindow.ethers = require('ethers');\nwindow.provider = window.ethers.getDefaultProvider(network);\nwindow._z = require('./functions');\nwindow.certificates = {};\n\nrequire('./ethereum');\n// window.certificateContractInstance = require('./ethereum').certificateContractInstance;\n\nconst App = props => (\n  <Router history={history}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navigation />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact component={() => (\n              <p>\n                Welcome to Certificate UI.\n                <br />\n                {window.ethereum\n                  ? <>Please select an option from above.</>\n                  : <>You will need <a href=\"https://metamask.io/\" rel=\"noopenner noreferrer\">Metamask</a> installed if you want to register your certificate.</>}\n              </p>\n            )} />\n            <Route path=\"/register-certificate\" exact component={RegisterCertificate} />\n            <Route path=\"/view-certificate\" exact component={ViewCertificate} />\n            <Route path=\"/view-certificate/:hash\" exact component={Hash} />\n            <Route path=\"/add-certifier\" exact component={AddCertifier} />\n            <Route path=\"/list-authorities\" exact component={ListAuthorities} />\n            <Route path=\"/sign-certificate\" exact component={SignCertificate} />\n          </Switch>\n        </div>\n      </header>\n    </div>\n  </Router>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}