{"version":3,"sources":["env.js","functions.js","ethereum.js","containers/Navigation/NavigationElement.js","containers/Navigation/Navigation.js","containers/CertificateBox/SignerBox.js","containers/CertificateBox/CertificateBox.js","containers/RegisterCertificate/RegisterCertificate.js","containers/ViewCertificate/ViewCertificate.js","containers/ViewCertificate/Hash/Hash.js","containers/AddCertifier/AddCertifier.js","containers/ListAuthorities/CertifierBox.js","containers/ListAuthorities/ListAuthorities.js","containers/SignCertificate/CSVReader.js","containers/SignCertificate/SignCertificate.js","App.js","serviceWorker.js","index.js"],"names":["env","network","certificateContract","address","abi","require","dataTypes","certOrder","authOrder","managerAddress","TX_STATUS_ENUM","NOT_INITIATED","SIGNING","WAITING_FOR_CONFIRMATION","CONFIRMED","module","exports","ethers","bytesToString","bytes","utils","toUtf8String","split","join","parsePackedAddress","packedAddresses","slice","toLowerCase","length","Error","addressArray","i","push","getDataTypeHexByte","type","index","indexOf","toString","guessDataTypeFromInput","input","String","bytify","hex","Number","numberOfDecimals","decimalByte","Math","round","hexlify","toUtf8Bytes","renderBytes","decimals","isProperValue","undefined","NaN","includes","isFullRLP","certificateHex","RLP","decode","getCertificateHashFromDataRLP","certificateDataRLP","digest","concat","keccak256","encodeCertificateObject","obj","signature","signatureArray","entries","Object","certRLPArray","forEach","property","extraData","filter","datatypeIndex","dataRLP","encode","fullRLP","certificateHash","addSignaturesToCertificateRLP","encodedFullCertificate","certificateData","decoded","decodeCertificateData","encodedCertificate","decodedCertificatePart","parsedCertificate","entry","returnObj","signatures","encodeCertifyingAuthority","rlpArray","decodeCertifyingAuthority","encodedAuthorityData","getCertificateObjFromCertificateHash","a","window","provider","getLogs","fromBlock","toBlock","topics","id","logs","this","setState","displayText","txHashArray","log","txHash","transactionHash","getTransaction","transaction","arg","certificateContractInstance","interface","decodeFunctionData","data","certificateObj","toTitleCase","str","map","str1","toUpperCase","toWebsiteURL","website","setGlobalVariables","networkId","web3","currentProvider","networkVersion","signer","providers","Web3Provider","ethereum","getSigner","Contract","getAddress","then","userAddress","setUpMetamask","enable","setInterval","selectedAddress","error","getDefaultProvider","intervalId","console","clearInterval","withRouter","props","urlFormat","heading","className","location","pathname","style","cursor","onClick","history","state","isManager","showAllItems","displayHideButton","componentDidMount","setManager","functions","manager","navigationGroup","document","querySelector","offsetHeight","render","Component","loading","signerAddress","name","isAuthorised","recoverAddress","certifyingAuthorities","certifyingAuthority","caObj","_z","validCertificate","signerAuthorisedClass","serial","href","rel","target","textDecoration","QRCode","qrDisplay","toCanvas","getElementById","Helmet","content","preview","category","score","subject","keys","key","newStatus","certificateString","textAreaClass","parsingWait","txStatus","timeoutId","onTextAreaChange","event","spacesRemoved","value","setTimeout","clearTimeout","onRegister","registerCertificate","tx","wait","onChange","disabled","HASH_CHECKING_ENUM","NOT_CHECKING","CHECKING","FOUND_VALID","FOUND_INVALID","userEnteredHash","inputError","recentCertificateHashes","hashCheckStatus","item","reverse","onVerifyCertificate","hash","certificates","signers","message","placeholder","class","match","params","errorMessage","statusMessage","onConfirmClick","encoded","addCertifyingAuthority","certifiers","hexZeroPad","hexStripZeros","self","CSVReader","inputId","onFileLoaded","onError","accept","e","reader","FileReader","filename","files","onload","result","readAsText","handleChangeFile","CURRENT_PAGE_ENUM","SELECT_MODE","SIGN_FRESH_CERTIFICATE","SIGN_ENCODED_CERTIFICATE","SIGN_CSV","currentScreen","copied","authorityName","certificatesToSign","errorsInCSV","csvSigning","certificatesSigned","currentAddress","componentWillUnmount","signNewCertificate","signMessage","arrayify","signEncodedCertificate","output","row","columns","isNaN","certObj","signCSV","alert","arrayOfCertificatesSignedPromises","Promise","all","promise","downloadCSV","text","c","element","createElement","file","Blob","URL","createObjectURL","download","body","appendChild","click","screen","header","textAlign","wordBreak","copy","display","handleDarkSideForce","field","j","createBrowserHistory","basename","process","App","src","path","exact","component","RegisterCertificate","ViewCertificate","Hash","AddCertifier","ListAuthorities","SignCertificate","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72349295.chunk.js","sourcesContent":["const certificateStorageJSON = require('./compiledContracts/CertificateStorage_CertificateStorage.json');\n\nconst env = {\n  network: 'kovan',\n  certificateContract: {\n    address: '0x34AEA1D67C5484133BeE0E60aEbB9882a772f64B',\n    abi: certificateStorageJSON.abi\n  },\n  dataTypes: [null, 'bytes', 'number', 'float', 'string', 'boolean', 'image', 'date'],\n  certOrder: ['name', 'subject', 'score', 'category'],\n  authOrder: ['name', 'website'],\n  managerAddress: '0xc8e1f3b9a0cdfcef9ffd2343b943989a22517b26',\n  TX_STATUS_ENUM: {\n    NOT_INITIATED: 0,\n    SIGNING: 1,\n    WAITING_FOR_CONFIRMATION: 2,\n    CONFIRMED: 3\n  },\n};\n\nmodule.exports = env;\n","import { dataTypes, certOrder, authOrder, certificateContract } from './env';\n\nconst ethers = require('ethers');\n\nexport function bytesToString(bytes) {\n  return ethers.utils.toUtf8String(bytes).split('\\u0000').join('');\n}\n\nexport function parsePackedAddress(packedAddresses) {\n  if(packedAddresses.slice(0,2).toLowerCase() === '0x') packedAddresses = packedAddresses.slice(2);\n  if(packedAddresses.length%40 !== 0) throw new Error('Invalid packed addresses');\n  const addressArray = [];\n  for(let i = 0; i < packedAddresses.length/40; i++) {\n    addressArray.push('0x'+packedAddresses.slice(0+40*i,40+40*i));\n  }\n  return addressArray;\n}\n\nexport function getDataTypeHexByte(type) {\n  const index = dataTypes.indexOf(type);\n  if(index === -1) throw new Error('Invalid certificate data type: ' + type);\n  return index.toString(16);\n}\n\nexport function guessDataTypeFromInput(input) {\n  switch(typeof input) {\n    case 'string':\n      if(input.slice(0,2) === '0x') {\n        return 'bytes';\n      }\n      return 'string';\n    case 'number':\n      if(String(input).split('.')[1]) {\n        return 'float';\n      }\n      return 'number';\n    default:\n      return typeof input;\n  }\n}\n\n// remaining for image and data\n// take number or string and convert it into bytes\nexport function bytify(input, type) {\n  switch(type || guessDataTypeFromInput(input)) {\n    case 'bytes':\n      return input;\n    case 'number':\n      let hex = Number(input).toString(16);\n      if(hex.length % 2 !== 0) {\n          hex = '0'+hex;\n      }\n      return '0x' + hex;\n    case 'float':\n      const numberOfDecimals = (String(input).split('.')[1] || '').length;\n      const decimalByte = bytify(numberOfDecimals, 'number').slice(2);\n      if(decimalByte.length !== 2) throw new Error(`Invalid decimal byte: (${decimalByte})`);\n      const numberWithoutDecimals = Math.round(input * 10**numberOfDecimals);\n      const numberBytes = bytify(numberWithoutDecimals, 'number').slice(2);\n      return '0x' + decimalByte + numberBytes;\n    case 'string':\n      return ethers.utils.hexlify(ethers.utils.toUtf8Bytes(input));\n    case 'boolean':\n      return input ? '0x01' : '0x00';\n    default:\n      return null;\n  }\n}\n\nexport function renderBytes(hex, type) {\n  switch(type) {\n    case 'bytes':\n      return hex;\n    case 'number':\n      if(hex === '0x') return null;\n      return +hex;\n    case 'float':\n      if(hex === '0x') return null;\n      const decimals = +('0x'+hex.slice(2,4));\n      const number = +('0x'+hex.slice(4));\n      return number / 10**decimals;\n    case 'string':\n      return bytesToString(hex);\n    case 'boolean':\n      return !!(+hex);\n    default:\n      return hex;\n  }\n}\n\nexport function isProperValue(input) {\n  return ![undefined, null, NaN].includes(input);\n}\n\nexport function isFullRLP(certificateHex) {\n  const decoded = ethers.utils.RLP.decode(certificateHex);\n  return typeof decoded[0] !== 'string';\n}\n\nexport function getCertificateHashFromDataRLP(certificateDataRLP) {\n  const digest = ethers.utils.hexlify(ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'+(certificateDataRLP.length/2 - 1)),certificateDataRLP]));\n  return ethers.utils.keccak256(digest);\n}\n\nexport function encodeCertificateObject(obj, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  const entries = Object.entries(obj);\n  const certRLPArray = [];\n\n  // adding name and subject into rlpArray\n  certOrder.forEach(property => {\n    if(property === 'score') {\n      // adding score into rlpArray\n      if(isProperValue(obj['score'])) {\n        certRLPArray.push(bytify(+obj['score'], 'float'));\n      } else {\n        certRLPArray.push('0x');\n      }\n    } else {\n      const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n      certRLPArray.push(hex);\n    }\n  });\n\n  const extraData = entries.filter(property => !certOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    certRLPArray.push('');\n    const datatypeIndex = certRLPArray.length - 1;\n    extraData.forEach(property => {\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex] + getDataTypeHexByte(guessDataTypeFromInput(property[1]));\n      certRLPArray.push([bytify(property[0]), bytify(property[1])]);\n    });\n\n    if(certRLPArray[datatypeIndex].length % 2) {\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex] + '0';\n    }\n\n    certRLPArray[datatypeIndex] = '0x' + certRLPArray[datatypeIndex];\n  }\n\n  // console.log(certRLPArray);\n  const dataRLP = ethers.utils.RLP.encode(certRLPArray);\n  return {\n    fullRLP: ethers.utils.RLP.encode([certRLPArray, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function addSignaturesToCertificateRLP(encodedFullCertificate, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  let certificateData;\n  // console.log('in addsig',{encodedFullCertificate, signature});\n  if(typeof encodedFullCertificate === 'object') {\n    if(encodedFullCertificate.dataRLP) {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.dataRLP);\n    } else {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.fullRLP)[0];\n    }\n  } else {\n    const decoded = ethers.utils.RLP.decode(encodedFullCertificate);\n    certificateData = isFullRLP(encodedFullCertificate) ? decoded[0] : decoded;\n    if(decoded.length > 1) {\n      signatureArray = [...decoded.slice(1), ...signatureArray];\n    }\n  }\n  // console.log({signatureArray});\n  const dataRLP = ethers.utils.RLP.encode(certificateData);\n\n  return {\n    fullRLP: ethers.utils.RLP.encode([certificateData, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function decodeCertificateData(encodedCertificate) {\n  let fullRLP = typeof encodedCertificate === 'object' ? encodedCertificate.fullRLP : encodedCertificate;\n  const decoded = ethers.utils.RLP.decode(fullRLP);\n  const parsedCertificate = {};\n\n  let decodedCertificatePart, signatureArray;\n  //checking if decoded is of fullRLP or certificate data part\n  if(typeof decoded[0] === 'string') {\n    decodedCertificatePart = decoded;\n  } else {\n    decodedCertificatePart = decoded[0];\n    signatureArray = decoded.slice(1);\n  }\n\n  decodedCertificatePart.forEach((entry, i) => {\n    if(i < certOrder.length) {\n      if(certOrder[i] !== 'score') {\n        parsedCertificate[certOrder[i]] = ethers.utils.toUtf8String(entry);\n      } else {\n        parsedCertificate[certOrder[i]] = renderBytes(entry, 'float');\n      }\n    } else if(i > certOrder.length){\n      const type = dataTypes[+('0x'+decodedCertificatePart[certOrder.length].slice(1+i-certOrder.length, 2+i-certOrder.length))];\n      // console.log({value: entry[1], type});\n      parsedCertificate[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n\n  const returnObj = { parsedCertificate };\n\n  returnObj.certificateHash = getCertificateHashFromDataRLP(ethers.utils.RLP.encode(decodedCertificatePart));\n\n  if(signatureArray) {\n    returnObj.signatures = signatureArray;\n  }\n\n  return returnObj;\n}\n\nexport function encodeCertifyingAuthority(obj) {\n  const entries = Object.entries(obj);\n  const rlpArray = [];\n\n  authOrder.forEach(property => {\n    const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n    rlpArray.push(hex);\n  });\n\n  const extraData = entries.filter(property => !authOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    rlpArray.push('');\n    const datatypeIndex = rlpArray.length - 1;\n    extraData.forEach(property => {\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex] + getDataTypeHexByte(guessDataTypeFromInput(property[1]));\n      rlpArray.push([bytify(property[0]), bytify(property[1])]);\n    });\n\n    if(rlpArray[datatypeIndex].length % 2) {\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex] + '0';\n    }\n\n    rlpArray[datatypeIndex] = '0x' + rlpArray[datatypeIndex];\n  }\n\n  // console.log(rlpArray);\n  return ethers.utils.RLP.encode(rlpArray);\n}\n\nexport function decodeCertifyingAuthority(encodedAuthorityData) {\n  const obj = {};\n  const decoded = ethers.utils.RLP.decode(encodedAuthorityData);\n  decoded.forEach((entry, i) => {\n    if(i < authOrder.length) {\n      obj[authOrder[i]] = ethers.utils.toUtf8String(entry);\n    } else if(i > authOrder.length){\n      const type = dataTypes[+('0x'+decoded[authOrder.length].slice(1+i-authOrder.length, 2+i-authOrder.length))];\n      // console.log({value: entry[1], type});\n      obj[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n  return obj;\n}\n\nexport async function getCertificateObjFromCertificateHash(certificateHash) {\n  const logs = await window.provider.getLogs({\n    address: certificateContract.address,\n    fromBlock: 0,\n    toBlock: 'latest',\n    topics: [ethers.utils.id('Certified(bytes32,address)'), certificateHash]\n  });\n\n  if(!logs.length) this.setState({ displayText: 'Certificate not yet registered or it does not exist' });\n\n  let certificateObj, txHashArray = [];\n\n  for(const log of logs) {\n    const txHash = log.transactionHash;\n    const transaction = await window.provider.getTransaction(txHash);\n    const arg = window.certificateContractInstance.interface.decodeFunctionData('registerCertificate(bytes)',transaction.data)[0];\n\n    const decoded = decodeCertificateData(arg);\n    // console.log({decoded, arg})\n\n    if(!certificateObj) {\n      certificateObj = {\n        fullRLP: arg,\n        ...decoded\n      };\n    } else {\n      // console.log('in else', {certificateObj, certObjExpand: addSignaturesToCertificateRLP(\n      //   certificateObj,\n      //   decoded.signatures\n      // )});\n      certificateObj = {\n        ...certificateObj,\n        ...addSignaturesToCertificateRLP(\n          certificateObj,\n          decoded.signatures\n        ),\n        signatures: decoded.signatures\n      };\n    }\n\n    // console.log({certificateObj});\n    txHashArray.push(txHash);\n  }\n\n  certificateObj.txHashArray = txHashArray;\n\n  return certificateObj;\n}\n\nexport function toTitleCase(str) {\n  return str.split(' ').map(str1 => str1.slice(0,1).toUpperCase()+str1.slice(1)).join(' ');\n}\n\nexport function toWebsiteURL(website) {\n  if(website.slice(0,4) !== 'http') {\n    website = 'http://' + website;\n  }\n  return website;\n}\n","const ethers = require('ethers');\nconst { certificateContract, network } = require('./env');\n\nconst setGlobalVariables = () => {\n  // console.log(window.web3.currentProvider);\n\n  window.networkId = window.web3.currentProvider.networkVersion;\n  // === (network === 'homestead' ? '1' : '42');\n\n  window.signer = (new ethers.providers.Web3Provider(window.ethereum)).getSigner();\n\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    window.signer\n  );\n\n  window.signer.getAddress().then(address => window.userAddress = address);\n\n  // window.userAddress = signer;//.then(address => window.userAddress = address);\n}\n\nconst setUpMetamask = () => {\n  try {\n    window.ethereum.enable().then(setGlobalVariables);\n\n    setInterval(() => {\n      if(window.web3 && window.web3.currentProvider && window.web3.currentProvider.selectedAddress && window.userAddress && window.web3.currentProvider.selectedAddress.toLowerCase() !== window.userAddress.toLowerCase()) {\n        setGlobalVariables();\n      }\n    },100);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nif(window.ethereum) {\n  setUpMetamask();\n} else {\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    ethers.getDefaultProvider(network)\n  );\n\n  const intervalId = setInterval(() => {\n    if(setUpMetamask()) {\n      console.log('Metamask setup done!');\n      clearInterval(intervalId);\n    }\n  }, 100);\n}\n\n\n// export { networkId, certificateContractInstance };\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NavigationElement = props => {\n  const urlFormat = props.heading.toLowerCase().split(' ').join('-');\n\n  return (\n    <button className={`navigation-element${props.location.pathname === `/${urlFormat}` ? ' active' : ''}`} style={{cursor: 'pointer'}} onClick={() => props.history.push(`/${urlFormat}`)}>{props.heading}</button>\n  );\n};\n\nexport default withRouter(NavigationElement);\n","import React, { Component } from 'react';\nimport NavigationElement from './NavigationElement';\nimport './Navigation.css';\nimport { managerAddress } from '../../env';\n\nexport default class extends Component {\n  state = {\n    isManager: false,\n    showAllItems: true,\n    displayHideButton: false,\n    managerAddress: null\n  };\n\n  componentDidMount = () => {\n    const setManager = async() => {\n      if(window.certificateContractInstance) {\n        const managerAddress = await window.certificateContractInstance.functions.manager();\n        this.state.managerAddress = managerAddress;\n        return true;\n      }\n      return false;\n    }\n\n    const intervalId = setInterval(async() => {\n      if(await setManager()) {\n        // console.log('setManager cleared');\n        clearInterval(intervalId);\n      }\n    }, 100);\n\n    setInterval(() => {\n      const isManager = !!window.web3 && !!window.web3.currentProvider && !!this.state.managerAddress && this.state.managerAddress.toLowerCase() === window.web3.currentProvider.selectedAddress.toLowerCase();\n      if(isManager !== this.state.isManager) {\n        this.setState({ isManager });\n      }\n\n      const navigationGroup = document.querySelector('.navigation-group');\n      if(navigationGroup) {\n        if(navigationGroup.offsetHeight > 56) {\n          this.setState({ displayHideButton: true });\n        } else {\n          this.setState({ displayHideButton: !this.state.showAllItems });\n        }\n      }\n    }, 100);\n  };\n\n  render = () => (\n    <div className=\"navigation-group\">\n      {this.state.showAllItems ? <>\n        <NavigationElement heading=\"Register Certificate\" />\n        <NavigationElement heading=\"View Certificate\" />\n        {this.state.isManager ? <NavigationElement heading=\"Add Certifier\" /> : null}\n        <NavigationElement heading=\"List Authorities\" />\n        <NavigationElement heading=\"Sign Certificate\" />\n      </> : null}\n      {this.state.displayHideButton ? <button\n        className=\"navigation-element\"\n        style={{cursor: 'pointer'}}\n        onClick={() => this.setState({ showAllItems: !this.state.showAllItems })}\n      >\n        {this.state.showAllItems\n          ? <>Hide Menu Items</>\n          : <>Show Menu Items</>}\n      </button> : null}\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport './CertificateBox.css';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    loading: true,\n    signerAddress: null,\n    name: null,\n    website: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    const signerAddress = ethers.utils.recoverAddress(this.props.certificateHash, this.props.signature);\n    this.setState({ signerAddress });\n    // console.log({signer});\n    const certifyingAuthority = await window.certificateContractInstance.certifyingAuthorities(signerAddress);\n    // console.log('certifyingAuthority', certifyingAuthority);\n\n    let caObj;\n    if(certifyingAuthority.data !== '0x') {\n      caObj = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n    } else {\n      caObj = { name: null, website: null };\n    }\n\n    this.setState({\n      name: caObj.name,\n      website: caObj.website ? window._z.toWebsiteURL(caObj.website) : null,\n      isAuthorised: certifyingAuthority.isAuthorised,\n      loading: false\n    });\n\n    console.log('found', certifyingAuthority.isAuthorised);\n    // if(this.props.validCertificate[0] !== false) {\n    //   console.log('i marked it', certifyingAuthority.isAuthorised);\n    //   this.props.validCertificate[1](certifyingAuthority.isAuthorised);\n    // }\n    if(certifyingAuthority.isAuthorised) {\n      this.props.validCertificate[1]((this.props.validCertificate[0] || 0)+1);\n    }\n  };\n\n  render = () => {\n    let signerAuthorisedClass;\n    if(this.state.loading) {\n      signerAuthorisedClass = 'loading';\n    } else if(this.state.isAuthorised) {\n      signerAuthorisedClass = 'valid';\n    } else {\n      signerAuthorisedClass = 'invalid';\n    }\n\n    return (\n      <div className={['signer-box', signerAuthorisedClass].filter(className=>!!className).join(' ')}>\n        <p>Signer {this.props.serial}: {this.state.name ? <>{this.state.name}{this.state.website ? <a href={this.state.website} rel=\"noopenner noreferrer\" target=\"_blank\" style={{textDecoration: 'none'}}>↗️</a> : null} ({this.state.signerAddress.slice(0,6)}...{this.state.signerAddress.slice(38)})</> : (this.state.signerAddress ? <>{this.state.signerAddress}</> : <>Computing address...</>)}</p>\n        <p>Signature: {this.props.signature.slice(0,10)}...{this.props.signature.slice(122)}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport SignerBox from './SignerBox';\nimport './CertificateBox.css';\nimport { network, certOrder } from '../../env';\n\nconst QRCode = require('qrcode');\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    validCertificate: (this.props.validCertificate&&this.props.validCertificate[0]) || null\n  };\n\n  componentDidMount = () => {\n    setInterval(() => {\n      if(this.props.validCertificate && this.state.validCertificate !== this.props.validCertificate[0]) {\n        this.setState({ validCertificate: this.props.validCertificate[0] });\n      }\n    }, 100);\n    if(this.props.qrDisplay) QRCode.toCanvas(document.getElementById('qrcode-canvas'), window.location.href);\n  }\n\n  render = () => (\n    <div className=\"certificate-box\" id=\"printable\">\n      <Helmet>\n        <title>{this.props.certificateObj.parsedCertificate.name} is certified on Blockchain</title>\n        <meta\n          name=\"description\"\n          content=\"View certifications on blockchain\"\n        />\n      </Helmet>\n      <div className=\"certificate-container\">\n        {this.props.preview ? <p className=\"preview\">Note: This is only a preview of the certificate, please register the certificate.</p> : null}\n        <p className=\"category\">Certificate of <span className=\"category\">{this.props.certificateObj.parsedCertificate.category}</span></p>\n        <p className=\"category-subtext\">is awarded to</p>\n        <p className=\"name\">{this.props.certificateObj.parsedCertificate.name}</p>\n        <p>For acheiving <span className=\"score\">{this.props.certificateObj.parsedCertificate.score}%</span> {this.props.certificateObj.parsedCertificate.category} in <span className=\"subject\">{this.props.certificateObj.parsedCertificate.subject}</span></p>\n\n        {Object.keys(this.props.certificateObj.parsedCertificate).filter(key => !certOrder.includes(key)).map(key => (\n          <p key={'cert-'+key} className={key}>{this.props.certificateObj.parsedCertificate[key]}</p>\n        ))}\n\n\n        <p>{this.state.validCertificate === this.props.certificateObj.signatures.length\n          ? <>The above certificate information is signed by following {this.state.validCertificate} signer{this.state.validCertificate > 1 ? <>s</>:null} which is cryptographically verified by the certificate smart contract.</>\n          : (\n            0 < this.state.validCertificate\n            && this.state.validCertificate < this.props.certificateObj.signatures.length\n            ? <>Seems that this certificate is signed by only {this.state.validCertificate} valid signers out of {this.props.certificateObj.signatures.length} total signers, you can remove signatures of unauthorised signers.</>\n            : <>Seems that this certificate is not signed by any authorised signers.</>\n          )}</p>\n\n        {this.props.certificateObj.signatures.length\n        ? <>\n          {this.props.certificateObj.signatures.map((signature, i) => (\n            <SignerBox\n              key={'signer-'+i}\n              serial={i+1}\n              certificateHash={this.props.certificateObj.certificateHash}\n              signature={signature}\n              validCertificate={this.props.validCertificate || [this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n              />\n          ))}\n        </>\n        : null}\n\n        {(() => {\n          let content = (\n            <>\n            <p className=\"hash\">Certificate Hash: {this.props.certificateObj.certificateHash}</p>\n            {this.props.certificateObj.txHashArray ? <p>Created at transaction{this.props.certificateObj.txHashArray.length > 1 ? <>s</> : null}\n            {this.props.certificateObj.txHashArray.map(txHash => (\n              <span key={'txHash-'+txHash}><br />\n                {txHash.slice(0,6)}...{txHash.slice(62)}. <a className=\"link-black\" target=\"_blank\" rel=\"noopenner noreferrer\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/tx/${txHash}`}>View on EtherScan</a></span>\n            ))}\n            </p> : null}\n              </>\n          );\n\n          if(this.props.qrDisplay) {\n            content = (\n              <div className=\"row\">\n                <div className=\"column1\">\n                  {content}\n                </div>\n                <div className=\"column2\">\n                  <div className=\"qrcode-canvas-container\">\n                  <canvas id=\"qrcode-canvas\" />\n                  </div>\n                </div>\n              </div>\n            );\n          }\n\n          return content;\n        })()}\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport { TX_STATUS_ENUM } from '../../env';\n\nexport default class extends Component {\n  state = {\n    certificateString: '',\n    textAreaClass: null,\n    parsingWait: false,\n    certificateObj: null,\n    validCertificate: null,\n    txStatus: TX_STATUS_ENUM.NOT_INITIATED\n  };\n\n  timeoutId = null;\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  }\n\n  onRegister = async() => {\n    this.setState({ txStatus: TX_STATUS_ENUM.SIGNING });\n    const tx = await window.certificateContractInstance.functions.registerCertificate(this.state.certificateString);\n    this.setState({ txStatus: TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION });\n    await tx.wait();\n    this.setState({ txStatus: TX_STATUS_ENUM.CONFIRMED });\n    setTimeout(() => {\n      this.props.history.push(`view-certificate/${this.state.certificateObj.certificateHash}`);\n    },1000);\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>Register Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"Register your certificate on Blockchain\"\n        />\n      </Helmet>\n      <p>Paste your signed certificate in the below box:</p>\n      <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n      <br />\n      {this.state.parsingWait\n        ? <p>Please wait parsing your certificate...</p>\n        : null}\n\n      {this.state.certificateObj\n        ? <>\n          <p>Your certificate preview:</p>\n          <CertificateBox\n            certificateObj={this.state.certificateObj}\n            qrDisplay={false}\n            validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            preview={true}\n            />\n        </>\n        : null}\n\n      {this.state.validCertificate\n        ? <>\n\n        </>\n        : <></>}\n\n        <button\n          className=\"btn\"\n          disabled={this.state.txStatus !== TX_STATUS_ENUM.NOT_INITIATED || this.state.validCertificate !== (this.state.certificateObj && this.state.certificateObj.signatures.length)}\n          onClick={this.onRegister}\n        >\n          {(() => {\n            switch(this.state.txStatus) {\n              case TX_STATUS_ENUM.NOT_INITIATED:\n                return 'Register Certificate';\n              case TX_STATUS_ENUM.SIGNING:\n                return 'Signing transaction..';\n              case TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION:\n                return 'Waiting for confirmation...';\n              case TX_STATUS_ENUM.CONFIRMED:\n                return 'Certificate is registered!';\n            }\n          })()}\n        </button>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst HASH_CHECKING_ENUM = {\n  NOT_CHECKING: 0,\n  CHECKING: 1,\n  FOUND_VALID: 2,\n  FOUND_INVALID: 3\n};\n\nexport default class extends Component {\n  state = {\n    userEnteredHash: '',\n    inputError: false,\n    recentCertificateHashes: [],\n    displayText: '',\n    hashCheckStatus: 0\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)')]\n    });\n\n    console.log(logs);\n\n    this.setState({\n      recentCertificateHashes: logs.map(log => log.topics[1]).filter((item, i, a) => a.indexOf(item) === i).reverse().slice(0,3)\n    });\n\n  };\n\n  onVerifyCertificate = async() => {\n    this.setState({ inputError: false, hashCheckStatus: HASH_CHECKING_ENUM.CHECKING });\n    try {\n      const hash = ethers.utils.hexlify(this.state.userEnteredHash.split(' ').join('').split('\\n').join(''));\n\n      if(hash.length !== 66) throw new Error('invalid hash length');\n\n      const certificateStruct = await window.certificateContractInstance.functions.certificates(hash);\n\n      // window.certificates[hash] = window._z.decodeCertificateData(certificateObj.data);\n\n      if(certificateStruct.signers === '0x') throw new Error('Certificate not yet registered or it does not exist');\n\n      this.setState({ hashCheckStatus: HASH_CHECKING_ENUM.FOUND_VALID });\n\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${hash}`);\n      }, 400);\n    } catch(error) {\n      this.setState({ inputError: true, displayText: error.message });\n    }\n\n  };\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>View Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"View certificates on Blockchain\"\n        />\n      </Helmet>\n      <input\n        className={`certificate-textinput${this.state.inputError ? ' invalid' : ''}`}\n        type=\"text\"\n        placeholder=\"Enter Certificate Hash\"\n        onChange={event => this.setState({ userEnteredHash: event.target.value, inputError: false })}\n        />\n      {this.state.displayText ? <p class={this.state.inputError ? 'error-message' : 'status-message'}>{this.state.displayText}</p> : null}\n      <button className=\"btn\" disabled={this.state.hashCheckStatus !== 0} onClick={this.onVerifyCertificate}>{(() => {\n        switch(this.state.hashCheckStatus) {\n          case HASH_CHECKING_ENUM.CHECKING:\n            return 'Checking hash...';\n          case HASH_CHECKING_ENUM.FOUND_VALID:\n            return 'Accessing certificate fields...';\n          default:\n            return 'Verify Certificate';\n        }\n      })()}</button>\n\n      {this.state.recentCertificateHashes.length\n        ? <div className=\"form-group\">\n        <p>Recent certificates issued...</p>\n        {this.state.recentCertificateHashes.map((hash,i) => (\n          <p key={`recent-certificates-${hash}`}>{hash}</p>\n        ))}\n      </div> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../../env';\nimport CertificateBox from '../../CertificateBox/CertificateBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    displayText: 'Please wait...',\n    loading: true,\n    certificateObj: null\n  };\n\n  componentDidMount = async() => {\n    const certificateObj = await window._z.getCertificateObjFromCertificateHash(this.props.match.params.hash);\n\n    this.setState({ loading: false, displayText: '', certificateObj})\n  }\n  render = () => (\n    <>\n      {this.state.displayText ? <p>{this.state.displayText}</p> : null}\n      {!this.state.loading && this.state.certificateObj ? <CertificateBox\n        certificateObj={this.state.certificateObj}\n        qrDisplay={true}\n      /> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    address: '',\n    name: '',\n    website: '',\n    errorMessage: '',\n    statusMessage: ''\n  };\n\n  onConfirmClick = async() => {\n    this.setState({ errorMessage: '', statusMessage: '' })\n    try {\n      const address = ethers.utils.getAddress(this.state.address);\n      const encoded = window._z.encodeCertifyingAuthority({\n        name: this.state.name,\n        website: this.state.website\n      });\n\n      const tx = await window.certificateContractInstance.functions.addCertifyingAuthority(\n        address, encoded\n      );\n\n      this.setState({\n        statusMessage: 'Tx sent waiting for confirmation...',\n        errorMessage: ''\n      });\n\n      await tx.wait();\n\n      this.setState({ statusMessage: 'Certifier is Added!', errorMessage: '' })\n    } catch(error) {\n      this.setState({ errorMessage: error.message, statusMessage: '' })\n    }\n  }\n\n  render = () => (\n    <div>\n      <Helmet>\n        <title>Add Certifier</title>\n        <meta\n          name=\"description\"\n          content=\"Add Certification Authority to certify.\"\n        />\n      </Helmet>\n      <div className=\"form-group\">\n        <p>Enter Address of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Address\"\n          onChange={event => this.setState({address: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Name of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Name\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Website of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Certifier Website\"\n          onChange={event => this.setState({website: event.target.value})}/>\n      </div>\n\n      {this.state.errorMessage ? <p className=\"error-message\">Error: {this.state.errorMessage}</p> : null}\n\n      {this.state.statusMessage ? <p className=\"status-message\">Status: {this.state.statusMessage}</p> : null}\n\n      <button className=\"btn\" onClick={this.onConfirmClick}>Confirm New Certifier</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  state = {\n    data: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(this.props.address);\n      // console.log(certifyingAuthority);\n      const data = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n      this.setState({ data, isAuthorised: certifyingAuthority.isAuthorised });\n    } catch (error) {\n      console.error(error);\n      this.setState({ name: 'Failed to load name...' });\n    }\n  }\n\n  render = () => (\n    <>\n      <div className=\"form-group\">\n        {this.state.data ? <>\n          {Object.entries(this.state.data).map((entry, i) => (\n            <p key={'ca-property-'+i}>{window._z.toTitleCase(entry[0])}: {entry[0] === 'website' ? <a className=\"link\" href={window._z.toWebsiteURL(entry[1])} rel=\"noopenner noreferrer\" target=\"_blank\">{entry[1]}</a> : <>{entry[1]}</>}</p>\n          ))}\n        </> : <>Loading...</>}\n        <p>Signing Address: {this.props.address}</p>\n        <p>Is Authorized: {this.state.isAuthorised === null ? 'Loading...' : (\n          this.state.isAuthorised ? 'Yes' : 'No'\n        )}</p>\n      </div>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\nimport CertifierBox from './CertifierBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    certifiers: [],\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Authorization(address,bool)')]\n    });\n    // console.log(logs);\n    this.setState({\n      certifiers: logs.map(log => ethers.utils.hexZeroPad(ethers.utils.hexStripZeros(log.topics[1]), 20)).filter((address, i, self) => self.indexOf(address) === i),\n      loading: false\n    });\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>List of Certification Authorities</title>\n        <meta\n          name=\"description\"\n          content=\"See all certification authorities\"\n        />\n      </Helmet>\n      {this.state.loading\n        ? <>Please wait loading certifying authorities...</>\n        : <>\n          {this.state.certifiers.length ? <>{this.state.certifiers.map((address,i) => (\n            <CertifierBox key={`certifier-${address}${i}`} address={address} />\n          ))}</> : <>No certifying authorities currently.</>}\n        </>}\n    </>\n  );\n}\n","import React from 'react';\n\nconst CSVReader = ({\n  inputId,\n  style,\n  onFileLoaded,\n  onError\n}) => {\n  let fileContent = undefined;\n\n  const handleChangeFile = e => {\n    try {\n      let reader = new FileReader();\n      const filename = e.target.files[0].name;\n\n      reader.onload = event => {\n        // const csvData = PapaParse.parse(\n        //   ,\n        //   Object.assign(parserOptions, {\n        //     error: onError\n        //   })\n        // );\n        onFileLoaded(event.target.result, filename);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id={inputId}\n        style={style}\n        accept=\".csv, text/csv\"\n        onChange={e => handleChangeFile(e)}\n      />\n    </div>\n  );\n};\n\nexport default CSVReader;\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certOrder } from '../../env';\nimport CSVReader from './CSVReader';\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport copy from 'copy-to-clipboard';\n\nconst ethers = require('ethers');\n\nconst CURRENT_PAGE_ENUM = {\n  SELECT_MODE: 0,\n  SIGN_FRESH_CERTIFICATE: 1,\n  SIGN_ENCODED_CERTIFICATE: 2,\n  SIGN_CSV: 3\n};\n\nexport default class extends Component {\n  state = {\n    currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE,\n    name: '',\n    subject: '',\n    score: '',\n    category: '',\n    errorMessage: '',\n    certificateHex: null,\n    copied: false,\n    authorityName: '',\n    isAuthorised: true,\n    certificatesToSign: [],\n    errorsInCSV: '',\n    csvSigning: false,\n    certificatesSigned: []\n  };\n\n  intervalId = null;\n  signerAddress = null;\n\n  componentDidMount = () => {\n    this.intervalId = setInterval(async() => {\n      if(window.signer) {\n        const currentAddress = await window.signer.getAddress();\n        if(currentAddress !== this.signerAddress) {\n          try {\n            const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(currentAddress);\n\n            if(certifyingAuthority.isAuthorised) {\n              const authorityName = window._z.decodeCertifyingAuthority(certifyingAuthority.data).name;\n\n              this.setState({ authorityName, isAuthorised: true });\n            } else {\n              this.setState({ authorityName: null, isAuthorised: false });\n            }\n\n\n          } catch(error) {\n            console.error(error);\n          }\n          this.signerAddress = currentAddress;\n        }\n      }\n    }, 100);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  }\n\n  signNewCertificate = async() => {\n    this.setState({ errorMessage: '' });\n    try {\n      let encodedCertificate = window._z.encodeCertificateObject({\n        name: this.state.name,\n        subject: this.state.subject,\n        score: this.state.score,\n        category: this.state.category\n      });\n\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(encodedCertificate.dataRLP));\n\n      encodedCertificate = window._z.addSignaturesToCertificateRLP(encodedCertificate, signature);\n\n      this.setState({\n        certificateHex: encodedCertificate.fullRLP\n      });\n\n      // console.log('signed',ethers.utils.hexlify(signedCertificateConcat));\n    } catch (error) {\n      console.error(error.message);\n      this.setState({ errorMessage: error.message })\n    }\n  };\n\n  signEncodedCertificate = async() => {\n    const encoded = window._z.encodeCertificateObject(this.state.certificateObj.parsedCertificate);\n\n    const signature = await window.signer.signMessage(ethers.utils.arrayify(encoded.dataRLP));\n\n    const certificateHex = window._z.addSignaturesToCertificateRLP(this.state.certificateString, signature).fullRLP;\n    this.setState({ certificateHex });\n  }\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  };\n\n  onFileLoaded = output => {\n    let errorsInCSV = '';\n    // csv rows: hex, name, subject, score, category\n    let keys = ['hex', ...certOrder];\n    const certificatesToSign = output.split('\\n').map((row, i) => {\n      const columns = row.split(',');\n      if(i === 0 && columns[0] === 'hex') {\n        keys = columns;\n        return;\n      }\n      try {\n        if(columns.length < 1) throw new Error('Not even 1 entry');\n        if(isNaN(+columns[3])) throw new Error(`Invalid score: ${columns[3]}`);\n        const certObj = {};\n        keys.forEach((key, i) => {\n          if(i !== 0) {\n            certObj[key] = columns[i];\n          }\n        });\n        const encodedCertificate = window._z.encodeCertificateObject(certObj);\n        // encodedCertificate.columns = columns;\n        return {encodedCertificate, columns};\n      } catch (error) {\n        errorsInCSV += `Error at row ${i+1}: ${error.message}\\n`;\n      }\n    }).filter(entry => !!entry);\n    console.log({certificatesToSign}, errorsInCSV);\n    this.setState({ certificatesToSign, errorsInCSV });\n  }\n\n  signCSV = async() => {\n    this.setState({ csvSigning: true });\n\n    if(!window.signer) return alert('Signer not available, please connect metamask');\n\n    const arrayOfCertificatesSignedPromises = this.state.certificatesToSign.map(async obj => {\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(obj.encodedCertificate.dataRLP));\n\n      const columns = [...obj.columns];\n      columns[0] = window._z.addSignaturesToCertificateRLP(columns[0] || obj.encodedCertificate.fullRLP, signature).fullRLP;\n\n      // console.log({signature, });\n\n      console.log(signature);\n      return {\n        ...obj,\n        columns\n      };\n    });\n\n    await Promise.all(arrayOfCertificatesSignedPromises);\n\n    const certificatesSigned = [];\n\n    for(const promise of arrayOfCertificatesSignedPromises) {\n      certificatesSigned.push(await promise);\n    }\n\n    console.log('certificatesSigned',certificatesSigned);\n    this.setState({ certificatesSigned, csvSigning: false });\n  };\n\n  downloadCSV = () => {\n    const keys = ['hex', ...certOrder];\n    const text = keys.join(',')+'\\n'+this.state.certificatesSigned.map(c => {\n      return [\n        ...c.columns,\n      ].join(',')\n    }).join('\\n');\n\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = 'signed_certificates.csv' ;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  render = () => {\n    let screen;\n\n    const header = (\n      <p style={{textAlign: ''}}><button className=\"btn\" onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE })}>Go Back to Select Mode</button></p>\n    );\n\n    if(this.state.currentScreen === CURRENT_PAGE_ENUM.SELECT_MODE) {\n      screen = (\n        <>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE })}\n          >New Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE })}\n          >Sign Encoded Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_CSV })}\n          >CSV Mode</button>\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <div className=\"form-group\">\n          <p>Enter Name:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Certifiee Name\"\n            onChange={event => this.setState({name: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Subject:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Subject / Course Name\"\n            onChange={event => this.setState({subject: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Score:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"E.g. 74.89\"\n            onChange={event => this.setState({score: event.target.value})}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Certification Type / Category:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"e.g. Participation / Merit / Appreciation\"\n            onChange={event => this.setState({category: event.target.value})}/>\n        </div>\n\n        {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n\n        <button className=\"btn\" onClick={this.signNewCertificate}>Sign this Certificate</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <p>Paste an unsigned or signed certificate in the below box:</p>\n        <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n        {this.state.certificateObj\n          ? <>\n            <p>Your certificate preview:</p>\n            <CertificateBox\n              certificateObj={this.state.certificateObj}\n              qrDisplay={false}\n              validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n              />\n          </>\n          : null}\n          <button className=\"btn\" onClick={this.signEncodedCertificate}>Sign this Certificate with your private key</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_CSV) {\n      screen = (\n        <>\n        {header}\n          {this.state.certificatesToSign.length === 0\n            ? <>\n          <button className=\"btn\" onClick={() => document.getElementById('csv-input').click()}>Select CSV file</button>\n          <CSVReader\n            inputId=\"csv-input\"\n            onFileLoaded={this.onFileLoaded}\n            style={{display: 'none'}}\n            onError={this.handleDarkSideForce}\n          />\n          </> : <>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Course</th>\n                  <th>Score</th>\n                  <th>Extra Data</th>\n                  <th>Signed Certificate</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.certificatesToSign.map((obj,i) => (\n                <tr key={'sign-'+i}>\n                  {obj.columns.map((field, j) => (\n                    <td key={'sign-field-'+j}>\n                      {field.length > 32\n                        ? (field.slice(0,2) === '0x'\n                          ? <>{field.slice(0,6)}...{field.slice(field.length - 4, field.length)} ({field.length/2} Bytes)</>\n                          : <>{field.slice(0,10)}... ({field.length} chars)</>\n                        )\n                        : <>{field}</>}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n              </tbody>\n            </table>\n\n            <p>Errors: {this.state.errorsInCSV}</p>\n\n            <button className=\"btn\" onClick={this.signCSV}>{this.state.csvSigning ? 'Signing' : 'Sign'} {this.state.certificatesToSign.length} certificates{this.state.csvSigning ? '...' : null}</button>\n          </>}\n\n          {this.state.certificatesSigned.length ? <>\n            <button className=\"btn\" onClick={this.downloadCSV}>Download updated CSV</button>\n          </> : null}\n        </>\n      );\n    }\n\n\n    return (\n      <>\n        <Helmet>\n          <title>Sign Certificate</title>\n          <meta\n            name=\"description\"\n            content=\"Sign Certificate which can be submitted to blockchain\"\n          />\n        </Helmet>\n        {this.state.isAuthorised\n          ? <p className=\"status-message\">Welcome {this.state.authorityName}! Using this portal you can sign certificates on your half and send the generated certificate hex strings to your students/clients so they can register those certificates.</p>\n          : <p className=\"error-message\">Looks like {window.userAddress} is not authorised as a certifying authority, hence the smart contract will not accept certificates signed by this private key.</p>}\n\n        {screen}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Navigation from './containers/Navigation/Navigation';\nimport RegisterCertificate from './containers/RegisterCertificate/RegisterCertificate';\nimport ViewCertificate from './containers/ViewCertificate/ViewCertificate';\nimport Hash from './containers/ViewCertificate/Hash/Hash';\nimport AddCertifier from './containers/AddCertifier/AddCertifier';\nimport ListAuthorities from './containers/ListAuthorities/ListAuthorities';\nimport SignCertificate from './containers/SignCertificate/SignCertificate';\nimport './App.css';\n\nimport { network } from './env';\n\nconst history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nwindow.ethers = require('ethers');\nwindow.provider = window.ethers.getDefaultProvider(network);\nwindow._z = require('./functions');\nwindow.certificates = {};\n\nrequire('./ethereum');\n// window.certificateContractInstance = require('./ethereum').certificateContractInstance;\n\nconst App = props => (\n  <Router history={history}>\n    <div className=\"App\">\n      <img className=\"background-lines top\" src='/cert-background-lines.png' />\n      <img className=\"background-lines bottom\" src='/cert-background-lines2.png' />\n      <header className=\"App-header\">\n        <Navigation />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact component={() => (\n              <p>\n                Welcome to Blocks On Academics.\n                <br />\n                {window.ethereum\n                  ? <>Please select an option from above.</>\n                  : <>You will need <a href=\"https://metamask.io/\" rel=\"noopenner noreferrer\">Metamask</a> installed if you want to register your certificate.</>}\n              </p>\n            )} />\n            <Route path=\"/register-certificate\" exact component={RegisterCertificate} />\n            <Route path=\"/view-certificate\" exact component={ViewCertificate} />\n            <Route path=\"/view-certificate/:hash\" exact component={Hash} />\n            <Route path=\"/add-certifier\" exact component={AddCertifier} />\n            <Route path=\"/list-authorities\" exact component={ListAuthorities} />\n            <Route path=\"/sign-certificate\" exact component={SignCertificate} />\n          </Switch>\n        </div>\n      </header>\n    </div>\n  </Router>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}