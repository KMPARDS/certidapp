{"version":3,"sources":["env.js","functions.js","ethereum.js","containers/Navigation/NavigationElement.js","containers/Navigation/Navigation.js","containers/CertificateBox/SignerBox.js","containers/CertificateBox/CertificateBox.js","containers/RegisterCertificate/RegisterCertificate.js","containers/ViewCertificate/ViewCertificate.js","containers/ViewCertificate/Hash/Hash.js","containers/AddCertifier/AddCertifier.js","containers/ListAuthorities/CertifierBox.js","containers/ListAuthorities/ListAuthorities.js","containers/SignCertificate/CSVReader.js","containers/DatePicker/DatePicker.js","containers/SignCertificate/SignCertificate.js","App.js","serviceWorker.js","index.js"],"names":["env","network","certificateContract","address","abi","require","dataTypes","certOrder","authOrder","extraDataTypes","image","file","url","date1","date2","location","datetime1","datetime2","comments","extraDataKeysExample","dataTypesExample","base58","date","datetime","managerAddress","TX_STATUS_ENUM","NOT_INITIATED","SIGNING","WAITING_FOR_CONFIRMATION","CONFIRMED","module","exports","ethers","bs58","bytesToString","bytes","utils","toUtf8String","split","join","parsePackedAddress","packedAddresses","slice","toLowerCase","length","Error","addressArray","i","push","getDataTypeHexByte","type","index","indexOf","toString","guessDataTypeFromInput","input","String","bytify","hex","Number","numberOfDecimals","decimalByte","Math","round","hexlify","toUtf8Bytes","decode","isNaN","Date","dateStr","getDate","monthStr","getMonth","yearStr","getFullYear","getTime","renderBytes","decimals","encode","Buffer","from","toLocaleString","isProperValue","undefined","NaN","includes","isFullRLP","certificateHex","RLP","getCertificateHashFromDataRLP","certificateDataRLP","digest","concat","keccak256","encodeCertificateObject","obj","signature","signatureArray","entries","Object","certRLPArray","forEach","property","extraData","filter","datatypeIndex","dataType","dataRLP","fullRLP","certificateHash","addSignaturesToCertificateRLP","encodedFullCertificate","certificateData","decoded","decodeCertificateData","encodedCertificate","decodedCertificatePart","parsedCertificate","entry","returnObj","signatures","encodeCertifyingAuthority","rlpArray","decodeCertifyingAuthority","encodedAuthorityData","getCertificateObjFromCertificateHash","a","window","provider","getLogs","fromBlock","toBlock","topics","id","logs","this","setState","displayText","txHashArray","log","txHash","transactionHash","getTransaction","transaction","arg","certificateContractInstance","interface","decodeFunctionData","data","certificateObj","toTitleCase","str","map","str1","toUpperCase","toWebsiteURL","website","setGlobalVariables","networkId","web3","currentProvider","networkVersion","signer","providers","Web3Provider","ethereum","getSigner","Contract","getAddress","then","userAddress","getDefaultProvider","intervalId","setInterval","enable","selectedAddress","error","setUpMetamask","console","clearInterval","withRouter","props","urlFormat","heading","className","pathname","style","cursor","onClick","history","state","isManager","showAllItems","displayHideButton","componentDidMount","setManager","functions","manager","navigationGroup","document","querySelector","offsetHeight","render","Component","loading","signerAddress","name","isAuthorised","recoverAddress","certifyingAuthorities","certifyingAuthority","caObj","_z","validCertificate","signerAuthorisedClass","signerElement","serial","href","rel","target","textDecoration","display","height","src","width","textAlign","marginLeft","QRCode","isAlreadyRegistered","qrDisplay","toCanvas","getElementById","certificates","certificate","signers","pc","Helmet","content","preview","category","score","subject","DateEl","children","keys","key","newStatus","certificateString","textAreaClass","parsingWait","txStatus","errorMessage","timeoutId","onTextAreaChange","event","spacesRemoved","value","setTimeout","clearTimeout","onRegister","registerCertificate","tx","wait","message","onChange","disabled","HASH_CHECKING_ENUM","NOT_CHECKING","CHECKING","FOUND_VALID","FOUND_INVALID","userEnteredHash","inputError","recentCertificateHashes","hashCheckStatus","item","reverse","onVerifyCertificate","hash","placeholder","class","match","params","statusMessage","onConfirmClick","encoded","addCertifyingAuthority","maxHeight","maxWidth","certifierElement","certifiers","hexZeroPad","hexStripZeros","self","CSVReader","inputId","onFileLoaded","onError","accept","e","reader","FileReader","filename","files","onload","result","readAsText","handleChangeFile","MONTH","1","days","2","3","4","5","6","7","8","9","10","11","12","month","year","updateState","d","selected","Array","CURRENT_PAGE_ENUM","SELECT_MODE","SIGN_FRESH_CERTIFICATE","SIGN_ENCODED_CERTIFICATE","SIGN_CSV","currentScreen","copied","authorityName","certificatesToSign","errorsInCSV","csvSigning","certificatesSigned","currentAddress","componentWillUnmount","onNewFieldUpdate","fromEntries","signNewCertificate","signMessage","arrayify","signEncodedCertificate","output","row","columns","certObj","signCSV","alert","arrayOfCertificatesSignedPromises","Promise","all","promise","downloadCSV","text","c","element","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","screen","header","wordBreak","copy","j","showTimeSelect","floor","handleDarkSideForce","field","createBrowserHistory","basename","process","App","path","exact","component","RegisterCertificate","ViewCertificate","Hash","AddCertifier","ListAuthorities","SignCertificate","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb6c5908.chunk.js","sourcesContent":["const certificateStorageJSON = require('./compiledContracts/CertificateStorage_CertificateStorage.json');\n\nconst env = {\n  network: 'kovan',\n  certificateContract: {\n    address: '0x34AEA1D67C5484133BeE0E60aEbB9882a772f64B',\n    abi: certificateStorageJSON.abi\n  },\n  dataTypes: [null, 'bytes', 'number', 'float', 'string', 'boolean', 'base58', 'date', 'datetime'],\n  certOrder: ['name', 'subject', 'score', 'category'],\n  authOrder: ['name', 'website'],\n  extraDataTypes: { ///comments // recommendations //file //expires\n    image: 'base58',\n    file: 'base58',\n    url: 'string',\n    date1: 'date',\n    date2: 'date',\n    location: 'string',\n    datetime1: 'datetime',\n    datetime2: 'datetime',\n    comments: 'string'\n  },\n  extraDataKeysExample: {\n    url: 'google.com',\n    comments: 'Student was very hardworking.',\n    location: 'Institute Hall, IIEST Shibpur, Howrah'\n  },\n  dataTypesExample: {\n    base58: 'IPFS Hash like QmQ9kasfzNTwbxGXSRyCp1WFdBXScpHNKDjrUPSWw3VR4z',\n    date: 'DD/MM/YYYY like 23/01/2020',\n    datetime: 'Unix timestamp like 1580476565'\n  },\n  managerAddress: '0xc8e1f3b9a0cdfcef9ffd2343b943989a22517b26',\n  TX_STATUS_ENUM: {\n    NOT_INITIATED: 0,\n    SIGNING: 1,\n    WAITING_FOR_CONFIRMATION: 2,\n    CONFIRMED: 3\n  },\n};\n\nmodule.exports = env;\n","import { dataTypes, certOrder, authOrder, extraDataTypes, certificateContract } from './env';\n\nconst ethers = require('ethers');\nconst bs58 = require('bs58');\n\nexport function bytesToString(bytes) {\n  return ethers.utils.toUtf8String(bytes).split('\\u0000').join('');\n}\n\nexport function parsePackedAddress(packedAddresses) {\n  if(packedAddresses.slice(0,2).toLowerCase() === '0x') packedAddresses = packedAddresses.slice(2);\n  if(packedAddresses.length%40 !== 0) throw new Error('Invalid packed addresses');\n  const addressArray = [];\n  for(let i = 0; i < packedAddresses.length/40; i++) {\n    addressArray.push('0x'+packedAddresses.slice(0+40*i,40+40*i));\n  }\n  return addressArray;\n}\n\nexport function getDataTypeHexByte(type) {\n  const index = dataTypes.indexOf(type);\n  if(index === -1) throw new Error('Invalid certificate data type: ' + type);\n  return index.toString(16);\n}\n\nexport function guessDataTypeFromInput(input) {\n  switch(typeof input) {\n    case 'string':\n      if(input.slice(0,2) === '0x') {\n        return 'bytes';\n      }\n      return 'string';\n    case 'number':\n      if(String(input).split('.')[1]) {\n        return 'float';\n      }\n      return 'number';\n    default:\n      return typeof input;\n  }\n}\n\n// remaining for image and data\n// take number or string and convert it into bytes\nexport function bytify(input, type) {\n  switch(type || guessDataTypeFromInput(input)) {\n    case 'bytes':\n      return input;\n    case 'number':\n      let hex = Number(input).toString(16);\n      if(hex.length % 2 !== 0) {\n          hex = '0'+hex;\n      }\n      return '0x' + hex;\n    case 'float':\n      const numberOfDecimals = (String(input).split('.')[1] || '').length;\n      const decimalByte = bytify(numberOfDecimals, 'number').slice(2);\n      if(decimalByte.length !== 2) throw new Error(`Invalid decimal byte: (${decimalByte})`);\n      const numberWithoutDecimals = Math.round(input * 10**numberOfDecimals);\n      const numberBytes = bytify(numberWithoutDecimals, 'number').slice(2);\n      return '0x' + decimalByte + numberBytes;\n    case 'string':\n      return ethers.utils.hexlify(ethers.utils.toUtf8Bytes(input));\n    case 'boolean':\n      return input ? '0x01' : '0x00';\n    case 'base58':\n      return '0x'+bs58.decode(input).toString('hex');\n    case 'date':\n      if(typeof input === 'string') {\n        input = input.split('/').join('');\n        if(isNaN(Number(input))) throw new Error(`Invalid Date Content (${input})`);\n        if(String(input).length !== 8) throw new Error(`Date should have 8 digits (${input}) (length: ${String(input).length})`);\n        if(String(input).split('.').length > 1) throw new Error(`Date should have no decimal point (${input})`);\n        return bytify(input, 'number');\n      } else if(typeof input === 'object' && input instanceof Date && !isNaN(input)) {\n        let dateStr = String(input.getDate());\n        if(dateStr.length < 2) dateStr = '0'+dateStr;\n        let monthStr = String(input.getMonth()+1);\n        if(monthStr.length < 2) monthStr = '0'+monthStr;\n        let yearStr = String(input.getFullYear());\n        return bytify(`${dateStr}/${monthStr}/${yearStr}`, 'date');\n      } else {\n        throw new Error('Invalid Date Type ' + typeof input);\n      }\n    case 'datetime':\n      if(typeof input === 'string') {\n        input = (new Date(input)).getTime();\n      }\n      return bytify(input, 'number');\n    default:\n      return null;\n  }\n}\n\nexport function renderBytes(hex, type) {\n  switch(type) {\n    case 'bytes':\n      return hex;\n    case 'number':\n      if(hex === '0x') return null;\n      return +hex;\n    case 'float':\n      if(hex === '0x') return null;\n      const decimals = +('0x'+hex.slice(2,4));\n      const number = +('0x'+hex.slice(4));\n      return number / 10**decimals;\n    case 'string':\n      return bytesToString(hex);\n    case 'boolean':\n      return !!(+hex);\n    case 'base58':\n      if(hex.slice(0,2) === '0x') hex = hex.slice(2);\n      return bs58.encode(Buffer.from(hex, 'hex'));\n    case 'date':\n      let date = String(renderBytes(hex, 'number'));\n      if(date.length < 8) date = '0' + date;\n      return date.slice(0,2)+'/'+date.slice(2,4)+'/'+date.slice(4,8);\n    case 'datetime':\n      return (new Date(renderBytes(hex, 'number'))).toLocaleString();\n    default:\n      return hex;\n  }\n}\n\nexport function isProperValue(input) {\n  return ![undefined, null, NaN].includes(input);\n}\n\nexport function isFullRLP(certificateHex) {\n  const decoded = ethers.utils.RLP.decode(certificateHex);\n  return typeof decoded[0] !== 'string';\n}\n\nexport function getCertificateHashFromDataRLP(certificateDataRLP) {\n  const digest = ethers.utils.hexlify(ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'+(certificateDataRLP.length/2 - 1)),certificateDataRLP]));\n  return ethers.utils.keccak256(digest);\n}\n\nexport function encodeCertificateObject(obj, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  const entries = Object.entries(obj);\n  const certRLPArray = [];\n\n  // adding name and subject into rlpArray\n  certOrder.forEach(property => {\n    if(property === 'score') {\n      // adding score into rlpArray\n      if(isProperValue(obj['score'])) {\n        certRLPArray.push(bytify(+obj['score'], 'float'));\n      } else {\n        certRLPArray.push('0x');\n      }\n    } else {\n      const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n      certRLPArray.push(hex);\n    }\n  });\n\n  const extraData = entries.filter(property => !certOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    certRLPArray.push('');\n    const datatypeIndex = certRLPArray.length - 1;\n    extraData.forEach(property => {\n      const dataType = extraDataTypes[property[0]] || guessDataTypeFromInput(property[1]);\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex]\n        + getDataTypeHexByte(dataType);\n      certRLPArray.push([bytify(property[0]), bytify(property[1], dataType)]);\n    });\n\n    if(certRLPArray[datatypeIndex].length % 2) {\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex] + '0';\n    }\n\n    certRLPArray[datatypeIndex] = '0x' + certRLPArray[datatypeIndex];\n  }\n\n  // console.log(certRLPArray);\n  const dataRLP = ethers.utils.RLP.encode(certRLPArray);\n  return {\n    fullRLP: ethers.utils.RLP.encode([certRLPArray, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function addSignaturesToCertificateRLP(encodedFullCertificate, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  let certificateData;\n  // console.log('in addsig',{encodedFullCertificate, signature});\n  if(typeof encodedFullCertificate === 'object') {\n    if(encodedFullCertificate.dataRLP) {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.dataRLP);\n    } else {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.fullRLP)[0];\n    }\n  } else {\n    const decoded = ethers.utils.RLP.decode(encodedFullCertificate);\n    certificateData = isFullRLP(encodedFullCertificate) ? decoded[0] : decoded;\n    if(decoded.length > 1) {\n      signatureArray = [...decoded.slice(1), ...signatureArray];\n    }\n  }\n  // console.log({signatureArray});\n  const dataRLP = ethers.utils.RLP.encode(certificateData);\n\n  return {\n    fullRLP: ethers.utils.RLP.encode([certificateData, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function decodeCertificateData(encodedCertificate) {\n  let fullRLP = typeof encodedCertificate === 'object' ? encodedCertificate.fullRLP : encodedCertificate;\n  const decoded = ethers.utils.RLP.decode(fullRLP);\n  const parsedCertificate = {};\n\n  let decodedCertificatePart, signatureArray;\n  //checking if decoded is of fullRLP or certificate data part\n  if(typeof decoded[0] === 'string') {\n    decodedCertificatePart = decoded;\n  } else {\n    decodedCertificatePart = decoded[0];\n    signatureArray = decoded.slice(1);\n  }\n\n  decodedCertificatePart.forEach((entry, i) => {\n    if(i < certOrder.length) {\n      if(certOrder[i] !== 'score') {\n        parsedCertificate[certOrder[i]] = ethers.utils.toUtf8String(entry);\n      } else {\n        parsedCertificate[certOrder[i]] = renderBytes(entry, 'float');\n      }\n    } else if(i > certOrder.length){\n      const type = dataTypes[+('0x'+decodedCertificatePart[certOrder.length].slice(1+i-certOrder.length, 2+i-certOrder.length))];\n      // console.log({value: entry[1], type});\n      parsedCertificate[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n\n  const returnObj = { parsedCertificate };\n\n  returnObj.certificateHash = getCertificateHashFromDataRLP(ethers.utils.RLP.encode(decodedCertificatePart));\n\n  if(signatureArray) {\n    returnObj.signatures = signatureArray;\n  }\n\n  return returnObj;\n}\n\nexport function encodeCertifyingAuthority(obj) {\n  const entries = Object.entries(obj);\n  const rlpArray = [];\n\n  authOrder.forEach(property => {\n    const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n    rlpArray.push(hex);\n  });\n\n  const extraData = entries.filter(property => !authOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    rlpArray.push('');\n    const datatypeIndex = rlpArray.length - 1;\n    extraData.forEach(property => {\n      const dataType = extraDataTypes[property[0]] || guessDataTypeFromInput(property[1]);\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex]\n        + getDataTypeHexByte(dataType);\n      rlpArray.push([bytify(property[0]), bytify(property[1], dataType)]);\n    });\n\n    if(rlpArray[datatypeIndex].length % 2) {\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex] + '0';\n    }\n\n    rlpArray[datatypeIndex] = '0x' + rlpArray[datatypeIndex];\n  }\n\n  // console.log(rlpArray);\n  return ethers.utils.RLP.encode(rlpArray);\n}\n\nexport function decodeCertifyingAuthority(encodedAuthorityData) {\n  const obj = {};\n  const decoded = ethers.utils.RLP.decode(encodedAuthorityData);\n  decoded.forEach((entry, i) => {\n    if(i < authOrder.length) {\n      obj[authOrder[i]] = ethers.utils.toUtf8String(entry);\n    } else if(i > authOrder.length){\n      const type = dataTypes[+('0x'+decoded[authOrder.length].slice(1+i-authOrder.length, 2+i-authOrder.length))];\n      // console.log({value: entry[1], type});\n      obj[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n  return obj;\n}\n\nexport async function getCertificateObjFromCertificateHash(certificateHash) {\n  const logs = await window.provider.getLogs({\n    address: certificateContract.address,\n    fromBlock: 0,\n    toBlock: 'latest',\n    topics: [ethers.utils.id('Certified(bytes32,address)'), certificateHash]\n  });\n\n  if(!logs.length) this.setState({ displayText: 'Certificate not yet registered or it does not exist' });\n\n  let certificateObj, txHashArray = [];\n\n  for(const log of logs) {\n    const txHash = log.transactionHash;\n    const transaction = await window.provider.getTransaction(txHash);\n    const arg = window.certificateContractInstance.interface.decodeFunctionData('registerCertificate(bytes)',transaction.data)[0];\n\n    const decoded = decodeCertificateData(arg);\n    // console.log({decoded, arg})\n\n    if(!certificateObj) {\n      certificateObj = {\n        fullRLP: arg,\n        ...decoded\n      };\n    } else {\n      // console.log('in else', {certificateObj, certObjExpand: addSignaturesToCertificateRLP(\n      //   certificateObj,\n      //   decoded.signatures\n      // )});\n      certificateObj = {\n        ...certificateObj,\n        ...addSignaturesToCertificateRLP(\n          certificateObj,\n          decoded.signatures\n        ),\n        signatures: decoded.signatures\n      };\n    }\n\n    // console.log({certificateObj});\n    txHashArray.push(txHash);\n  }\n\n  certificateObj.txHashArray = txHashArray;\n\n  return certificateObj;\n}\n\nexport function toTitleCase(str) {\n  return str.split(' ').map(str1 => str1.slice(0,1).toUpperCase()+str1.slice(1)).join(' ');\n}\n\nexport function toWebsiteURL(website) {\n  if(website.slice(0,4) !== 'http') {\n    website = 'http://' + website;\n  }\n  return website;\n}\n","const ethers = require('ethers');\nconst { certificateContract, network } = require('./env');\n\nconst setGlobalVariables = () => {\n  // console.log(window.web3.currentProvider);\n\n  window.networkId = window.web3.currentProvider.networkVersion;\n  // === (network === 'homestead' ? '1' : '42');\n\n  window.signer = (new ethers.providers.Web3Provider(window.ethereum)).getSigner();\n\n  window.certificateContractInstance = new ethers.Contract(\n    certificateContract.address,\n    certificateContract.abi,\n    window.signer\n  );\n\n  window.signer.getAddress().then(address => window.userAddress = address);\n\n  // window.userAddress = signer;//.then(address => window.userAddress = address);\n}\n\nconst setUpMetamask = () => {\n  try {\n    window.ethereum.enable().then(setGlobalVariables);\n\n    setInterval(() => {\n      if(window.web3 && window.web3.currentProvider && window.web3.currentProvider.selectedAddress && window.userAddress && window.web3.currentProvider.selectedAddress.toLowerCase() !== window.userAddress.toLowerCase()) {\n        setGlobalVariables();\n      }\n    },100);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nwindow.certificateContractInstance = new ethers.Contract(\n  certificateContract.address,\n  certificateContract.abi,\n  ethers.getDefaultProvider(network)\n);\n\nif(window.ethereum) {\n  const intervalId = setInterval(() => {\n    if(setUpMetamask()) {\n      console.log('Metamask setup done!');\n      clearInterval(intervalId);\n    }\n  }, 100);\n}\n\n\n\n\n// export { networkId, certificateContractInstance };\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NavigationElement = props => {\n  const urlFormat = props.heading.toLowerCase().split(' ').join('-');\n\n  return (\n    <button className={`navigation-element${props.location.pathname === `/${urlFormat}` ? ' active' : ''}`} style={{cursor: 'pointer'}} onClick={() => props.history.push(`/${urlFormat}`)}>{props.heading}</button>\n  );\n};\n\nexport default withRouter(NavigationElement);\n","import React, { Component } from 'react';\nimport NavigationElement from './NavigationElement';\nimport './Navigation.css';\nimport { managerAddress } from '../../env';\n\nexport default class extends Component {\n  state = {\n    isManager: false,\n    showAllItems: true,\n    displayHideButton: false,\n    managerAddress: null\n  };\n\n  componentDidMount = () => {\n    const setManager = async() => {\n      if(window.certificateContractInstance) {\n        const managerAddress = await window.certificateContractInstance.functions.manager();\n        this.state.managerAddress = managerAddress;\n        return true;\n      }\n      return false;\n    }\n\n    const intervalId = setInterval(async() => {\n      if(await setManager()) {\n        // console.log('setManager cleared');\n        clearInterval(intervalId);\n      }\n    }, 100);\n\n    const intervalId2 = setInterval(() => {\n      try {\n        const navigationGroup = document.querySelector('.navigation-group');\n        if(navigationGroup) {\n          if(navigationGroup.offsetHeight > 56) {\n            this.setState({ displayHideButton: true });\n          } else {\n            this.setState({ displayHideButton: !this.state.showAllItems });\n          }\n        }\n\n        const isManager = !!window.web3 && !!window.web3.currentProvider && !!this.state.managerAddress && this.state.managerAddress.toLowerCase() === window.web3.currentProvider.selectedAddress.toLowerCase();\n        if(isManager !== this.state.isManager) {\n          this.setState({ isManager });\n        }\n      } catch (error) {\n        // clearInterval(intervalId2);\n      }\n    }, 100);\n  };\n\n  render = () => (\n    <div className=\"navigation-group\">\n      {this.state.showAllItems ? <>\n        <NavigationElement heading=\"Register Certificate\" />\n        <NavigationElement heading=\"View Certificate\" />\n        {this.state.isManager ? <NavigationElement heading=\"Add Certifier\" /> : null}\n        <NavigationElement heading=\"List Authorities\" />\n        <NavigationElement heading=\"Sign Certificate\" />\n      </> : null}\n      {this.state.displayHideButton ? <button\n        className=\"navigation-element\"\n        style={{cursor: 'pointer'}}\n        onClick={() => this.setState({ showAllItems: !this.state.showAllItems })}\n      >\n        {this.state.showAllItems\n          ? <>Hide Menu Items</>\n          : <>Show Menu Items</>}\n      </button> : null}\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport './CertificateBox.css';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    loading: true,\n    signerAddress: null,\n    name: null,\n    website: null,\n    isAuthorised: null,\n    image: null\n  };\n\n  componentDidMount = async() => {\n    const signerAddress = ethers.utils.recoverAddress(this.props.certificateHash, this.props.signature);\n    this.setState({ signerAddress });\n    // console.log({signer});\n    const certifyingAuthority = await window.certificateContractInstance.certifyingAuthorities(signerAddress);\n    // console.log('certifyingAuthority', certifyingAuthority);\n\n    let caObj;\n    if(certifyingAuthority.data !== '0x') {\n      caObj = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n    } else {\n      caObj = { name: null, website: null };\n    }\n\n    this.setState({\n      name: caObj.name,\n      website: caObj.website ? window._z.toWebsiteURL(caObj.website) : null,\n      isAuthorised: certifyingAuthority.isAuthorised,\n      image: caObj.image || null,\n      loading: false\n    });\n\n    console.log('found', certifyingAuthority.isAuthorised);\n    // if(this.props.validCertificate[0] !== false) {\n    //   console.log('i marked it', certifyingAuthority.isAuthorised);\n    //   this.props.validCertificate[1](certifyingAuthority.isAuthorised);\n    // }\n    if(certifyingAuthority.isAuthorised) {\n      this.props.validCertificate[1]((this.props.validCertificate[0] || 0)+1);\n    }\n  };\n\n  render = () => {\n    let signerAuthorisedClass;\n    if(this.state.loading) {\n      signerAuthorisedClass = 'loading';\n    } else if(this.state.isAuthorised) {\n      signerAuthorisedClass = 'valid';\n    } else {\n      signerAuthorisedClass = 'invalid';\n    }\n\n    const signerElement = (\n      <>\n        <p>Signer {this.props.serial}: {this.state.name ? <><span className=\"mono\">{this.state.name}</span>{this.state.website ? <a href={this.state.website} rel=\"noopenner noreferrer\" target=\"_blank\" style={{textDecoration: 'none'}}> <img style={{display:'inline',height: '1rem'}} src={'share.png'} /></a> : null} (<span className=\"mono\">{this.state.signerAddress.slice(0,6)}</span>...<span className=\"mono\">{this.state.signerAddress.slice(38)}</span>)</> : (this.state.signerAddress ? <><span className=\"mono\">{this.state.signerAddress}</span></> : <>Computing address...</>)}</p>\n        <p>Signature: <span className=\"mono\">{this.props.signature.slice(0,10)}</span>...<span className=\"mono\">{this.props.signature.slice(122)}</span></p>\n      </>\n    );\n\n    return (\n      <div className={['signer-box', signerAuthorisedClass].filter(className=>!!className).join(' ')}>\n        {this.state.image ? <div className=\"row\" style={{display:'inline-block', width:'80%'}}>\n          <div className=\"column2\" style={{textAlign: 'right'}}>\n            <img className=\"certificate-signer-img\" src={'https://ipfs.infura.io/ipfs/'+this.state.image} />\n          </div>\n          <div className=\"column1\">\n            <div style={{textAlign: 'left', marginLeft: '1rem'}}>\n              {signerElement}\n            </div>\n          </div>\n        </div> : signerElement}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport SignerBox from './SignerBox';\nimport './CertificateBox.css';\nimport { network, certOrder } from '../../env';\n\nconst QRCode = require('qrcode');\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    validCertificate: (this.props.validCertificate&&this.props.validCertificate[0]) || null,\n    isAlreadyRegistered: null\n  };\n\n  componentDidMount = async() => {\n    setInterval(() => {\n      if(this.props.validCertificate && this.state.validCertificate !== this.props.validCertificate[0]) {\n        this.setState({ validCertificate: this.props.validCertificate[0] });\n      }\n    }, 100);\n    if(this.props.qrDisplay) QRCode.toCanvas(document.getElementById('qrcode-canvas'), window.location.href);\n\n    const certificate = await window.certificateContractInstance.certificates(this.props.certificateObj.certificateHash);\n\n    this.setState({ isAlreadyRegistered: certificate.signers !== '0x' });\n  }\n\n  render = () => {\n    const pc = this.props.certificateObj.parsedCertificate;\n    return (\n      <div className=\"certificate-box\" id=\"printable\">\n        <Helmet>\n          <title>{pc.name} is certified on Blockchain</title>\n          <meta\n            name=\"description\"\n            content=\"View certifications on blockchain\"\n          />\n        </Helmet>\n        <div className=\"certificate-container\">\n          {this.props.preview ? <p className=\"preview\">{this.state.isAlreadyRegistered ? <>Seems that this certificate is already registered and available at <a style={{cursor: 'pointer'}} onClick={() => this.props.history.push(`view-certificate/${this.props.certificateObj.certificateHash}`)}>https://kmpards.github.io/certidapp/view-certificate/{this.props.certificateObj.certificateHash}</a>. The smart contract will again accept this certificate only if there are more signers otherwise it will raise an exception.</> : <>{(this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0) ? <>Note: This is only a preview of the certificate, please register the certificate.</> : <>This is a preview of the entered certificate hex data.</>}</>}</p> : null}\n          {pc.category ? <p className=\"category\">Certificate of <span className=\"category mono\">{pc.category}</span></p> : null}\n\n          <p className=\"category-subtext\">{!pc.category ? <>This certificate </> : null}is awarded{pc.name ? <> to</> : null}</p>\n\n          {pc.name ? <p className=\"name mono\">{pc.name}</p> : null}\n\n          {\n            pc.score || pc.subject || pc.date1 || pc.datetime1\n            ? <p>{pc.score || pc.subject || pc.category ? <>For </> : null}{\n              pc.category || pc.score\n              ? <>{\n                pc.score !== null\n                ? <>Acheiving <span className=\"score mono\">{pc.score}%</span></>\n                : <>Extraordinary</>\n              } <span className=\"mono\">{pc.category}</span> {\n                pc.subject\n                ? <>{\n                  pc.name\n                  ? <>in</>\n                  : <>of</>\n                } </>\n                : null\n              }<span className=\"subject mono\">{pc.subject}</span></>\n              : null\n            }{\n              (() => {\n                const date1 = pc.datetime1\n                  || pc.date1;\n                const date2 = pc.datetime2\n                  || pc.date2;\n                const DateEl = props => <span className=\"date mono\">{props.children}</span>\n                console.log({date1, date2});\n                if(date1 && date2) {\n                  return <> from <DateEl>{date1}</DateEl> to <DateEl>{date2}</DateEl></>;\n                } else if(date1 && !date2) {\n                  return <> on <DateEl>{date1}</DateEl></>;\n                } else if(!date1 && date2) {\n                  return <> till <DateEl>{date2}</DateEl></>\n                } else {\n                  return null;\n                }\n              })()\n            }{\n              pc.location\n              ? <> at <span className=\"location mono\">{pc.location}</span></>\n              : null\n            }.</p>\n            : null\n          }\n\n          {Object.keys(pc).filter(key => ![...certOrder, 'date1', 'date2', 'location'].includes(key)).map(key => (\n            <p key={'cert-'+key} className={key}>{key}: {pc[key]}</p>\n          ))}\n\n\n          <p>{this.state.validCertificate === (this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n            ? <>The above certificate information is signed by following <span className=\"mono\">{this.state.validCertificate}</span> <span className=\"mono\">signer{this.state.validCertificate > 1 ? <>s</>:null}\n            </span> which is cryptographically verified by the certificate smart contract.</>\n            : (\n              0 < this.state.validCertificate\n              && this.state.validCertificate < (this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n              ? <>Seems that this certificate is signed by only {this.state.validCertificate} valid signers out of {this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0} total signers, you can remove signatures of unauthorised signers.</>\n              : <>There are no authorised signatures on this certificate.</>\n            )}</p>\n\n          {(this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n          ? <>\n            {this.props.certificateObj.signatures.map((signature, i) => (\n              <SignerBox\n                key={'signer-'+i}\n                serial={i+1}\n                certificateHash={this.props.certificateObj.certificateHash}\n                signature={signature}\n                validCertificate={this.props.validCertificate || [this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n                />\n            ))}\n          </>\n          : null}\n\n          {(() => {\n            let content = (\n              <>\n              <p className=\"hash\">Certificate Hash: <span className=\"mono\">{this.props.certificateObj.certificateHash}</span></p>\n              {this.props.certificateObj.txHashArray ? <p>Created at transaction{this.props.certificateObj.txHashArray.length > 1 ? <>s</> : null}\n              {this.props.certificateObj.txHashArray.map(txHash => (\n                <span key={'txHash-'+txHash}><br />\n                  <span className=\"mono\">{txHash.slice(0,6)}</span>...<span className=\"mono\">{txHash.slice(62)}</span>. <a className=\"link-black\" target=\"_blank\" rel=\"noopenner noreferrer\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/tx/${txHash}`}>View on EtherScan</a></span>\n              ))}\n              </p> : null}\n                </>\n            );\n\n            if(this.props.qrDisplay) {\n              content = (\n                <div className=\"row\">\n                  <div className=\"column1\">\n                    {content}\n                  </div>\n                  <div className=\"column2\">\n                    <div className=\"qrcode-canvas-container\">\n                    <canvas id=\"qrcode-canvas\" />\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n\n            return content;\n          })()}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport { TX_STATUS_ENUM } from '../../env';\n\nexport default class extends Component {\n  state = {\n    certificateString: '',\n    textAreaClass: null,\n    parsingWait: false,\n    certificateObj: null,\n    validCertificate: null,\n    txStatus: TX_STATUS_ENUM.NOT_INITIATED,\n    errorMessage: ''\n  };\n\n  timeoutId = null;\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  }\n\n  onRegister = async() => {\n    this.setState({ txStatus: TX_STATUS_ENUM.SIGNING, errorMessage: '' });\n    try {\n      const tx = await window.certificateContractInstance.functions.registerCertificate(this.state.certificateString);\n      this.setState({ txStatus: TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION });\n      await tx.wait();\n      this.setState({ txStatus: TX_STATUS_ENUM.CONFIRMED });\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${this.state.certificateObj.certificateHash}`);\n      },1000);\n    } catch (error) {\n      this.setState({ txStatus: TX_STATUS_ENUM.NOT_INITIATED, errorMessage: error.message });\n    }\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>Register Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"Register your certificate on Blockchain\"\n        />\n      </Helmet>\n      <p>Paste your signed certificate in the below box:</p>\n      <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n      <br />\n      {this.state.parsingWait\n        ? <p>Please wait parsing your certificate...</p>\n        : null}\n\n      {this.state.certificateObj\n        ? <>\n          <p>Your certificate preview:</p>\n          <CertificateBox\n            certificateObj={this.state.certificateObj}\n            qrDisplay={false}\n            validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            preview={true}\n            history={this.props.history}\n            />\n        </>\n        : null}\n\n      {this.state.validCertificate\n        ? <>\n\n        </>\n        : <></>}\n\n        {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n\n        <button\n          className=\"btn\"\n          disabled={this.state.txStatus !== TX_STATUS_ENUM.NOT_INITIATED || this.state.validCertificate !== (this.state.certificateObj && this.state.certificateObj.signatures && this.state.certificateObj.signatures.length)}\n          onClick={this.onRegister}\n        >\n          {(() => {\n            switch(this.state.txStatus) {\n              case TX_STATUS_ENUM.NOT_INITIATED:\n                return 'Register Certificate';\n              case TX_STATUS_ENUM.SIGNING:\n                return 'Signing transaction..';\n              case TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION:\n                return 'Waiting for confirmation...';\n              case TX_STATUS_ENUM.CONFIRMED:\n                return 'Certificate is registered!';\n            }\n          })()}\n        </button>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst HASH_CHECKING_ENUM = {\n  NOT_CHECKING: 0,\n  CHECKING: 1,\n  FOUND_VALID: 2,\n  FOUND_INVALID: 3\n};\n\nexport default class extends Component {\n  state = {\n    userEnteredHash: '',\n    inputError: false,\n    recentCertificateHashes: [],\n    displayText: '',\n    hashCheckStatus: 0\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)')]\n    });\n\n    console.log(logs);\n\n    this.setState({\n      recentCertificateHashes: logs.map(log => log.topics[1]).filter((item, i, a) => a.indexOf(item) === i).reverse().slice(0,3)\n    });\n\n  };\n\n  onVerifyCertificate = async() => {\n    this.setState({ inputError: false, hashCheckStatus: HASH_CHECKING_ENUM.CHECKING });\n    try {\n      const hash = ethers.utils.hexlify(this.state.userEnteredHash.split(' ').join('').split('\\n').join(''));\n\n      if(hash.length !== 66) throw new Error('invalid hash length');\n\n      const certificateStruct = await window.certificateContractInstance.functions.certificates(hash);\n\n      // window.certificates[hash] = window._z.decodeCertificateData(certificateObj.data);\n\n      if(certificateStruct.signers === '0x') throw new Error('Certificate not yet registered or it does not exist');\n\n      this.setState({ hashCheckStatus: HASH_CHECKING_ENUM.FOUND_VALID });\n\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${hash}`);\n      }, 400);\n    } catch(error) {\n      this.setState({ inputError: true, displayText: error.message });\n    }\n\n  };\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>View Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"View certificates on Blockchain\"\n        />\n      </Helmet>\n      <input\n        className={`certificate-textinput${this.state.inputError ? ' invalid' : ''}`}\n        type=\"text\"\n        placeholder=\"Enter Certificate Hash\"\n        onChange={event => this.setState({ userEnteredHash: event.target.value, inputError: false })}\n        />\n      {this.state.displayText ? <p class={this.state.inputError ? 'error-message' : 'status-message'}>{this.state.displayText}</p> : null}\n      <button className=\"btn\" disabled={this.state.hashCheckStatus !== 0} onClick={this.onVerifyCertificate}>{(() => {\n        switch(this.state.hashCheckStatus) {\n          case HASH_CHECKING_ENUM.CHECKING:\n            return 'Checking hash...';\n          case HASH_CHECKING_ENUM.FOUND_VALID:\n            return 'Accessing certificate fields...';\n          default:\n            return 'Verify Certificate';\n        }\n      })()}</button>\n\n      {this.state.recentCertificateHashes.length\n        ? <div className=\"form-group\">\n        <p>Recent certificates issued...</p>\n        {this.state.recentCertificateHashes.map((hash,i) => (\n          <p key={`recent-certificates-${hash}`} className=\"mono\">{hash}</p>\n        ))}\n      </div> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../../env';\nimport CertificateBox from '../../CertificateBox/CertificateBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    displayText: 'Please wait...',\n    loading: true,\n    certificateObj: null\n  };\n\n  componentDidMount = async() => {\n    const certificateObj = await window._z.getCertificateObjFromCertificateHash(this.props.match.params.hash);\n\n    this.setState({ loading: false, displayText: '', certificateObj})\n  }\n  render = () => (\n    <>\n      {this.state.displayText ? <p>{this.state.displayText}</p> : null}\n      {!this.state.loading && this.state.certificateObj ? <CertificateBox\n        certificateObj={this.state.certificateObj}\n        qrDisplay={true}\n      /> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    address: '',\n    name: '',\n    website: '',\n    image: '',\n    errorMessage: '',\n    statusMessage: ''\n  };\n\n  onConfirmClick = async() => {\n    this.setState({ errorMessage: '', statusMessage: '' })\n    try {\n      const address = ethers.utils.getAddress(this.state.address);\n      const encoded = window._z.encodeCertifyingAuthority({\n        name: this.state.name,\n        website: this.state.website.split(' ').join(''),\n        image: this.state.image\n      });\n\n      const tx = await window.certificateContractInstance.functions.addCertifyingAuthority(\n        address, encoded\n      );\n\n      this.setState({\n        statusMessage: 'Tx sent waiting for confirmation...',\n        errorMessage: ''\n      });\n\n      await tx.wait();\n\n      this.setState({ statusMessage: 'Certifier is Added!', errorMessage: '' })\n    } catch(error) {\n      this.setState({ errorMessage: error.message, statusMessage: '' })\n    }\n  }\n\n  render = () => (\n    <div>\n      <Helmet>\n        <title>Add Certifier</title>\n        <meta\n          name=\"description\"\n          content=\"Add Certification Authority to certify.\"\n        />\n      </Helmet>\n      <div className=\"form-group\">\n        <p>Enter Address of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Address\"\n          onChange={event => this.setState({address: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Name of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Name\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Website of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Certifier Website\"\n          onChange={event => this.setState({website: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter IPFS Hash of Logo of Certifying Authority (optional):</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"IPFS Hash of Logo\"\n          onChange={event => this.setState({image: event.target.value})}/>\n        {this.state.image ? <img style={{maxHeight:'200px', maxWidth:'200px'}} src={`https://ipfs.infura.io/ipfs/${this.state.image}`} /> : null}\n      </div>\n\n      {this.state.errorMessage ? <p className=\"error-message\">Error: {this.state.errorMessage}</p> : null}\n\n      {this.state.statusMessage ? <p className=\"status-message\">Status: {this.state.statusMessage}</p> : null}\n\n      <button className=\"btn\" onClick={this.onConfirmClick}>Confirm New Certifier</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  state = {\n    obj: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(this.props.address);\n      // console.log(certifyingAuthority);\n      const obj = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n      this.setState({ obj, isAuthorised: certifyingAuthority.isAuthorised });\n    } catch (error) {\n      console.error(error);\n      this.setState({ name: 'Failed to load name...' });\n    }\n  }\n\n  render = () => {\n    const certifierElement = (\n      <>\n      {this.state.obj ? <>\n        {Object.entries(this.state.obj).map((entry, i) => (\n          <p key={'ca-property-'+i}>{window._z.toTitleCase(entry[0])}: {entry[0] === 'website' ? <a className=\"link\" href={window._z.toWebsiteURL(entry[1])} rel=\"noopenner noreferrer\" target=\"_blank\">{entry[1]}</a> : <>{entry[1]}</>}</p>\n        ))}\n      </> : <>Loading...</>}\n      <p>Signing Address: {this.props.address}</p>\n      <p>Is Authorized: {this.state.isAuthorised === null ? 'Loading...' : (\n        this.state.isAuthorised ? 'Yes' : 'No'\n      )}</p>\n      </>\n    );\n\n    return (\n      <>\n        <div className=\"form-group mono row\">\n          {this.state.obj && this.state.obj.image ? <div>\n            <div className=\"column2\">\n              <img style={{maxHeight:'200px', maxWidth:'200px'}} src={'https://ipfs.infura.io/ipfs/'+this.state.obj.image} />\n            </div>\n            <div className=\"column1\" style={{textAlign: 'left'}}>\n              <div style={{marginLeft: '1rem'}}>\n                {certifierElement}\n              </div>\n            </div>\n          </div> : certifierElement}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\nimport CertifierBox from './CertifierBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    certifiers: [],\n    loading: true\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Authorization(address,bool)')]\n    });\n    // console.log(logs);\n    this.setState({\n      certifiers: logs.map(log => ethers.utils.hexZeroPad(ethers.utils.hexStripZeros(log.topics[1]), 20)).filter((address, i, self) => self.indexOf(address) === i),\n      loading: false\n    });\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>List of Certification Authorities</title>\n        <meta\n          name=\"description\"\n          content=\"See all certification authorities\"\n        />\n      </Helmet>\n      {this.state.loading\n        ? <>Please wait loading certifying authorities...</>\n        : <>\n          {this.state.certifiers.length ? <>{this.state.certifiers.map((address,i) => (\n            <CertifierBox key={`certifier-${address}${i}`} address={address} />\n          ))}</> : <>No certifying authorities currently.</>}\n        </>}\n    </>\n  );\n}\n","import React from 'react';\n\nconst CSVReader = ({\n  inputId,\n  style,\n  onFileLoaded,\n  onError\n}) => {\n  let fileContent = undefined;\n\n  const handleChangeFile = e => {\n    try {\n      let reader = new FileReader();\n      const filename = e.target.files[0].name;\n\n      reader.onload = event => {\n        // const csvData = PapaParse.parse(\n        //   ,\n        //   Object.assign(parserOptions, {\n        //     error: onError\n        //   })\n        // );\n        onFileLoaded(event.target.result, filename);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id={inputId}\n        style={style}\n        accept=\".csv, text/csv\"\n        onChange={e => handleChangeFile(e)}\n      />\n    </div>\n  );\n};\n\nexport default CSVReader;\n","import React, { Component } from 'react';\n\nconst MONTH = {\n  1: {name: 'Jan', days: 31},\n  2: {name: 'Feb', days: 29},\n  3: {name: 'Mar', days: 31},\n  4: {name: 'Apr', days: 30},\n  5: {name: 'May', days: 31},\n  6: {name: 'Jun', days: 30},\n  7: {name: 'Jul', days: 31},\n  8: {name: 'Aug', days: 31},\n  9: {name: 'Sep', days: 30},\n  10: {name: 'Oct', days: 31},\n  11: {name: 'Nov', days: 30},\n  12: {name: 'Dec', days: 31}\n};\nexport default class extends Component {\n  state = {\n    date: null,\n    month: null,\n    year: null,\n    errorMessage: ''\n  }\n\n  updateState = async obj => {\n    await this.setState({...obj, errorMessage: ''});\n    if(this.props.onChange && this.state.date\n      && this.state.month && this.state.year\n    ) {\n      try {\n        const d = new Date(`${this.state.date} ${MONTH[this.state.month].name} ${this.state.year}`);\n        if(d instanceof Date && isNaN(d)) throw new Error('Invalid Date');\n        // const dateStr = this.state.date+'/'+this.state.month+'/'+this.state.year;\n        this.props.onChange(d);\n      } catch(error) {\n        this.setState({ errorMessage: error.message });\n      }\n    }\n  }\n\n  render = () => (\n    <>\n      <div>\n        Select Date:\n        <select onChange={event => this.updateState({ date: event.target.value })}>\n          <option selected disabled value={null}>Select Date</option>\n          {Array.from(Array(this.state.month ? MONTH[this.state.month].days : 31).keys()).map(key => key+1).map(date => (\n            <option value={date}>{date}</option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Select Month:\n        <select onChange={event => this.updateState({ month: event.target.value })}>\n          <option selected disabled value={null}>Select Month</option>\n          {Array.from(Array(12).keys()).map(key => key+1).map(month => (\n            <option value={month}>{MONTH[month].name}</option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Select Year:\n        <select onChange={event => this.updateState({ year: event.target.value })}>\n          <option selected disabled value={null}>Select Year</option>\n          {Array.from(Array(50).keys()).map(key => key+1951).map(year => (\n            <option value={year}>{year}</option>\n          ))}\n        </select>\n      </div>\n      {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certOrder, extraDataTypes, extraDataKeysExample, dataTypesExample } from '../../env';\nimport CSVReader from './CSVReader';\nimport DatePicker from '../DatePicker/DatePicker';\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport copy from 'copy-to-clipboard';\n\nconst ethers = require('ethers');\n\nconst CURRENT_PAGE_ENUM = {\n  SELECT_MODE: 0,\n  SIGN_FRESH_CERTIFICATE: 1,\n  SIGN_ENCODED_CERTIFICATE: 2,\n  SIGN_CSV: 3\n};\n\nexport default class extends Component {\n  state = {\n    currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE,\n    name: '',\n    subject: '',\n    score: '',\n    category: '',\n    errorMessage: '',\n    extraData: [],\n    certificateHex: null,\n    copied: false,\n    authorityName: '',\n    isAuthorised: true,\n    certificatesToSign: [],\n    errorsInCSV: '',\n    csvSigning: false,\n    certificatesSigned: []\n  };\n\n  intervalId = null;\n  signerAddress = null;\n\n  componentDidMount = () => {\n    this.intervalId = setInterval(async() => {\n      if(window.signer) {\n        const currentAddress = await window.signer.getAddress();\n        if(currentAddress !== this.signerAddress) {\n          try {\n            const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(currentAddress);\n\n            if(certifyingAuthority.isAuthorised) {\n              const authorityName = window._z.decodeCertifyingAuthority(certifyingAuthority.data).name;\n\n              this.setState({ authorityName, isAuthorised: true });\n            } else {\n              this.setState({ authorityName: null, isAuthorised: false });\n            }\n\n\n          } catch(error) {\n            console.error(error);\n          }\n          this.signerAddress = currentAddress;\n        }\n      }\n    }, 100);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  }\n\n  onNewFieldUpdate = () => {\n    try {\n      const encodedCertificate = window._z.encodeCertificateObject({\n        name: this.state.name,\n        subject: this.state.subject,\n        score: this.state.score || null,\n        category: this.state.category,\n        ...Object.fromEntries(this.state.extraData)\n      });\n\n      const certificateObj = window._z.decodeCertificateData(encodedCertificate);\n\n      this.setState({\n        certificateObj,\n        errorMessage: ''\n      });\n    } catch (error) {\n      this.setState({ errorMessage: error.message })\n    }\n  }\n\n  signNewCertificate = async() => {\n    this.setState({ errorMessage: '' });\n    try {\n      let encodedCertificate = window._z.encodeCertificateObject({\n        name: this.state.name,\n        subject: this.state.subject,\n        score: this.state.score || null,\n        category: this.state.category,\n        ...Object.fromEntries(this.state.extraData)\n      });\n\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(encodedCertificate.dataRLP));\n\n      encodedCertificate = window._z.addSignaturesToCertificateRLP(encodedCertificate, signature);\n\n      this.setState({\n        certificateHex: encodedCertificate.fullRLP\n      });\n\n      // console.log('signed',ethers.utils.hexlify(signedCertificateConcat));\n    } catch (error) {\n      console.error(error.message);\n      this.setState({ errorMessage: error.message })\n    }\n  };\n\n  signEncodedCertificate = async() => {\n    const encoded = window._z.encodeCertificateObject(this.state.certificateObj.parsedCertificate);\n\n    const signature = await window.signer.signMessage(ethers.utils.arrayify(encoded.dataRLP));\n\n    const certificateHex = window._z.addSignaturesToCertificateRLP(this.state.certificateString, signature).fullRLP;\n    this.setState({ certificateHex });\n  }\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  };\n\n  onFileLoaded = output => {\n    let errorsInCSV = '';\n    // csv rows: hex, name, subject, score, category\n    let keys = ['hex', ...certOrder];\n    const certificatesToSign = output.split('\\n').map((row, i) => {\n      const columns = row.split(',');\n      if(i === 0 && columns[0] === 'hex') {\n        keys = columns;\n        return;\n      }\n      try {\n        if(columns.length < 1) throw new Error('Not even 1 entry');\n        if(isNaN(+columns[3])) throw new Error(`Invalid score: ${columns[3]}`);\n        const certObj = {};\n        keys.forEach((key, i) => {\n          if(i !== 0) {\n            certObj[key] = columns[i];\n          }\n        });\n        const encodedCertificate = window._z.encodeCertificateObject(certObj);\n        // encodedCertificate.columns = columns;\n        return {encodedCertificate, columns};\n      } catch (error) {\n        errorsInCSV += `Error at row ${i+1}: ${error.message}\\n`;\n      }\n    }).filter(entry => !!entry);\n    console.log({certificatesToSign}, errorsInCSV);\n    this.setState({ certificatesToSign, errorsInCSV });\n  }\n\n  signCSV = async() => {\n    this.setState({ csvSigning: true });\n\n    if(!window.signer) return alert('Signer not available, please connect metamask');\n\n    const arrayOfCertificatesSignedPromises = this.state.certificatesToSign.map(async obj => {\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(obj.encodedCertificate.dataRLP));\n\n      const columns = [...obj.columns];\n      columns[0] = window._z.addSignaturesToCertificateRLP(columns[0] || obj.encodedCertificate.fullRLP, signature).fullRLP;\n\n      // console.log({signature, });\n\n      console.log(signature);\n      return {\n        ...obj,\n        columns\n      };\n    });\n\n    await Promise.all(arrayOfCertificatesSignedPromises);\n\n    const certificatesSigned = [];\n\n    for(const promise of arrayOfCertificatesSignedPromises) {\n      certificatesSigned.push(await promise);\n    }\n\n    console.log('certificatesSigned',certificatesSigned);\n    this.setState({ certificatesSigned, csvSigning: false });\n  };\n\n  downloadCSV = () => {\n    const keys = ['hex', ...certOrder];\n    const text = keys.join(',')+'\\n'+this.state.certificatesSigned.map(c => {\n      return [\n        ...c.columns,\n      ].join(',')\n    }).join('\\n');\n\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = 'signed_certificates.csv' ;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  render = () => {\n    let screen;\n\n    const header = (\n      <p style={{textAlign: ''}}><button className=\"btn\" onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE })}>Go Back to Select Mode</button></p>\n    );\n\n    if(this.state.currentScreen === CURRENT_PAGE_ENUM.SELECT_MODE) {\n      screen = (\n        <>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE })}\n          >New Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE })}\n          >Sign Encoded Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_CSV })}\n          >CSV Mode</button>\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <div className=\"form-group\">\n          <p>Enter Name:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Certifiee Name\"\n            onChange={async event => {\n              await this.setState({name: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Subject:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Subject / Course Name\"\n            onChange={async event => {\n              await this.setState({subject: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Score:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"E.g. 74.89\"\n            onChange={async event => {\n              await this.setState({score: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Certification Type / Category:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"e.g. Participation / Merit / Appreciation\"\n            onChange={async event => {\n              await this.setState({category: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        {this.state.extraData.map((entry, i) => (\n          <div className=\"form-group\" key={'extraData-'+i}>\n            <select onChange={async event => {\n              const extraData = [...this.state.extraData];\n              extraData[i][0] = event.target.value;\n              // console.log({extraData});\n              await this.setState({ extraData });\n              this.onNewFieldUpdate();\n            }}>\n              <option selected disabled value={null}>Select Property</option>\n              {Object.keys(extraDataTypes).map((key, j) => (\n                <option key={`extraData-${i}-${j}`} value={key}>{key}</option>\n              ))}\n            </select>\n            <br />\n            {(() => {\n              switch(extraDataTypes[entry[0]]) {\n                case 'date':\n                  return (\n                    <DatePicker\n                      showTimeSelect\n                      onChange={async date => {\n                        const extraData = [...this.state.extraData];\n                        let dateStr = String(date.getDate());\n                        if(dateStr.length < 2) dateStr = '0'+dateStr;\n                        let monthStr = String(date.getMonth()+1);\n                        if(monthStr.length < 2) monthStr = '0'+monthStr;\n                        let yearStr = String(date.getFullYear());\n                        extraData[i][1] = `${dateStr}/${monthStr}/${yearStr}`;\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}\n                      />\n                  );\n                case 'datetime':\n                  return (\n                    <DatePicker\n                      showTimeSelect\n                      onChange={async date => {\n                        const extraData = [...this.state.extraData];\n                        extraData[i][1] = Math.floor(date.getTime() / 1000);\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}\n                    />\n                  );\n                default:\n                  return (\n                    <input\n                      className=\"certificate-textinput\"\n                      type=\"text\"\n                      placeholder={entry[0] === null ? 'Select a property from above' :(extraDataKeysExample[entry[0]] ? `e.g. ${extraDataKeysExample[entry[0]]}` : (dataTypesExample[extraDataTypes[entry[0]]] ? `e.g. ${dataTypesExample[extraDataTypes[entry[0]]]}` : 'Enter value for above property'))}\n                      onChange={async event => {\n                        const extraData = [...this.state.extraData];\n                        extraData[i][1] = event.target.value;\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}/>\n                  );\n              }\n            })()}\n          </div>\n        ))}\n\n        {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n\n        <button className=\"btn\" onClick={() => this.setState({ extraData: [...this.state.extraData, [null,null]] })}>Add More Data</button>\n\n        {this.state.certificateObj ? <CertificateBox\n          certificateObj={this.state.certificateObj}\n          qrDisplay={false}\n          validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n          /> : null}\n\n        <button className=\"btn\" onClick={this.signNewCertificate}>Sign this Certificate</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <p>Paste an unsigned or signed certificate in the below box:</p>\n        <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n        {this.state.certificateObj\n          ? <>\n            <p>Your certificate preview:</p>\n            <CertificateBox\n              certificateObj={this.state.certificateObj}\n              qrDisplay={false}\n              validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n              />\n          </>\n          : null}\n          <button className=\"btn\" onClick={this.signEncodedCertificate}>Sign this Certificate with your private key</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_CSV) {\n      screen = (\n        <>\n        {header}\n          {this.state.certificatesToSign.length === 0\n            ? <>\n          <button className=\"btn\" onClick={() => document.getElementById('csv-input').click()}>Select CSV file</button>\n          <CSVReader\n            inputId=\"csv-input\"\n            onFileLoaded={this.onFileLoaded}\n            style={{display: 'none'}}\n            onError={this.handleDarkSideForce}\n          />\n          </> : <>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Course</th>\n                  <th>Score</th>\n                  <th>Extra Data</th>\n                  <th>Signed Certificate</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.certificatesToSign.map((obj,i) => (\n                <tr key={'sign-'+i}>\n                  {obj.columns.map((field, j) => (\n                    <td key={'sign-field-'+j}>\n                      {field.length > 32\n                        ? (field.slice(0,2) === '0x'\n                          ? <>{field.slice(0,6)}...{field.slice(field.length - 4, field.length)} ({field.length/2} Bytes)</>\n                          : <>{field.slice(0,10)}... ({field.length} chars)</>\n                        )\n                        : <>{field}</>}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n              </tbody>\n            </table>\n\n            <p>Errors: {this.state.errorsInCSV}</p>\n\n            <button className=\"btn\" onClick={this.signCSV}>{this.state.csvSigning ? 'Signing' : 'Sign'} {this.state.certificatesToSign.length} certificates{this.state.csvSigning ? '...' : null}</button>\n          </>}\n\n          {this.state.certificatesSigned.length ? <>\n            <button className=\"btn\" onClick={this.downloadCSV}>Download updated CSV</button>\n          </> : null}\n        </>\n      );\n    }\n\n\n    return (\n      <>\n        <Helmet>\n          <title>Sign Certificate</title>\n          <meta\n            name=\"description\"\n            content=\"Sign Certificate which can be submitted to blockchain\"\n          />\n        </Helmet>\n        {this.state.isAuthorised\n          ? <p className=\"status-message\">Welcome {this.state.authorityName}! Using this portal you can sign certificates on your half and send the generated certificate hex strings to your students/clients so they can register those certificates.</p>\n          : <p className=\"error-message\">Looks like {window.userAddress} is not authorised as a certifying authority, hence the smart contract will not accept certificates signed by this private key.</p>}\n\n        {screen}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Navigation from './containers/Navigation/Navigation';\nimport RegisterCertificate from './containers/RegisterCertificate/RegisterCertificate';\nimport ViewCertificate from './containers/ViewCertificate/ViewCertificate';\nimport Hash from './containers/ViewCertificate/Hash/Hash';\nimport AddCertifier from './containers/AddCertifier/AddCertifier';\nimport ListAuthorities from './containers/ListAuthorities/ListAuthorities';\nimport SignCertificate from './containers/SignCertificate/SignCertificate';\nimport './App.css';\n\nimport { network } from './env';\n\nconst history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nwindow.ethers = require('ethers');\nwindow.provider = window.ethers.getDefaultProvider(network);\nwindow._z = require('./functions');\nwindow.certificates = {};\n\nrequire('./ethereum');\n// window.certificateContractInstance = require('./ethereum').certificateContractInstance;\n\nconst App = props => (\n  <Router history={history}>\n    <div className=\"App\">\n      <img className=\"background-lines top\" src='cert-background-lines.png' />\n      <img className=\"background-lines bottom\" src='cert-background-lines2.png' />\n      <header className=\"App-header\">\n        <Navigation />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact component={() => (\n              <p>\n                Welcome to CertiÐApp.\n                <br />\n                {window.ethereum\n                  ? <>Please select an option from above.</>\n                  : <>You will need <a href=\"https://metamask.io/\" rel=\"noopenner noreferrer\">Metamask</a> installed if you want to register your certificate.</>}\n              </p>\n            )} />\n            <Route path=\"/register-certificate\" exact component={RegisterCertificate} />\n            <Route path=\"/view-certificate\" exact component={ViewCertificate} />\n            <Route path=\"/view-certificate/:hash\" exact component={Hash} />\n            <Route path=\"/add-certifier\" exact component={AddCertifier} />\n            <Route path=\"/list-authorities\" exact component={ListAuthorities} />\n            <Route path=\"/sign-certificate\" exact component={SignCertificate} />\n          </Switch>\n        </div>\n      </header>\n    </div>\n  </Router>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}