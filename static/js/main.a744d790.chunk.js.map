{"version":3,"sources":["env.js","functions.js","ethereum.js","containers/Home/Home.js","containers/Navigation/NavigationElement.js","containers/Navigation/Navigation.js","containers/CertificateBox/SignerBox.js","containers/CertificateBox/CertificateBox.js","containers/RegisterCertificate/RegisterCertificate.js","containers/ViewCertificate/ViewCertificate.js","containers/ViewCertificate/Hash/Hash.js","containers/AddCertifier/AddCertifier.js","containers/ListAuthorities/CertifierBox.js","containers/ListAuthorities/ListAuthorities.js","containers/SignCertificate/CSVReader.js","containers/DatePicker/DatePicker.js","containers/SignCertificate/SignCertificate.js","App.js","serviceWorker.js","index.js"],"names":["env","network","certificateContract","address","abi","require","dataTypes","certOrder","authOrder","extraDataTypes","image","file","url","date1","date2","location","datetime1","datetime2","comments","extraDataKeysExample","dataTypesExample","base58","date","datetime","managerAddress","TX_STATUS_ENUM","NOT_INITIATED","SIGNING","WAITING_FOR_CONFIRMATION","CONFIRMED","AUTHORITY_STATUS_ENUM","NOT_AUTHORISED","AUTHORISED","MIGRATED","SUSPENDED","networkId","module","exports","ethers","bs58","bytesToString","bytes","utils","toUtf8String","split","join","parsePackedAddress","packedAddresses","slice","toLowerCase","length","Error","addressArray","i","push","getDataTypeHexByte","type","index","indexOf","toString","guessDataTypeFromInput","input","String","bytify","hex","Number","numberOfDecimals","decimalByte","Math","round","hexlify","toUtf8Bytes","decode","isNaN","Date","dateStr","getDate","monthStr","getMonth","yearStr","getFullYear","getTime","renderBytes","decimals","encode","Buffer","from","toLocaleString","isProperValue","undefined","NaN","includes","isFullRLP","certificateHex","RLP","getCertificateHashFromDataRLP","certificateDataRLP","digest","concat","keccak256","encodeCertificateObject","obj","signature","signatureArray","entries","Object","certRLPArray","forEach","property","extraData","filter","datatypeIndex","dataType","dataRLP","fullRLP","certificateHash","addSignaturesToCertificateRLP","encodedFullCertificate","certificateData","decoded","decodeCertificateData","encodedCertificate","decodedCertificatePart","parsedCertificate","entry","returnObj","signatures","encodeCertifyingAuthority","rlpArray","decodeCertifyingAuthority","encodedAuthorityData","getCertificateObjFromCertificateHash","a","window","provider","getDefaultProvider","getLogs","fromBlock","toBlock","topics","id","logs","this","setState","displayText","txHashArray","log","txHash","transactionHash","getTransaction","transaction","arg","certificateContractInstance","interface","decodeFunctionData","data","certificateObj","toTitleCase","str","map","str1","toUpperCase","toWebsiteURL","website","setGlobalVariables","signer","providers","Web3Provider","ethereum","getSigner","web3","currentProvider","networkVersion","Contract","onCorrectNetwork","getAddress","then","userAddress","intervalId","setInterval","enable","on","accounts","autoRefreshOnNetworkChange","selectedAddress","error","setUpMetamask","console","clearInterval","METAMASK_ENUM","NOT_INSTALLED","INSTALLED_BUT_NOT_CONNECTED","CONNECTED","OTHER_NETWORK","state","metamaskStatus","componentDidMount","latestStatus","componentWillUnmount","render","className","style","padding","href","rel","target","Component","withRouter","props","urlFormat","path","heading","pathname","cursor","onClick","history","isManager","showAllItems","displayHideButton","invalidNetwork","setManager","functions","manager","navigationGroup","document","querySelector","offsetHeight","loading","signerAddress","name","status","recoverAddress","certifyingAuthorities","certifyingAuthority","caObj","_z","isAuthorised","validCertificate","signerAuthorisedClass","signerElement","serial","textDecoration","display","height","src","width","textAlign","marginLeft","QRCode","isAlreadyRegistered","qrDisplay","toCanvas","getElementById","certificates","certificate","signers","pc","Helmet","content","preview","category","score","subject","DateEl","children","keys","key","newStatus","certificateString","textAreaClass","parsingWait","txStatus","errorMessage","timeoutId","onTextAreaChange","event","spacesRemoved","value","setTimeout","clearTimeout","onRegister","registerCertificate","tx","wait","message","onChange","disabled","HASH_CHECKING_ENUM","NOT_CHECKING","CHECKING","FOUND_VALID","FOUND_INVALID","userEnteredHash","inputError","recentCertificateHashes","hashCheckStatus","item","reverse","onVerifyCertificate","hash","certificateStruct","margin","placeholder","match","params","statusMessage","onConfirmClick","encoded","updateCertifyingAuthority","maxHeight","maxWidth","certifierElement","certifiers","hexZeroPad","hexStripZeros","self","CSVReader","inputId","onFileLoaded","onError","accept","e","reader","FileReader","filename","files","onload","result","readAsText","handleChangeFile","MONTH","1","days","2","3","4","5","6","7","8","9","10","11","12","month","year","updateState","d","selected","Array","CURRENT_PAGE_ENUM","SELECT_MODE","SIGN_FRESH_CERTIFICATE","SIGN_ENCODED_CERTIFICATE","SIGN_CSV","currentScreen","copied","authorityName","csvKeys","certificatesToSign","errorsInCSV","csvSigning","certificatesSigned","currentAddress","onNewFieldUpdate","fromEntries","signNewCertificate","signMessage","arrayify","signEncodedCertificate","output","row","columns","certObj","signCSV","alert","arrayOfCertificatesSignedPromises","Promise","all","promise","downloadCSV","text","c","element","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","screen","header","wordBreak","copy","j","showTimeSelect","floor","handleDarkSideForce","field","createBrowserHistory","basename","process","App","exact","component","Home","RegisterCertificate","ViewCertificate","Hash","AddCertifier","ListAuthorities","SignCertificate","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a744d790.chunk.js","sourcesContent":["const certificateStorageJSON = require('./compiledContracts/CertiDApp_CertiDApp.json');\n\nconst env = {\n  network: 'kovan',\n  certificateContract: {\n    address: '0x3ea996e3A2f2A8b235065a7Fa5d55e5f626f0003',\n    abi: certificateStorageJSON.abi\n  },\n  dataTypes: [null, 'bytes', 'number', 'float', 'string', 'boolean', 'base58', 'date', 'datetime'],\n  certOrder: ['name', 'subject', 'score', 'category'],\n  authOrder: ['name', 'website'],\n  extraDataTypes: { ///comments // recommendations //file //expires\n    image: 'base58',\n    file: 'base58',\n    url: 'string',\n    date1: 'date',\n    date2: 'date',\n    location: 'string',\n    datetime1: 'datetime',\n    datetime2: 'datetime',\n    comments: 'string'\n  },\n  extraDataKeysExample: {\n    url: 'google.com',\n    comments: 'Student was very hardworking.',\n    location: 'Institute Hall, IIEST Shibpur, Howrah'\n  },\n  dataTypesExample: {\n    base58: 'IPFS Hash like QmQ9kasfzNTwbxGXSRyCp1WFdBXScpHNKDjrUPSWw3VR4z',\n    date: 'DD/MM/YYYY like 23/01/2020',\n    datetime: 'Unix timestamp like 1580476565'\n  },\n  managerAddress: '0xc8e1f3b9a0cdfcef9ffd2343b943989a22517b26',\n  TX_STATUS_ENUM: {\n    NOT_INITIATED: 0,\n    SIGNING: 1,\n    WAITING_FOR_CONFIRMATION: 2,\n    CONFIRMED: 3\n  },\n  AUTHORITY_STATUS_ENUM: {\n    NOT_AUTHORISED: 0,\n    AUTHORISED: 1,\n    MIGRATED: 2,\n    SUSPENDED: 3\n  }\n};\n\nswitch (env.network) {\n  case 'homestead':\n    env.networkId = 1;\n    break;\n  case 'kovan':\n    env.networkId = 42;\n    break;\n}\n\nmodule.exports = env;\n","import { dataTypes, certOrder, authOrder, extraDataTypes, certificateContract, network } from './env';\n\nconst ethers = require('ethers');\nconst bs58 = require('bs58');\n\nexport function bytesToString(bytes) {\n  return ethers.utils.toUtf8String(bytes).split('\\u0000').join('');\n}\n\nexport function parsePackedAddress(packedAddresses) {\n  if(packedAddresses.slice(0,2).toLowerCase() === '0x') packedAddresses = packedAddresses.slice(2);\n  if(packedAddresses.length%40 !== 0) throw new Error('Invalid packed addresses');\n  const addressArray = [];\n  for(let i = 0; i < packedAddresses.length/40; i++) {\n    addressArray.push('0x'+packedAddresses.slice(0+40*i,40+40*i));\n  }\n  return addressArray;\n}\n\nexport function getDataTypeHexByte(type) {\n  const index = dataTypes.indexOf(type);\n  if(index === -1) throw new Error('Invalid certificate data type: ' + type);\n  return index.toString(16);\n}\n\nexport function guessDataTypeFromInput(input) {\n  switch(typeof input) {\n    case 'string':\n      if(input.slice(0,2) === '0x') {\n        return 'bytes';\n      }\n      return 'string';\n    case 'number':\n      if(String(input).split('.')[1]) {\n        return 'float';\n      }\n      return 'number';\n    default:\n      return typeof input;\n  }\n}\n\n// remaining for image and data\n// take number or string and convert it into bytes\nexport function bytify(input, type) {\n  switch(type || guessDataTypeFromInput(input)) {\n    case 'bytes':\n      return input;\n    case 'number':\n      let hex = Number(input).toString(16);\n      if(hex.length % 2 !== 0) {\n          hex = '0'+hex;\n      }\n      return '0x' + hex;\n    case 'float':\n      const numberOfDecimals = (String(input).split('.')[1] || '').length;\n      const decimalByte = bytify(numberOfDecimals, 'number').slice(2);\n      if(decimalByte.length !== 2) throw new Error(`Invalid decimal byte: (${decimalByte})`);\n      const numberWithoutDecimals = Math.round(input * 10**numberOfDecimals);\n      const numberBytes = bytify(numberWithoutDecimals, 'number').slice(2);\n      return '0x' + decimalByte + numberBytes;\n    case 'string':\n      return ethers.utils.hexlify(ethers.utils.toUtf8Bytes(input));\n    case 'boolean':\n      return input ? '0x01' : '0x00';\n    case 'base58':\n      return '0x'+bs58.decode(input).toString('hex');\n    case 'date':\n      if(typeof input === 'string') {\n        input = input.split('/').join('');\n        if(isNaN(Number(input))) throw new Error(`Invalid Date Content (${input})`);\n        if(String(input).length !== 8) throw new Error(`Date should have 8 digits (${input}) (length: ${String(input).length})`);\n        if(String(input).split('.').length > 1) throw new Error(`Date should have no decimal point (${input})`);\n        return bytify(input, 'number');\n      } else if(typeof input === 'object' && input instanceof Date && !isNaN(input)) {\n        let dateStr = String(input.getDate());\n        if(dateStr.length < 2) dateStr = '0'+dateStr;\n        let monthStr = String(input.getMonth()+1);\n        if(monthStr.length < 2) monthStr = '0'+monthStr;\n        let yearStr = String(input.getFullYear());\n        return bytify(`${dateStr}/${monthStr}/${yearStr}`, 'date');\n      } else {\n        throw new Error('Invalid Date Type ' + typeof input);\n      }\n    case 'datetime':\n      if(typeof input === 'string') {\n        input = (new Date(input)).getTime();\n      }\n      return bytify(input, 'number');\n    default:\n      return null;\n  }\n}\n\nexport function renderBytes(hex, type) {\n  switch(type) {\n    case 'bytes':\n      return hex;\n    case 'number':\n      if(hex === '0x') return null;\n      return +hex;\n    case 'float':\n      if(hex === '0x') return null;\n      const decimals = +('0x'+hex.slice(2,4));\n      const number = +('0x'+hex.slice(4));\n      return number / 10**decimals;\n    case 'string':\n      return bytesToString(hex);\n    case 'boolean':\n      return !!(+hex);\n    case 'base58':\n      if(hex.slice(0,2) === '0x') hex = hex.slice(2);\n      return bs58.encode(Buffer.from(hex, 'hex'));\n    case 'date':\n      let date = String(renderBytes(hex, 'number'));\n      if(date.length < 8) date = '0' + date;\n      return date.slice(0,2)+'/'+date.slice(2,4)+'/'+date.slice(4,8);\n    case 'datetime':\n      return (new Date(renderBytes(hex, 'number'))).toLocaleString();\n    default:\n      return hex;\n  }\n}\n\nexport function isProperValue(input) {\n  return ![undefined, null, NaN].includes(input);\n}\n\nexport function isFullRLP(certificateHex) {\n  const decoded = ethers.utils.RLP.decode(certificateHex);\n  return typeof decoded[0] !== 'string';\n}\n\nexport function getCertificateHashFromDataRLP(certificateDataRLP) {\n  const digest = ethers.utils.hexlify(ethers.utils.concat([ethers.utils.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'+(certificateDataRLP.length/2 - 1)),certificateDataRLP]));\n  return ethers.utils.keccak256(digest);\n}\n\nexport function encodeCertificateObject(obj, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  const entries = Object.entries(obj);\n  const certRLPArray = [];\n\n  // adding name and subject into rlpArray\n  certOrder.forEach(property => {\n    if(property === 'score') {\n      // adding score into rlpArray\n      if(isProperValue(obj['score'])) {\n        certRLPArray.push(bytify(+obj['score'], 'float'));\n      } else {\n        certRLPArray.push('0x');\n      }\n    } else {\n      const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n      certRLPArray.push(hex);\n    }\n  });\n\n  const extraData = entries.filter(property => !certOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    certRLPArray.push('');\n    const datatypeIndex = certRLPArray.length - 1;\n    extraData.forEach(property => {\n      const dataType = extraDataTypes[property[0]] || guessDataTypeFromInput(property[1]);\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex]\n        + getDataTypeHexByte(dataType);\n      certRLPArray.push([bytify(property[0]), bytify(property[1], dataType)]);\n    });\n\n    if(certRLPArray[datatypeIndex].length % 2) {\n      certRLPArray[datatypeIndex] = certRLPArray[datatypeIndex] + '0';\n    }\n\n    certRLPArray[datatypeIndex] = '0x' + certRLPArray[datatypeIndex];\n  }\n\n  // console.log(certRLPArray);\n  const dataRLP = ethers.utils.RLP.encode(certRLPArray);\n  return {\n    fullRLP: ethers.utils.RLP.encode([certRLPArray, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function addSignaturesToCertificateRLP(encodedFullCertificate, signature = []) {\n  let signatureArray = typeof signature === 'object' ? signature : [signature];\n  let certificateData;\n  // console.log('in addsig',{encodedFullCertificate, signature});\n  if(typeof encodedFullCertificate === 'object') {\n    if(encodedFullCertificate.dataRLP) {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.dataRLP);\n    } else {\n      certificateData = ethers.utils.RLP.decode(encodedFullCertificate.fullRLP)[0];\n    }\n  } else {\n    const decoded = ethers.utils.RLP.decode(encodedFullCertificate);\n    certificateData = isFullRLP(encodedFullCertificate) ? decoded[0] : decoded;\n    if(decoded.length > 1) {\n      signatureArray = [...decoded.slice(1), ...signatureArray];\n    }\n  }\n  // console.log({signatureArray});\n  const dataRLP = ethers.utils.RLP.encode(certificateData);\n\n  return {\n    fullRLP: ethers.utils.RLP.encode([certificateData, ...signatureArray]),\n    dataRLP,\n    certificateHash: getCertificateHashFromDataRLP(dataRLP)\n  };\n}\n\nexport function decodeCertificateData(encodedCertificate) {\n  let fullRLP = typeof encodedCertificate === 'object' ? encodedCertificate.fullRLP : encodedCertificate;\n  const decoded = ethers.utils.RLP.decode(fullRLP);\n  const parsedCertificate = {};\n\n  let decodedCertificatePart, signatureArray;\n  //checking if decoded is of fullRLP or certificate data part\n  if(typeof decoded[0] === 'string') {\n    decodedCertificatePart = decoded;\n  } else {\n    decodedCertificatePart = decoded[0];\n    signatureArray = decoded.slice(1);\n  }\n\n  decodedCertificatePart.forEach((entry, i) => {\n    if(i < certOrder.length) {\n      if(certOrder[i] !== 'score') {\n        parsedCertificate[certOrder[i]] = ethers.utils.toUtf8String(entry);\n      } else {\n        parsedCertificate[certOrder[i]] = renderBytes(entry, 'float');\n      }\n    } else if(i > certOrder.length){\n      const type = dataTypes[+('0x'+decodedCertificatePart[certOrder.length].slice(1+i-certOrder.length, 2+i-certOrder.length))];\n      // console.log({value: entry[1], type});\n      parsedCertificate[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n\n  const returnObj = { parsedCertificate };\n\n  returnObj.certificateHash = getCertificateHashFromDataRLP(ethers.utils.RLP.encode(decodedCertificatePart));\n\n  if(signatureArray) {\n    returnObj.signatures = signatureArray;\n  }\n\n  return returnObj;\n}\n\nexport function encodeCertifyingAuthority(obj) {\n  const entries = Object.entries(obj);\n  const rlpArray = [];\n\n  authOrder.forEach(property => {\n    const hex = isProperValue(obj[property]) ? bytify(obj[property]) : '0x';\n    rlpArray.push(hex);\n  });\n\n  const extraData = entries.filter(property => !authOrder.includes(property[0]) && isProperValue(property[1]));\n\n  if(extraData.length) {\n    // pushing datatype storage of the extra datas\n    rlpArray.push('');\n    const datatypeIndex = rlpArray.length - 1;\n    extraData.forEach(property => {\n      const dataType = extraDataTypes[property[0]] || guessDataTypeFromInput(property[1]);\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex]\n        + getDataTypeHexByte(dataType);\n      rlpArray.push([bytify(property[0]), bytify(property[1], dataType)]);\n    });\n\n    if(rlpArray[datatypeIndex].length % 2) {\n      rlpArray[datatypeIndex] = rlpArray[datatypeIndex] + '0';\n    }\n\n    rlpArray[datatypeIndex] = '0x' + rlpArray[datatypeIndex];\n  }\n\n  // console.log(rlpArray);\n  return ethers.utils.RLP.encode(rlpArray);\n}\n\nexport function decodeCertifyingAuthority(encodedAuthorityData) {\n  const obj = {};\n  const decoded = ethers.utils.RLP.decode(encodedAuthorityData);\n  decoded.forEach((entry, i) => {\n    if(i < authOrder.length) {\n      obj[authOrder[i]] = ethers.utils.toUtf8String(entry);\n    } else if(i > authOrder.length){\n      const type = dataTypes[+('0x'+decoded[authOrder.length].slice(1+i-authOrder.length, 2+i-authOrder.length))];\n      // console.log({value: entry[1], type});\n      obj[bytesToString(entry[0])] = renderBytes(entry[1], type);\n    }\n  });\n  return obj;\n}\n\nexport async function getCertificateObjFromCertificateHash(certificateHash) {\n  if(!window.provider) window.provider = ethers.getDefaultProvider(network);\n  const logs = await window.provider.getLogs({\n    address: certificateContract.address,\n    fromBlock: 0,\n    toBlock: 'latest',\n    topics: [ethers.utils.id('Certified(bytes32,address)'), certificateHash]\n  });\n\n  if(!logs.length) this.setState({ displayText: 'Certificate not yet registered or it does not exist' });\n\n  let certificateObj, txHashArray = [];\n\n  for(const log of logs) {\n    const txHash = log.transactionHash;\n    const transaction = await window.provider.getTransaction(txHash);\n    const arg = window.certificateContractInstance.interface.decodeFunctionData('registerCertificate(bytes)',transaction.data)[0];\n\n    const decoded = decodeCertificateData(arg);\n    // console.log({decoded, arg})\n\n    if(!certificateObj) {\n      certificateObj = {\n        fullRLP: arg,\n        ...decoded\n      };\n    } else {\n      // console.log('in else', {certificateObj, certObjExpand: addSignaturesToCertificateRLP(\n      //   certificateObj,\n      //   decoded.signatures\n      // )});\n      certificateObj = {\n        ...certificateObj,\n        ...addSignaturesToCertificateRLP(\n          certificateObj,\n          decoded.signatures\n        ),\n        signatures: decoded.signatures\n      };\n    }\n\n    // console.log({certificateObj});\n    if(!txHashArray.includes(txHash)) {\n      txHashArray.push(txHash);\n    }\n  }\n\n  certificateObj.txHashArray = txHashArray;\n\n  return certificateObj;\n}\n\nexport function toTitleCase(str) {\n  return str.split(' ').map(str1 => str1.slice(0,1).toUpperCase()+str1.slice(1)).join(' ');\n}\n\nexport function toWebsiteURL(website) {\n  if(website.slice(0,4) !== 'http') {\n    website = 'http://' + website;\n  }\n  return website;\n}\n","const ethers = require('ethers');\nconst { certificateContract, network, networkId } = require('./env');\n\nconst setGlobalVariables = () => {\n  // console.log(window.web3.currentProvider);\n\n  // window.web3.currentProvider.networkVersion;\n  // === (network === 'homestead' ? '1' : '42');\n\n  /// set this\n\n  window.signer = (new ethers.providers.Web3Provider(window.ethereum)).getSigner();\n\n  if(window.web3.currentProvider.networkVersion == networkId) {\n    window.certificateContractInstance = new ethers.Contract(\n      certificateContract.address,\n      certificateContract.abi,\n      window.signer\n    );\n    window.onCorrectNetwork = true;\n  } else {\n    window.certificateContractInstance = new ethers.Contract(\n      certificateContract.address,\n      certificateContract.abi,\n      ethers.getDefaultProvider(network)\n    );;\n    window.onCorrectNetwork = false;\n  }\n\n  window.signer.getAddress().then(address => window.userAddress = address);\n\n  // window.userAddress = signer;//.then(address => window.userAddress = address);\n}\n\nconst setUpMetamask = () => {\n  try {\n    window.ethereum.enable().then(() => {\n      setGlobalVariables();\n\n      window.ethereum.on('accountsChanged', function (accounts) {\n        // window.location.reload();\n        setGlobalVariables();\n      });\n\n      window.ethereum.autoRefreshOnNetworkChange = false;\n    });\n\n\n\n    setInterval(() => {\n      if(window.web3 && window.web3.currentProvider && window.web3.currentProvider.selectedAddress && window.userAddress && window.web3.currentProvider.selectedAddress.toLowerCase() !== window.userAddress.toLowerCase()) {\n        setGlobalVariables();\n      }\n    },100);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nwindow.certificateContractInstance = new ethers.Contract(\n  certificateContract.address,\n  certificateContract.abi,\n  ethers.getDefaultProvider(network)\n);\n\nif(window.ethereum) {\n  const intervalId = setInterval(() => {\n    if(setUpMetamask()) {\n      console.log('Metamask setup done!');\n      clearInterval(intervalId);\n    }\n  }, 100);\n}\n\n\n\n\n// export { networkId, certificateContractInstance };\n","import React, { Component } from 'react';\nimport { network, certificateContract, networkId } from '../../env';\n\nconst METAMASK_ENUM = {\n  NOT_INSTALLED: 0,\n  INSTALLED_BUT_NOT_CONNECTED: 1,\n  CONNECTED: 2,\n  OTHER_NETWORK: 3\n};\n\nexport default class extends Component {\n  state = {\n    metamaskStatus: METAMASK_ENUM.NOT_INSTALLED\n  };\n\n  componentDidMount = () => {\n    this.intervalId = setInterval(() => {\n      let latestStatus = METAMASK_ENUM.NOT_INSTALLED;\n      if(window.ethereum) {\n        latestStatus = METAMASK_ENUM.INSTALLED_BUT_NOT_CONNECTED;\n      }\n      if(window.signer) {\n        latestStatus = METAMASK_ENUM.CONNECTED;\n      }\n      if(window.signer && window.web3.currentProvider.networkVersion != networkId) {\n        latestStatus = METAMASK_ENUM.OTHER_NETWORK;\n      }\n      if(this.state.metamaskStatus !== latestStatus) {\n        this.setState({ metamaskStatus: latestStatus });\n      }\n    }, 300);\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  }\n\n  render = () => (\n    <>\n      <div className=\"status-message\">\n        <h1>Welcome to CertiÐApp</h1>\n        <p>CertiÐApp is an Ethereum Blockchain powered Certificate Issuance and Verification Smart Contract.</p>\n        <div style={{padding:'0 10%'}}>\n        {(() => {\n          switch(this.state.metamaskStatus) {\n            case METAMASK_ENUM.NOT_INSTALLED:\n              return (\n                <p className=\"error-message\">You will need <a className=\"link\" href=\"https://metamask.io/\" rel=\"noopenner noreferrer\" target=\"_blank\">Metamask</a> installed if you want to register your certificate.</p>\n              );\n            case METAMASK_ENUM.INSTALLED_BUT_NOT_CONNECTED:\n              return (\n                <p className=\"error-message\">Seems you have Metamask installed, please select Connect in Metamask. If it was previously cancelled, then please refresh the page.</p>\n              );\n            case METAMASK_ENUM.CONNECTED:\n              return (\n                <p className=\"success-message\">Metamask is connected! Please select a tab from above.</p>\n              );\n            case METAMASK_ENUM.OTHER_NETWORK:\n              return (\n                <p className=\"error-message\">Metamask is connected but the network is different. Please switch to <u>{network}</u> network</p>\n              );\n          }\n        })()}\n        </div>\n      </div>\n\n      <p>Smart Contract Link: <a className=\"link\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/address/${certificateContract.address}#code`} target=\"_blank\">GitHub Repository</a></p>\n\n      <div className=\"home-details\">\n      <h3>Why CertiÐApp</h3>\nCertiÐApp is aims to solve below identified challenges faced by other modes.\n\n<h4>Challenges in traditional certificates</h4>\n<p>Though we are used to our traditional way of having certificates printed on a hard copy, it has some unminded challenges.</p>\n\n<p>As a winner or performer or attender, we receive certificates from the organizers stating with various logos on it (for e.g. Microsoft) whose authority probably doesn't even know about that and wouldn't want unauthorized printing of certificates with use of their logo. How easy is it to download a logo from some website and print it on a piece of paper? How many copies can be made? Just like printed fiat can have fake counterparts circulating around which people unknowingly accept, there can be some unauthorized organizations giving certificates (for e.g. Microsoft certified) for fooling students to make some profit.</p>\n\n<p>On the other side, students/candidates themselves can print a fake certificate on a 300 GSM paper and pose for being accepted to an organization (for e.g. job interview or college interview). As an HR or any verifier out there who is looking to filter candidates have only two options, either rely only on that piece of printed paper for accepting the candidate (who might have faked/forged certificate) or do not trust it by doing a retest of the same (which would consume more time in hiring process).</p>\n\n<p>Though still, a possible workaround for certificate authority (issuer like Microsoft) to make a unique standard of printing which is difficult to print by normal printers and only a special printer can print such certificates (just like notes). This process only makes certificates slightly costlier or difficult to print (by using custom plates). This approach is similar to Security by Obscurity, in which it is assumed that the attacker does not have knowledge of the complexity used for printing. But an intelligent attacker might study the printed certificate and reverse engineer to develop a plate to produce similar print, such that it would be difficult to tell the difference in a genuine and fake certificate.</p>\n\n<h4>CertiÐApp as a solution to above problems</h4>\n<p>CertiÐApp aims to solve the authenticity-related problems using Kerckhoff's Principle of Cryptography. Here, instead of having complicated and secret printing process, we use a publicly known Elliptic Curve Digital Signature Algorithm (ECDSA). Here every certifier needs to hold a secret key which they will use to generate signature for every certificate they would sign.</p>\n\n<h4>How much secure is it?</h4>\n<p>Anyone else trying to fake someone's signature for a particular certificate would find it very difficult because odds of this happening is 1 in 1000000...(154 zeros) tries. An usual laptop is estimated to take around 10143 years to forge a fake signature for a particular certificate. If we assume combination of every computer in the world to fake a signature, it would take around 10130 years. For instance, age of Earth is approximately 1010. Hence it is not feasible to forge a certificate signature.</p>\n\n<p>While with traditional certificates, reverse engineering a complex printing setup to create fake but almost real looking certificates is quick like at most a week or a month for an printing expert. It's pretty easy to conclude our traditional way is broken and CertiÐApp solves these problems.</p>\n\n<p>You can check the technical details in the <a className=\"link\" href=\"https://github.com/KMPARDS/certificate-contract\" rel=\"noopenner noreferrer\" target=\"_blank\">GitHub Repository</a></p>\n\n</div>\n    </>\n  );\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NavigationElement = props => {\n  const urlFormat = props.path !== undefined ? props.path : props.heading.toLowerCase().split(' ').join('-');\n\n  return (\n    <button className={`navigation-element${props.location.pathname === `/${urlFormat}` ? ' active' : ''}`} style={{cursor: 'pointer'}} onClick={() => props.history.push(`/${urlFormat}`)}>{props.heading}</button>\n  );\n};\n\nexport default withRouter(NavigationElement);\n","import React, { Component } from 'react';\nimport NavigationElement from './NavigationElement';\nimport './Navigation.css';\nimport { managerAddress } from '../../env';\n\nexport default class extends Component {\n  state = {\n    isManager: false,\n    showAllItems: true,\n    displayHideButton: false,\n    managerAddress: null,\n    invalidNetwork: false\n  };\n\n  componentDidMount = () => {\n    const setManager = async() => {\n      if(window.certificateContractInstance) {\n        const managerAddress = await window.certificateContractInstance.functions.manager();\n        this.state.managerAddress = managerAddress;\n        return true;\n      }\n      return false;\n    }\n\n    const intervalId = setInterval(async() => {\n      if(await setManager()) {\n        // console.log('setManager cleared');\n        clearInterval(intervalId);\n      }\n    }, 100);\n\n    const intervalId2 = setInterval(() => {\n      try {\n        const navigationGroup = document.querySelector('.navigation-group');\n        if(navigationGroup) {\n          if(navigationGroup.offsetHeight > 56) {\n            this.setState({ displayHideButton: true });\n          } else {\n            this.setState({ displayHideButton: !this.state.showAllItems });\n          }\n        }\n\n        /// change the navbar color during incorrect network\n\n        const isManager = !!window.web3 && !!window.web3.currentProvider && !!this.state.managerAddress && this.state.managerAddress.toLowerCase() === window.web3.currentProvider.selectedAddress.toLowerCase();\n        if(isManager !== this.state.isManager) {\n          this.setState({ isManager });\n        }\n      } catch (error) {\n        // clearInterval(intervalId2);\n      }\n    }, 100);\n  };\n\n  render = () => (\n    <div className=\"navigation-group\">\n      {this.state.showAllItems ? <>\n        <NavigationElement heading=\"Home\" path=\"\" />\n        <NavigationElement heading=\"Register Certificate\" />\n        <NavigationElement heading=\"View Certificate\" />\n        {this.state.isManager ? <NavigationElement heading=\"Add Certifier\" /> : null}\n        <NavigationElement heading=\"List Authorities\" />\n        <NavigationElement heading=\"Sign Certificate\" />\n      </> : null}\n      {this.state.displayHideButton ? <button\n        className=\"navigation-element\"\n        style={{cursor: 'pointer'}}\n        onClick={() => this.setState({ showAllItems: !this.state.showAllItems })}\n      >\n        {this.state.showAllItems\n          ? <>Hide Menu Items</>\n          : <>Show Menu Items</>}\n      </button> : null}\n    </div>\n  );\n\n}\n","import React, { Component } from 'react';\nimport { AUTHORITY_STATUS_ENUM } from '../../env';\nimport './CertificateBox.css';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    loading: true,\n    signerAddress: null,\n    name: null,\n    website: null,\n    status: null,\n    image: null\n  };\n\n  componentDidMount = async() => {\n    const signerAddress = ethers.utils.recoverAddress(this.props.certificateHash, this.props.signature);\n    this.setState({ signerAddress });\n    // console.log({signer});\n    const certifyingAuthority = await window.certificateContractInstance.certifyingAuthorities(signerAddress);\n    // console.log('certifyingAuthority', certifyingAuthority);\n\n    let caObj;\n    if(certifyingAuthority.data !== '0x') {\n      caObj = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n    } else {\n      caObj = { name: null, website: null };\n    }\n\n    this.setState({\n      name: caObj.name,\n      website: caObj.website ? window._z.toWebsiteURL(caObj.website) : null,\n      status: certifyingAuthority.status,\n      image: caObj.image || null,\n      loading: false\n    });\n\n    console.log('found', certifyingAuthority.isAuthorised);\n    // if(this.props.validCertificate[0] !== false) {\n    //   console.log('i marked it', certifyingAuthority.isAuthorised);\n    //   this.props.validCertificate[1](certifyingAuthority.isAuthorised);\n    // }\n    if(certifyingAuthority.status === AUTHORITY_STATUS_ENUM.AUTHORISED) {\n      this.props.validCertificate[1]((this.props.validCertificate[0] || 0)+1);\n    }\n  };\n\n  render = () => {\n    let signerAuthorisedClass;\n    if(this.state.loading) {\n      signerAuthorisedClass = 'loading';\n    } else if(\n      this.state.status === AUTHORITY_STATUS_ENUM.AUTHORISED\n        || this.state.status === AUTHORITY_STATUS_ENUM.MIGRATED\n    ) {\n      signerAuthorisedClass = 'valid';\n    } else if(this.state.status === AUTHORITY_STATUS_ENUM.SUSPENDED) {\n      signerAuthorisedClass = 'suspended';\n    } else {\n      signerAuthorisedClass = 'invalid';\n    }\n\n    const signerElement = (\n      <>\n        <p>Signer {this.props.serial}: {this.state.name ? <><span className=\"mono\">{this.state.name}</span>{this.state.website ? <a href={this.state.website} rel=\"noopenner noreferrer\" target=\"_blank\" style={{textDecoration: 'none'}}> <img style={{display:'inline',height: '1rem'}} src={'share.png'} /></a> : null} (<span className=\"mono\">{this.state.signerAddress.slice(0,6)}</span>...<span className=\"mono\">{this.state.signerAddress.slice(38)}</span>)</> : (this.state.signerAddress ? <><span className=\"mono\">{this.state.signerAddress}</span></> : <>Computing address...</>)}</p>\n        <p>Signature: <span className=\"mono\">{this.props.signature.slice(0,10)}</span>...<span className=\"mono\">{this.props.signature.slice(122)}</span></p>\n      </>\n    );\n\n    return (\n      <div className={['signer-box', signerAuthorisedClass].filter(className=>!!className).join(' ')}>\n        {this.state.image ? <div className=\"row\" style={{display:'inline-block', width:'80%'}}>\n          <div className=\"column2\" style={{textAlign: 'right'}}>\n            <img className=\"certificate-signer-img\" src={'https://ipfs.infura.io/ipfs/'+this.state.image} />\n          </div>\n          <div className=\"column1\">\n            <div style={{textAlign: 'left', marginLeft: '1rem'}}>\n              {signerElement}\n            </div>\n          </div>\n        </div> : signerElement}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport SignerBox from './SignerBox';\nimport './CertificateBox.css';\nimport { network, certOrder } from '../../env';\n\nconst QRCode = require('qrcode');\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    validCertificate: (this.props.validCertificate&&this.props.validCertificate[0]) || null,\n    isAlreadyRegistered: null\n  };\n\n  componentDidMount = async() => {\n    setInterval(() => {\n      if(this.props.validCertificate && this.state.validCertificate !== this.props.validCertificate[0]) {\n        this.setState({ validCertificate: this.props.validCertificate[0] });\n      }\n    }, 100);\n    if(this.props.qrDisplay) QRCode.toCanvas(document.getElementById('qrcode-canvas'), window.location.href);\n\n    const certificate = await window.certificateContractInstance.certificates(this.props.certificateObj.certificateHash);\n\n    this.setState({ isAlreadyRegistered: certificate.signers !== '0x' });\n  }\n\n  render = () => {\n    const pc = this.props.certificateObj.parsedCertificate;\n    return (\n      <div className=\"certificate-box\" id=\"printable\">\n        <Helmet>\n          <title>{pc.name} is certified on Blockchain</title>\n          <meta\n            name=\"description\"\n            content=\"View certifications on blockchain\"\n          />\n        </Helmet>\n        <div className=\"certificate-container\">\n          {this.props.preview ? <p className=\"preview\">{this.state.isAlreadyRegistered ? <>Seems that this certificate is already registered and available at <a style={{cursor: 'pointer'}} onClick={() => this.props.history.push(`view-certificate/${this.props.certificateObj.certificateHash}`)}>https://kmpards.github.io/certidapp/view-certificate/{this.props.certificateObj.certificateHash}</a>. The smart contract will again accept this certificate only if there are more signers otherwise it will raise an exception.</> : <>{(this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0) ? <>Note: This is only a preview of the certificate, please register the certificate.</> : <>This is a preview of the entered certificate hex data.</>}</>}</p> : null}\n          {pc.category ? <p className=\"category\">Certificate of <span className=\"category mono\">{pc.category}</span></p> : null}\n\n          <p className=\"category-subtext\">{!pc.category ? <>This certificate </> : null}is awarded{pc.name ? <> to</> : null}</p>\n\n          {pc.name ? <p className=\"name mono\">{pc.name}</p> : null}\n\n          {\n            pc.score || pc.subject || pc.date1 || pc.datetime1\n            ? <p>{pc.score || pc.subject || pc.category ? <>For </> : null}{\n              pc.category || pc.score\n              ? <>{\n                pc.score !== null\n                ? <>Acheiving <span className=\"score mono\">{pc.score}%</span></>\n                : <>Extraordinary</>\n              } <span className=\"mono\">{pc.category}</span> {\n                pc.subject\n                ? <>{\n                  pc.name\n                  ? <>in</>\n                  : <>of</>\n                } </>\n                : null\n              }<span className=\"subject mono\">{pc.subject}</span></>\n              : null\n            }{\n              (() => {\n                const date1 = pc.datetime1\n                  || pc.date1;\n                const date2 = pc.datetime2\n                  || pc.date2;\n                const DateEl = props => <span className=\"date mono\">{props.children}</span>\n                console.log({date1, date2});\n                if(date1 && date2) {\n                  return <> from <DateEl>{date1}</DateEl> to <DateEl>{date2}</DateEl></>;\n                } else if(date1 && !date2) {\n                  return <> on <DateEl>{date1}</DateEl></>;\n                } else if(!date1 && date2) {\n                  return <> till <DateEl>{date2}</DateEl></>\n                } else {\n                  return null;\n                }\n              })()\n            }{\n              pc.location\n              ? <> at <span className=\"location mono\">{pc.location}</span></>\n              : null\n            }.</p>\n            : null\n          }\n\n          {Object.keys(pc).filter(key => ![...certOrder, 'date1', 'date2', 'location'].includes(key)).map(key => (\n            <p key={'cert-'+key} className={key}>{key}: {pc[key]}</p>\n          ))}\n\n\n          <p>{this.state.validCertificate === (this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n            ? <>The above certificate information is signed by following <span className=\"mono\">{this.state.validCertificate}</span> <span className=\"mono\">signer{this.state.validCertificate > 1 ? <>s</>:null}\n            </span> which is cryptographically verified by the certificate smart contract.</>\n            : (\n              0 < this.state.validCertificate\n              && this.state.validCertificate < (this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n              ? <>Seems that this certificate is signed by only {this.state.validCertificate} valid signers out of {this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0} total signers, you can remove signatures of unauthorised signers.</>\n              : <>There are no authorised signatures on this certificate.</>\n            )}</p>\n\n          {(this.props.certificateObj.signatures ? this.props.certificateObj.signatures.length : 0)\n          ? <>\n            {this.props.certificateObj.signatures.map((signature, i) => (\n              <SignerBox\n                key={'signer-'+i}\n                serial={i+1}\n                certificateHash={this.props.certificateObj.certificateHash}\n                signature={signature}\n                validCertificate={this.props.validCertificate || [this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n                />\n            ))}\n          </>\n          : null}\n\n          {(() => {\n            let content = (\n              <>\n              <p className=\"hash\">Certificate Hash: <span className=\"mono\">{this.props.certificateObj.certificateHash}</span></p>\n              {this.props.certificateObj.txHashArray ? <p>Created at transaction{this.props.certificateObj.txHashArray.length > 1 ? <>s</> : null}\n              {this.props.certificateObj.txHashArray.map(txHash => (\n                <span key={'txHash-'+txHash}><br />\n                  <span className=\"mono\">{txHash.slice(0,6)}</span>...<span className=\"mono\">{txHash.slice(62)}</span>. <a className=\"link-black\" target=\"_blank\" rel=\"noopenner noreferrer\" href={`https://${network === 'homestead' ? '' : network+'.'}etherscan.io/tx/${txHash}`}>View on EtherScan</a></span>\n              ))}\n              </p> : null}\n                </>\n            );\n\n            if(this.props.qrDisplay) {\n              content = (\n                <div className=\"row\">\n                  <div className=\"column1\">\n                    {content}\n                  </div>\n                  <div className=\"column2\">\n                    <div className=\"qrcode-canvas-container\">\n                    <canvas id=\"qrcode-canvas\" />\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n\n            return content;\n          })()}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport { TX_STATUS_ENUM } from '../../env';\n\nexport default class extends Component {\n  state = {\n    certificateString: '',\n    textAreaClass: null,\n    parsingWait: false,\n    certificateObj: null,\n    validCertificate: null,\n    txStatus: TX_STATUS_ENUM.NOT_INITIATED,\n    errorMessage: ''\n  };\n\n  timeoutId = null;\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  }\n\n  onRegister = async() => {\n    this.setState({ txStatus: TX_STATUS_ENUM.SIGNING, errorMessage: '' });\n    try {\n      const tx = await window.certificateContractInstance.functions.registerCertificate(this.state.certificateString);\n      this.setState({ txStatus: TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION });\n      await tx.wait();\n      this.setState({ txStatus: TX_STATUS_ENUM.CONFIRMED });\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${this.state.certificateObj.certificateHash}`);\n      },1000);\n    } catch (error) {\n      this.setState({ txStatus: TX_STATUS_ENUM.NOT_INITIATED, errorMessage: error.message });\n    }\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>Register Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"Register your certificate on Blockchain\"\n        />\n      </Helmet>\n      <p className=\"status-message\">If you have a certificate hex string, you can paste it in the below text box to decode it. You can also use the below Register Certificate button to submit the certificate hex string to the Smart Contract.<br /><br />If you don't have a certificate hex string and you want a certificate, then you can ask any organisation around you that gives traditional printed certificates to switch to blockchain based secure certificates using CertiÐApp.</p>\n      <p>Paste your signed certificate in the below box:</p>\n      <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n      <br />\n      {this.state.parsingWait\n        ? <p>Please wait parsing your certificate...</p>\n        : null}\n\n      {this.state.certificateObj\n        ? <>\n          <p>Your certificate preview:</p>\n          <CertificateBox\n            certificateObj={this.state.certificateObj}\n            qrDisplay={false}\n            validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n            preview={true}\n            history={this.props.history}\n            />\n        </>\n        : null}\n\n      {this.state.validCertificate\n        ? <>\n\n        </>\n        : <></>}\n\n        {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n\n        <button\n          className=\"btn\"\n          disabled={this.state.txStatus !== TX_STATUS_ENUM.NOT_INITIATED || (false && this.state.validCertificate !== (this.state.certificateObj && this.state.certificateObj.signatures && this.state.certificateObj.signatures.length))}\n          onClick={this.onRegister}\n        >\n          {(() => {\n            switch(this.state.txStatus) {\n              case TX_STATUS_ENUM.NOT_INITIATED:\n                return 'Register Certificate';\n              case TX_STATUS_ENUM.SIGNING:\n                return 'Signing transaction..';\n              case TX_STATUS_ENUM.WAITING_FOR_CONFIRMATION:\n                return 'Waiting for confirmation...';\n              case TX_STATUS_ENUM.CONFIRMED:\n                return 'Certificate is registered!';\n            }\n          })()}\n        </button>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\n\nconst ethers = require('ethers');\n\nconst HASH_CHECKING_ENUM = {\n  NOT_CHECKING: 0,\n  CHECKING: 1,\n  FOUND_VALID: 2,\n  FOUND_INVALID: 3\n};\n\nexport default class extends Component {\n  state = {\n    userEnteredHash: '',\n    inputError: false,\n    recentCertificateHashes: [],\n    displayText: '',\n    hashCheckStatus: 0\n  };\n\n  componentDidMount = async() => {\n    const logs = await window.provider.getLogs({\n      address: certificateContract.address,\n      fromBlock: 0,\n      toBlock: 'latest',\n      topics: [ethers.utils.id('Certified(bytes32,address)')]\n    });\n\n    console.log(logs);\n\n    this.setState({\n      recentCertificateHashes: logs.map(log => log.topics[1]).filter((item, i, a) => a.indexOf(item) === i).reverse().slice(0,3)\n    });\n\n  };\n\n  onVerifyCertificate = async() => {\n    this.setState({ inputError: false, hashCheckStatus: HASH_CHECKING_ENUM.CHECKING });\n    try {\n      let hash = this.state.userEnteredHash.split(' ').join('').split('\\n').join('');\n\n      try {\n        ethers.utils.hexlify(hash)\n      } catch(error) {\n        try {\n          ethers.utils.hexlify(hash+'0')\n        } catch (error) {\n          throw new Error('Hash should contain only allowed characters');\n        }\n      }\n\n      if(hash.length !== 66) throw new Error('Invalid hash length');\n\n      let certificateStruct;\n\n      try {\n        certificateStruct = await window.certificateContractInstance.functions.certificates(hash);\n      } catch (error) {\n        console.log(error);\n        throw new Error('Network error');\n      }\n\n      // window.certificates[hash] = window._z.decodeCertificateData(certificateObj.data);\n\n      if(certificateStruct.signers === '0x') throw new Error('Certificate not yet registered or it does not exist');\n\n      this.setState({ hashCheckStatus: HASH_CHECKING_ENUM.FOUND_VALID });\n\n      setTimeout(() => {\n        this.props.history.push(`view-certificate/${hash}`);\n      }, 400);\n    } catch(error) {\n      this.setState({\n        inputError: true,\n        displayText: 'Error: '+error.message,\n        hashCheckStatus: HASH_CHECKING_ENUM.NOT_CHECKING\n      });\n    }\n\n  };\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>View Certificate</title>\n        <meta\n          name=\"description\"\n          content=\"View certificates on Blockchain\"\n        />\n      </Helmet>\n      <p className=\"status-message\">This section is used to view an already registered certificate. Using the below box, you can view an already registered certificate with CertiÐApp Smart Contract on Ethereum Blockchain. You need a certificate hash to proceed. If you don't have a certificate hash, please ask the certificate holder (whose certificate you want to see) to give you hash of their certificate.</p>\n\n      <div style={{margin: '3rem 0'}}>\n        Paste the certificate hash in the box below:<br />\n        <input\n          className={`certificate-textinput${this.state.inputError ? ' invalid' : ''}`}\n          type=\"text\"\n          placeholder=\"Enter Certificate Hash\"\n          onChange={event => {\n            this.setState({\n              userEnteredHash: event.target.value,\n              inputError: false,\n              hashCheckStatus: HASH_CHECKING_ENUM.NOT_CHECKING,\n              displayText: ''\n            });\n          }}\n          />\n        {this.state.displayText ? <p className={this.state.inputError ? 'error-message' : 'status-message'}>{this.state.displayText}</p> : null}\n        <button className=\"btn\" disabled={this.state.hashCheckStatus !== 0} onClick={this.onVerifyCertificate}>{(() => {\n          switch(this.state.hashCheckStatus) {\n            case HASH_CHECKING_ENUM.CHECKING:\n              return 'Checking hash...';\n            case HASH_CHECKING_ENUM.FOUND_VALID:\n              return 'Accessing certificate fields...';\n            default:\n              return 'Verify Certificate';\n          }\n        })()}</button>\n      </div>\n\n      {this.state.recentCertificateHashes.length\n        ? <div className=\"form-group\">\n        <p>Or you can also check out some recent certificate hashes...</p>\n        {this.state.recentCertificateHashes.map((hash,i) => (\n          <p key={`recent-certificates-${hash}`} className=\"mono\">{hash}</p>\n        ))}\n      </div> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { certificateContract } from '../../../env';\nimport CertificateBox from '../../CertificateBox/CertificateBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    displayText: 'Please wait...',\n    loading: true,\n    certificateObj: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      let hash = this.props.match.params.hash.split(' ').join('').split('\\n').join('');\n\n      try {\n        ethers.utils.hexlify(hash)\n      } catch(error) {\n        try {\n          ethers.utils.hexlify(hash+'0')\n        } catch (error) {\n          throw new Error('Hash should contain only allowed characters');\n        }\n      }\n\n      if(hash.length !== 66) throw new Error('Invalid hash length');\n\n      try {\n        const certificateObj = await window._z.getCertificateObjFromCertificateHash(this.props.match.params.hash);\n\n        this.setState({ loading: false, displayText: '', certificateObj})\n      } catch (error) {\n        throw new Error('The certificate is not yet registered or it does not exist.');\n      }\n    } catch (error) {\n      this.setState({ displayText: 'Error: '+error.message });\n    }\n  };\n\n  render = () => (\n    <>\n      {this.state.displayText ? <p>{this.state.displayText}</p> : null}\n      {!this.state.loading && this.state.certificateObj ? <CertificateBox\n        certificateObj={this.state.certificateObj}\n        qrDisplay={true}\n      /> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { AUTHORITY_STATUS_ENUM } from '../../env';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    address: '',\n    name: '',\n    website: '',\n    image: '',\n    errorMessage: '',\n    statusMessage: ''\n  };\n\n  onConfirmClick = async() => {\n    this.setState({ errorMessage: '', statusMessage: '' })\n    try {\n      const address = ethers.utils.getAddress(this.state.address);\n      const encoded = window._z.encodeCertifyingAuthority({\n        name: this.state.name,\n        website: this.state.website.split(' ').join(''),\n        image: this.state.image\n      });\n\n      const tx = await window.certificateContractInstance.functions.updateCertifyingAuthority(\n        address,\n        encoded,\n        AUTHORITY_STATUS_ENUM.AUTHORISED\n      );\n\n      this.setState({\n        statusMessage: 'Tx sent waiting for confirmation...',\n        errorMessage: ''\n      });\n\n      await tx.wait();\n\n      this.setState({ statusMessage: 'Certifier is Added!', errorMessage: '' })\n    } catch(error) {\n      this.setState({ errorMessage: error.message, statusMessage: '' })\n    }\n  }\n\n  render = () => (\n    <div>\n      <Helmet>\n        <title>Add Certifier</title>\n        <meta\n          name=\"description\"\n          content=\"Add Certification Authority to certify.\"\n        />\n      </Helmet>\n      <p className=\"status-message\">Using this section, the CertiÐApp Manager can update KYC of certifying authorities.</p>\n      <div className=\"form-group\">\n        <p>Enter Address of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Address\"\n          onChange={event => this.setState({address: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Name of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"New Certifier Name\"\n          onChange={event => this.setState({name: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter Website of new certifier:</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"Certifier Website\"\n          onChange={event => this.setState({website: event.target.value})}/>\n      </div>\n\n      <div className=\"form-group\">\n        <p>Enter IPFS Hash of Logo of Certifying Authority (optional):</p>\n        <input\n          className=\"certificate-textinput\"\n          type=\"text\"\n          placeholder=\"IPFS Hash of Logo\"\n          onChange={event => this.setState({image: event.target.value})}/>\n        {this.state.image ? <img style={{maxHeight:'200px', maxWidth:'200px'}} src={`https://ipfs.infura.io/ipfs/${this.state.image}`} /> : null}\n      </div>\n\n      {this.state.errorMessage ? <p className=\"error-message\">Error: {this.state.errorMessage}</p> : null}\n\n      {this.state.statusMessage ? <p className=\"status-message\">Status: {this.state.statusMessage}</p> : null}\n\n      <button className=\"btn\" onClick={this.onConfirmClick}>Confirm New Certifier</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  state = {\n    obj: null,\n    isAuthorised: null\n  };\n\n  componentDidMount = async() => {\n    try {\n      const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(this.props.address);\n      // console.log(certifyingAuthority);\n      const obj = window._z.decodeCertifyingAuthority(certifyingAuthority.data);\n      this.setState({ obj, isAuthorised: certifyingAuthority.isAuthorised });\n    } catch (error) {\n      console.error(error);\n      this.setState({ name: 'Failed to load name...' });\n    }\n  }\n\n  render = () => {\n    const certifierElement = (\n      <>\n      {this.state.obj ? <>\n        {Object.entries(this.state.obj).map((entry, i) => (\n          <p key={'ca-property-'+i}>{window._z.toTitleCase(entry[0])}: {entry[0] === 'website' ? <a className=\"link\" href={window._z.toWebsiteURL(entry[1])} rel=\"noopenner noreferrer\" target=\"_blank\">{entry[1]}</a> : <>{entry[1]}</>}</p>\n        ))}\n      </> : <>Loading...</>}\n      <p>Signing Address: {this.props.address}</p>\n      <p>Is Authorized: {this.state.isAuthorised === null ? 'Loading...' : (\n        this.state.isAuthorised ? 'Yes' : 'No'\n      )}</p>\n      </>\n    );\n\n    return (\n      <>\n        <div className=\"form-group mono row\">\n          {this.state.obj && this.state.obj.image ? <div>\n            <div className=\"column2\">\n              <img style={{maxHeight:'200px', maxWidth:'200px'}} src={'https://ipfs.infura.io/ipfs/'+this.state.obj.image} />\n            </div>\n            <div className=\"column1\" style={{textAlign: 'left'}}>\n              <div style={{marginLeft: '1rem'}}>\n                {certifierElement}\n              </div>\n            </div>\n          </div> : certifierElement}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certificateContract } from '../../env';\nimport CertifierBox from './CertifierBox';\n\nconst ethers = require('ethers');\n\nexport default class extends Component {\n  state = {\n    certifiers: [],\n    loading: true,\n    errorMessage: ''\n  };\n\n  componentDidMount = async() => {\n    try {\n      const logs = await window.provider.getLogs({\n        address: certificateContract.address,\n        fromBlock: 0,\n        toBlock: 'latest',\n        topics: [ethers.utils.id('AuthorityStatusUpdated(address,uint8)')]\n      });\n      // console.log(logs);\n      this.setState({\n        certifiers: logs.map(log => ethers.utils.hexZeroPad(ethers.utils.hexStripZeros(log.topics[1]), 20)).filter((address, i, self) => self.indexOf(address) === i),\n        loading: false\n      });\n    } catch (error) {\n      this.setState({ errorMessage: error.message });\n    }\n  }\n\n  render = () => (\n    <>\n      <Helmet>\n        <title>List of Certification Authorities</title>\n        <meta\n          name=\"description\"\n          content=\"See all certification authorities\"\n        />\n      </Helmet>\n      <p className=\"status-message\">This page contains list of all verified certifying authority wallets who have completed their KYC.</p>\n\n      {this.state.loading\n        ? <>Please wait loading certifying authorities...</>\n        : <>\n          {this.state.certifiers.length ? <>{this.state.certifiers.map((address,i) => (\n            <CertifierBox key={`certifier-${address}${i}`} address={address} />\n          ))}</> : <>No certifying authorities currently.</>}\n        </>}\n    </>\n  );\n}\n","import React from 'react';\n\nconst CSVReader = ({\n  inputId,\n  style,\n  onFileLoaded,\n  onError\n}) => {\n  let fileContent = undefined;\n\n  const handleChangeFile = e => {\n    try {\n      let reader = new FileReader();\n      const filename = e.target.files[0].name;\n\n      reader.onload = event => {\n        // const csvData = PapaParse.parse(\n        //   ,\n        //   Object.assign(parserOptions, {\n        //     error: onError\n        //   })\n        // );\n        onFileLoaded(event.target.result, filename);\n      };\n\n      reader.readAsText(e.target.files[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        id={inputId}\n        style={style}\n        accept=\".csv, text/csv\"\n        onChange={e => handleChangeFile(e)}\n      />\n    </div>\n  );\n};\n\nexport default CSVReader;\n","import React, { Component } from 'react';\n\nconst MONTH = {\n  1: {name: 'Jan', days: 31},\n  2: {name: 'Feb', days: 29},\n  3: {name: 'Mar', days: 31},\n  4: {name: 'Apr', days: 30},\n  5: {name: 'May', days: 31},\n  6: {name: 'Jun', days: 30},\n  7: {name: 'Jul', days: 31},\n  8: {name: 'Aug', days: 31},\n  9: {name: 'Sep', days: 30},\n  10: {name: 'Oct', days: 31},\n  11: {name: 'Nov', days: 30},\n  12: {name: 'Dec', days: 31}\n};\nexport default class extends Component {\n  state = {\n    date: null,\n    month: null,\n    year: null,\n    errorMessage: ''\n  }\n\n  updateState = async obj => {\n    await this.setState({...obj, errorMessage: ''});\n    if(this.props.onChange && this.state.date\n      && this.state.month && this.state.year\n    ) {\n      try {\n        const d = new Date(`${this.state.date} ${MONTH[this.state.month].name} ${this.state.year}`);\n        if(d instanceof Date && isNaN(d)) throw new Error('Invalid Date');\n        // const dateStr = this.state.date+'/'+this.state.month+'/'+this.state.year;\n        this.props.onChange(d);\n      } catch(error) {\n        this.setState({ errorMessage: error.message });\n      }\n    }\n  }\n\n  render = () => (\n    <>\n      <div>\n        Select Date:\n        <select onChange={event => this.updateState({ date: event.target.value })}>\n          <option selected disabled value={null}>Select Date</option>\n          {Array.from(Array(this.state.month ? MONTH[this.state.month].days : 31).keys()).map(key => key+1).map(date => (\n            <option value={date}>{date}</option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Select Month:\n        <select onChange={event => this.updateState({ month: event.target.value })}>\n          <option selected disabled value={null}>Select Month</option>\n          {Array.from(Array(12).keys()).map(key => key+1).map(month => (\n            <option value={month}>{MONTH[month].name}</option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Select Year:\n        <select onChange={event => this.updateState({ year: event.target.value })}>\n          <option selected disabled value={null}>Select Year</option>\n          {Array.from(Array(50).keys()).map(key => key+1951).map(year => (\n            <option value={year}>{year}</option>\n          ))}\n        </select>\n      </div>\n      {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { certOrder, extraDataTypes, extraDataKeysExample, dataTypesExample, AUTHORITY_STATUS_ENUM } from '../../env';\nimport CSVReader from './CSVReader';\nimport DatePicker from '../DatePicker/DatePicker';\nimport CertificateBox from '../CertificateBox/CertificateBox';\nimport copy from 'copy-to-clipboard';\n\nconst ethers = require('ethers');\n\nconst CURRENT_PAGE_ENUM = {\n  SELECT_MODE: 0,\n  SIGN_FRESH_CERTIFICATE: 1,\n  SIGN_ENCODED_CERTIFICATE: 2,\n  SIGN_CSV: 3\n};\n\nexport default class extends Component {\n  state = {\n    currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE,\n    name: '',\n    subject: '',\n    score: '',\n    category: '',\n    errorMessage: '',\n    extraData: [],\n    certificateHex: null,\n    copied: false,\n    authorityName: '',\n    isAuthorised: true,\n    csvKeys: null,\n    certificatesToSign: [],\n    errorsInCSV: '',\n    csvSigning: false,\n    certificatesSigned: []\n  };\n\n  intervalId = null;\n  signerAddress = null;\n\n  componentDidMount = () => {\n    this.intervalId = setInterval(async() => {\n      if(window.signer) {\n        const currentAddress = await window.signer.getAddress();\n        if(currentAddress !== this.signerAddress) {\n          try {\n            const certifyingAuthority = await window.certificateContractInstance.functions.certifyingAuthorities(currentAddress);\n\n            if(certifyingAuthority.status === AUTHORITY_STATUS_ENUM.AUTHORISED) {\n              const authorityName = window._z.decodeCertifyingAuthority(certifyingAuthority.data).name;\n\n              this.setState({ authorityName, isAuthorised: true });\n            } else {\n              this.setState({ authorityName: null, isAuthorised: false });\n            }\n\n\n          } catch(error) {\n            console.error(error);\n          }\n          this.signerAddress = currentAddress;\n        }\n      }\n    }, 100);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  }\n\n  onNewFieldUpdate = () => {\n    try {\n      const encodedCertificate = window._z.encodeCertificateObject({\n        name: this.state.name,\n        subject: this.state.subject,\n        score: this.state.score || null,\n        category: this.state.category,\n        ...Object.fromEntries(this.state.extraData)\n      });\n\n      const certificateObj = window._z.decodeCertificateData(encodedCertificate);\n\n      this.setState({\n        certificateObj,\n        errorMessage: ''\n      });\n    } catch (error) {\n      this.setState({ errorMessage: error.message })\n    }\n  }\n\n  signNewCertificate = async() => {\n    this.setState({ errorMessage: '' });\n    try {\n      let encodedCertificate = window._z.encodeCertificateObject({\n        name: this.state.name,\n        subject: this.state.subject,\n        score: this.state.score || null,\n        category: this.state.category,\n        ...Object.fromEntries(this.state.extraData)\n      });\n\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(encodedCertificate.dataRLP));\n\n      encodedCertificate = window._z.addSignaturesToCertificateRLP(encodedCertificate, signature);\n\n      this.setState({\n        certificateHex: encodedCertificate.fullRLP\n      });\n\n      // console.log('signed',ethers.utils.hexlify(signedCertificateConcat));\n    } catch (error) {\n      console.error(error.message);\n      this.setState({ errorMessage: error.message })\n    }\n  };\n\n  signEncodedCertificate = async() => {\n    const encoded = window._z.encodeCertificateObject(this.state.certificateObj.parsedCertificate);\n\n    const signature = await window.signer.signMessage(ethers.utils.arrayify(encoded.dataRLP));\n\n    const certificateHex = window._z.addSignaturesToCertificateRLP(this.state.certificateString, signature).fullRLP;\n    this.setState({ certificateHex });\n  }\n\n  onTextAreaChange = event => {\n    const spacesRemoved = event.target.value.split(' ').join('').split('\\n').join('');\n    // console.log(spacesRemoved);\n    try {\n      const certificateObj = window._z.decodeCertificateData(spacesRemoved);\n\n      this.setState({\n        certificateString: spacesRemoved,\n        textAreaClass: 'valid',\n        parsingWait: true,\n        validCertificate: null\n      });\n\n      this.timeoutId = setTimeout(() => {\n        this.setState({\n          parsingWait: false,\n          certificateObj\n        });\n      }, 500);\n    } catch (error) {\n      clearTimeout(this.timeoutId);\n      this.setState({\n        textAreaClass: 'invalid',\n        parsingWait: false,\n        certificateObj: null\n      });\n    }\n  };\n\n  onFileLoaded = output => {\n    let errorsInCSV = '';\n    // csv rows: hex, name, subject, score, category\n    let keys = ['hex', ...certOrder];\n    const certificatesToSign = output.split('\\r').join('').split('\\t').join('').split('\\n').map((row, i) => {\n      const columns = row.split(',');\n      if(i === 0 && columns[0] === 'hex') {\n        keys = columns;\n        return;\n      }\n      try {\n        if(columns.length < 1) throw new Error('Not even 1 entry');\n        if(isNaN(+columns[3])) throw new Error(`Invalid score: ${columns[3]}`);\n        const certObj = {};\n        keys.forEach((key, i) => {\n          if(i !== 0) {\n            certObj[key] = columns[i];\n          }\n        });\n        const encodedCertificate = window._z.encodeCertificateObject(certObj);\n        // encodedCertificate.columns = columns;\n        return {encodedCertificate, columns};\n      } catch (error) {\n        errorsInCSV += `Error at row ${i+1}: ${error.message}\\n`;\n      }\n    }).filter(entry => !!entry);\n    console.log({certificatesToSign}, errorsInCSV);\n    this.setState({ csvKeys: keys, certificatesToSign, errorsInCSV });\n  }\n\n  signCSV = async() => {\n    this.setState({ csvSigning: true });\n\n    if(!window.signer) return alert('Signer not available, please connect metamask');\n\n    const arrayOfCertificatesSignedPromises = this.state.certificatesToSign.map(async obj => {\n      const signature = await window.signer.signMessage(ethers.utils.arrayify(obj.encodedCertificate.dataRLP));\n\n      const columns = [...obj.columns];\n      columns[0] = window._z.addSignaturesToCertificateRLP(columns[0] || obj.encodedCertificate.fullRLP, signature).fullRLP;\n\n      // console.log({signature, });\n\n      console.log(signature);\n      return {\n        ...obj,\n        columns\n      };\n    });\n\n    await Promise.all(arrayOfCertificatesSignedPromises);\n\n    const certificatesSigned = [];\n\n    for(const promise of arrayOfCertificatesSignedPromises) {\n      certificatesSigned.push(await promise);\n    }\n\n    console.log('certificatesSigned',certificatesSigned);\n    this.setState({ certificatesSigned, csvSigning: false });\n  };\n\n  downloadCSV = () => {\n    const keys = this.state.csvKeys || ['hex', ...certOrder];\n    const text = keys.join(',')+'\\n'+this.state.certificatesSigned.map(c => {\n      return [\n        ...c.columns,\n      ].join(',')\n    }).join('\\n');\n\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = 'signed_certificates.csv' ;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  render = () => {\n    let screen;\n\n    const header = (\n      <p style={{textAlign: ''}}><button className=\"btn\" onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SELECT_MODE })}>Go Back to Select Mode</button></p>\n    );\n\n    if(this.state.currentScreen === CURRENT_PAGE_ENUM.SELECT_MODE) {\n      screen = (\n        <>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE })}\n          >New Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE })}\n          >Sign Encoded Certificate</button>\n          <button\n            className=\"btn\"\n            onClick={() => this.setState({ currentScreen: CURRENT_PAGE_ENUM.SIGN_CSV })}\n          >CSV Mode</button>\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_FRESH_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <div className=\"form-group\">\n          <p>Enter Name:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Certifiee Name\"\n            onChange={async event => {\n              await this.setState({name: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Subject:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"Enter Subject / Course Name\"\n            onChange={async event => {\n              await this.setState({subject: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Enter Score:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"E.g. 74.89\"\n            onChange={async event => {\n              await this.setState({score: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        <div className=\"form-group\">\n          <p>Certification Type / Category:</p>\n          <input\n            className=\"certificate-textinput\"\n            type=\"text\"\n            placeholder=\"e.g. Participation / Merit / Appreciation\"\n            onChange={async event => {\n              await this.setState({category: event.target.value});\n              this.onNewFieldUpdate();\n            }}/>\n        </div>\n\n        {this.state.extraData.map((entry, i) => (\n          <div className=\"form-group\" key={'extraData-'+i}>\n            <select onChange={async event => {\n              const extraData = [...this.state.extraData];\n              extraData[i][0] = event.target.value;\n              // console.log({extraData});\n              await this.setState({ extraData });\n              this.onNewFieldUpdate();\n            }}>\n              <option selected disabled value={null}>Select Property</option>\n              {Object.keys(extraDataTypes).map((key, j) => (\n                <option key={`extraData-${i}-${j}`} value={key}>{key}</option>\n              ))}\n            </select>\n            <br />\n            {(() => {\n              switch(extraDataTypes[entry[0]]) {\n                case 'date':\n                  return (\n                    <DatePicker\n                      showTimeSelect\n                      onChange={async date => {\n                        const extraData = [...this.state.extraData];\n                        let dateStr = String(date.getDate());\n                        if(dateStr.length < 2) dateStr = '0'+dateStr;\n                        let monthStr = String(date.getMonth()+1);\n                        if(monthStr.length < 2) monthStr = '0'+monthStr;\n                        let yearStr = String(date.getFullYear());\n                        extraData[i][1] = `${dateStr}/${monthStr}/${yearStr}`;\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}\n                      />\n                  );\n                case 'datetime':\n                  return (\n                    <DatePicker\n                      showTimeSelect\n                      onChange={async date => {\n                        const extraData = [...this.state.extraData];\n                        extraData[i][1] = Math.floor(date.getTime() / 1000);\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}\n                    />\n                  );\n                default:\n                  return (\n                    <input\n                      className=\"certificate-textinput\"\n                      type=\"text\"\n                      placeholder={entry[0] === null ? 'Select a property from above' :(extraDataKeysExample[entry[0]] ? `e.g. ${extraDataKeysExample[entry[0]]}` : (dataTypesExample[extraDataTypes[entry[0]]] ? `e.g. ${dataTypesExample[extraDataTypes[entry[0]]]}` : 'Enter value for above property'))}\n                      onChange={async event => {\n                        const extraData = [...this.state.extraData];\n                        extraData[i][1] = event.target.value;\n                        // console.log({extraData});\n                        await this.setState({ extraData });\n                        this.onNewFieldUpdate();\n                      }}/>\n                  );\n              }\n            })()}\n          </div>\n        ))}\n\n        {this.state.errorMessage ? <p className=\"error-message\">{this.state.errorMessage}</p> : null}\n\n        <button className=\"btn\" onClick={() => this.setState({ extraData: [...this.state.extraData, [null,null]] })}>Add More Data</button>\n\n        {this.state.certificateObj ? <CertificateBox\n          certificateObj={this.state.certificateObj}\n          qrDisplay={false}\n          validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n          /> : null}\n\n        <button className=\"btn\" onClick={this.signNewCertificate}>Sign this Certificate</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_ENCODED_CERTIFICATE) {\n      screen = (\n        <>\n        {this.state.certificateHex\n          ? <>\n          <p>Below is the signed certificate hex string. Send this hex string to certifiee and they can paste it in the 'Register Certificate' box on this ÐApp.</p>\n          <p style={{wordBreak:'break-all'}}>{this.state.certificateHex}</p>\n          <p style={{cursor: 'pointer'}} onClick={() => {\n            copy(this.state.certificateHex);\n            !this.state.copied && setTimeout(() => {\n              this.setState({ copied: false });\n            }, 1000);\n            this.setState({ copied: true });\n          }}>{this.state.copied ? '[ Copied! ]' : '[ Copy To Clipboard ]'}</p>\n          </>\n          : <>\n        {header}\n        <p>Paste an unsigned or signed certificate in the below box:</p>\n        <textarea className={['certificate-textarea', this.state.textAreaClass].filter(className=>!!className).join(' ')} onChange={this.onTextAreaChange} />\n        {this.state.certificateObj\n          ? <>\n            <p>Your certificate preview:</p>\n            <CertificateBox\n              certificateObj={this.state.certificateObj}\n              qrDisplay={false}\n              validCertificate={[this.state.validCertificate, newStatus => this.setState({ validCertificate: newStatus })]}\n              />\n          </>\n          : null}\n          <button className=\"btn\" onClick={this.signEncodedCertificate}>Sign this Certificate with your private key</button>\n        </>}\n        </>\n      );\n    } else if(this.state.currentScreen === CURRENT_PAGE_ENUM.SIGN_CSV) {\n      screen = (\n        <>\n        {header}\n          {this.state.certificatesToSign.length === 0\n            ? <>\n          <button className=\"btn\" onClick={() => document.getElementById('csv-input').click()}>Select CSV file</button>\n          <CSVReader\n            inputId=\"csv-input\"\n            onFileLoaded={this.onFileLoaded}\n            style={{display: 'none'}}\n            onError={this.handleDarkSideForce}\n          />\n          </> : <>\n            <table>\n              <thead>\n                <tr>\n                  {this.state.csvKeys.map(key => (\n                    <th key={'csvkey-'+key}>{key}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.certificatesToSign.map((obj,i) => (\n                <tr key={'sign-'+i}>\n                  {obj.columns.map((field, j) => (\n                    <td key={'sign-field-'+j}>\n                      {field.length > 32\n                        ? (field.slice(0,2) === '0x'\n                          ? <>{field.slice(0,6)}...{field.slice(field.length - 4, field.length)} ({field.length/2} Bytes)</>\n                          : <>{field.slice(0,10)}... ({field.length} chars)</>\n                        )\n                        : <>{field}</>}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n              </tbody>\n            </table>\n\n            <p>Errors: {this.state.errorsInCSV}</p>\n\n            <button className=\"btn\" onClick={this.signCSV}>{this.state.csvSigning ? 'Signing' : 'Sign'} {this.state.certificatesToSign.length} certificates{this.state.csvSigning ? '...' : null}</button>\n          </>}\n\n          {this.state.certificatesSigned.length ? <>\n            <button className=\"btn\" onClick={this.downloadCSV}>Download updated CSV</button>\n          </> : null}\n        </>\n      );\n    }\n\n\n    return (\n      <>\n        <Helmet>\n          <title>Sign Certificate</title>\n          <meta\n            name=\"description\"\n            content=\"Sign Certificate which can be submitted to blockchain\"\n          />\n        </Helmet>\n\n        {this.state.isAuthorised\n          ? <p className=\"status-message\">Welcome {this.state.authorityName}! Using this portal you can sign certificates on your half and send the generated certificate hex strings to your students/clients so they can register those certificates.</p>\n          : <p className=\"error-message\">{window.signer ? <>Looks like {window.userAddress} is not a verified certifying authority. If you do your KYC for this wallet address, you'll become a verified certificate signer and be able to have a display name, website, logo in the certificates you sign.</> : <>Looks like Metamask is not connected. Please connect it to start signing certificates</>}</p>}\n\n        {screen}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Home from './containers/Home/Home';\nimport Navigation from './containers/Navigation/Navigation';\nimport RegisterCertificate from './containers/RegisterCertificate/RegisterCertificate';\nimport ViewCertificate from './containers/ViewCertificate/ViewCertificate';\nimport Hash from './containers/ViewCertificate/Hash/Hash';\nimport AddCertifier from './containers/AddCertifier/AddCertifier';\nimport ListAuthorities from './containers/ListAuthorities/ListAuthorities';\nimport SignCertificate from './containers/SignCertificate/SignCertificate';\nimport './App.css';\n\nimport { network } from './env';\n\nconst history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nwindow.ethers = require('ethers');\nwindow.provider = window.ethers.getDefaultProvider(network);\nwindow._z = require('./functions');\nwindow.certificates = {};\n\nrequire('./ethereum');\n// window.certificateContractInstance = require('./ethereum').certificateContractInstance;\n\nconst App = props => (\n  <Router history={history}>\n    <div className=\"App\">\n      <img className=\"background-lines top\" src='cert-background-lines.png' />\n      <img className=\"background-lines bottom\" src='cert-background-lines2.png' />\n      <header className=\"App-header\">\n        <Navigation />\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/register-certificate\" exact component={RegisterCertificate} />\n            <Route path=\"/view-certificate\" exact component={ViewCertificate} />\n            <Route path=\"/view-certificate/:hash\" exact component={Hash} />\n            <Route path=\"/add-certifier\" exact component={AddCertifier} />\n            <Route path=\"/list-authorities\" exact component={ListAuthorities} />\n            <Route path=\"/sign-certificate\" exact component={SignCertificate} />\n          </Switch>\n        </div>\n      </header>\n    </div>\n  </Router>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}